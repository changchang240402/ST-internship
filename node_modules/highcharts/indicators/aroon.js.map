{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2021 Wojciech Chmiel\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/aroon', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: { prototype: smaProto } } = SeriesRegistry.seriesTypes;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n            *\n            *  Constants\n            *\n            * */\n            const composedMembers = [];\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, bewteen which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            const pointValKey = 'top';\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                if (U.pushUnique(composedMembers, IndicatorClass)) {\n                    const proto = IndicatorClass.prototype;\n                    proto.linesApiNames = (proto.linesApiNames ||\n                        linesApiNames.slice());\n                    proto.pointArrayMap = (proto.pointArrayMap ||\n                        pointArrayMap.slice());\n                    proto.pointValKey = (proto.pointValKey ||\n                        pointValKey);\n                    proto.areaLinesNames = (proto.areaLinesNames ||\n                        areaLinesNames.slice());\n                    proto.drawGraph = indicatorDrawGraph;\n                    proto.getGraphPath = indicatorGetGraphPath;\n                    proto.toYData = indicatorToYData;\n                    proto.translate = indicatorTranslate;\n                }\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                const translatedLines = [];\n                (indicator.pointArrayMap || []).forEach((propertyName) => {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                const indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                let pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach((plotLine, index) => {\n                    // create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    const index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach((lineName, i) => {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                let areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (let i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                const pointColl = [];\n                (this.pointArrayMap || []).forEach((propertyName) => {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                const pointArrayMap = this.pointArrayMap;\n                let LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach((point) => {\n                    pointArrayMap.forEach((propertyName, i) => {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (this.dataModify) {\n                            value = this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/Aroon/AroonIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { extend, merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils\n        // Index of element with extreme value from array (min or max)\n        /**\n         * @private\n         */\n        function getExtremeIndexInArray(arr, extreme) {\n            let extremeValue = arr[0], valueIndex = 0, i;\n            for (i = 1; i < arr.length; i++) {\n                if (extreme === 'max' && arr[i] >= extremeValue ||\n                    extreme === 'min' && arr[i] <= extremeValue) {\n                    extremeValue = arr[i];\n                    valueIndex = i;\n                }\n            }\n            return valueIndex;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Aroon series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.aroon\n         *\n         * @augments Highcharts.Series\n         */\n        class AroonIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // 0- date, 1- Aroon Up, 2- Aroon Down\n                AR = [], xData = [], yData = [], low = 2, high = 1;\n                let aroonUp, aroonDown, xLow, xHigh, i, slicedY;\n                // For a N-period, we start from N-1 point, to calculate Nth point\n                // That is why we later need to comprehend slice() elements list\n                // with (+1)\n                for (i = period - 1; i < yValLen; i++) {\n                    slicedY = yVal.slice(i - period + 1, i + 2);\n                    xLow = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[low], elem);\n                    }), 'min');\n                    xHigh = getExtremeIndexInArray(slicedY.map(function (elem) {\n                        return pick(elem[high], elem);\n                    }), 'max');\n                    aroonUp = (xHigh / period) * 100;\n                    aroonDown = (xLow / period) * 100;\n                    if (xVal[i + 1]) {\n                        AR.push([xVal[i + 1], aroonUp, aroonDown]);\n                        xData.push(xVal[i + 1]);\n                        yData.push([aroonUp, aroonDown]);\n                    }\n                }\n                return {\n                    values: AR,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /**\n         * Aroon. This series requires the `linkedTo` option to be\n         * set and should be loaded after the `stock/indicators/indicators.js`.\n         *\n         * @sample {highstock} stock/indicators/aroon\n         *         Aroon\n         *\n         * @extends      plotOptions.sma\n         * @since        7.0.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n         *               navigatorOptions, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, showInNavigator,\n         *               stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/aroon\n         * @optionparent plotOptions.aroon\n         */\n        AroonIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * Paramters used in calculation of aroon series points.\n             *\n             * @excluding index\n             */\n            params: {\n                index: void 0,\n                period: 25\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b> {series.name}</b><br/>Aroon Up: {point.y}<br/>Aroon Down: {point.aroonDown}<br/>'\n            },\n            /**\n             * aroonDown line options.\n             */\n            aroonDown: {\n                /**\n                 * Styles for an aroonDown line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line. If not set, it's inherited from\n                     * [plotOptions.aroon.color](#plotOptions.aroon.color).\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: void 0\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(AroonIndicator.prototype, {\n            areaLinesNames: [],\n            linesApiNames: ['aroonDown'],\n            nameBase: 'Aroon',\n            pointArrayMap: ['y', 'aroonDown'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(AroonIndicator);\n        SeriesRegistry.registerSeriesType('aroon', AroonIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Aroon indicator. If the [type](#series.aroon.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.aroon\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/aroon\n         * @apioption series.aroon\n         */\n        ''; // to avoid removal of the above jsdoc\n\n        return AroonIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/aroon.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","MultipleLinesComposition","sma","prototype","smaProto","seriesTypes","defined","error","merge","composedMembers","linesApiNames","pointArrayMap","areaLinesNames","getLineName","propertyName","charAt","toUpperCase","slice","getTranslatedLinesNames","indicator","excludedValue","translatedLines","forEach","push","indicatorDrawGraph","pointValKey","mainLinePoints","points","mainLineOptions","options","mainLinePath","graph","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","length","point","plotLine","index","x","plotX","plotY","isNull","userOptions","fillColor","indexOf","secondLinePoints","firstLinePoints","originalColor","color","nextPoints","area","fillGraph","drawGraph","call","lineName","i","styles","indicatorGetGraphPath","areaPath","higherAreaPath","getGraphPath","arguments","indicatorToYData","pointColl","indicatorTranslate","LinesNames","value","translate","dataModify","modifyValue","yAxis","toPixels","compose","IndicatorClass","pushUnique","proto","toYData","SMAIndicator","extend","pick","getExtremeIndexInArray","arr","extreme","extremeValue","valueIndex","AroonIndicator","constructor","data","getValues","series","params","aroonUp","aroonDown","xLow","slicedY","period","xVal","xData","yVal","yData","yValLen","AR","map","elem","values","defaultOptions","marker","enabled","tooltip","pointFormat","lineWidth","lineColor","dataGrouping","approximation","nameBase","registerSeriesType"],"mappings":"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"}