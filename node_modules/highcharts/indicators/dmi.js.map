{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2021 Rafal Sebestjanski\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/dmi', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: { prototype: smaProto } } = SeriesRegistry.seriesTypes;\n        const { defined, error, merge } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n            *\n            *  Constants\n            *\n            * */\n            const composedMembers = [];\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, bewteen which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            const areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            const pointValKey = 'top';\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                if (U.pushUnique(composedMembers, IndicatorClass)) {\n                    const proto = IndicatorClass.prototype;\n                    proto.linesApiNames = (proto.linesApiNames ||\n                        linesApiNames.slice());\n                    proto.pointArrayMap = (proto.pointArrayMap ||\n                        pointArrayMap.slice());\n                    proto.pointValKey = (proto.pointValKey ||\n                        pointValKey);\n                    proto.areaLinesNames = (proto.areaLinesNames ||\n                        areaLinesNames.slice());\n                    proto.drawGraph = indicatorDrawGraph;\n                    proto.getGraphPath = indicatorGetGraphPath;\n                    proto.toYData = indicatorToYData;\n                    proto.translate = indicatorTranslate;\n                }\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                const translatedLines = [];\n                (indicator.pointArrayMap || []).forEach((propertyName) => {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                const indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                let pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach((plotLine, index) => {\n                    // create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    const index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach((lineName, i) => {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                let areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (let i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                const pointColl = [];\n                (this.pointArrayMap || []).forEach((propertyName) => {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                const pointArrayMap = this.pointArrayMap;\n                let LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach((point) => {\n                    pointArrayMap.forEach((propertyName, i) => {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (this.dataModify) {\n                            value = this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/DMI/DMIIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *  (c) 2010-2021 Rafal Sebestjanski\n         *\n         *  Directional Movement Index (DMI) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { sma: SMAIndicator } = SeriesRegistry.seriesTypes;\n        const { correctFloat, extend, isArray, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dmi\n         *\n         * @augments Highcharts.Series\n         */\n        class DMIIndicator extends SMAIndicator {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            calculateDM(yVal, i, isPositiveDM) {\n                const currentHigh = yVal[i][1], currentLow = yVal[i][2], previousHigh = yVal[i - 1][1], previousLow = yVal[i - 1][2];\n                let DM;\n                if (currentHigh - previousHigh > previousLow - currentLow) {\n                    // for +DM\n                    DM = isPositiveDM ? Math.max(currentHigh - previousHigh, 0) : 0;\n                }\n                else {\n                    // for -DM\n                    DM = !isPositiveDM ? Math.max(previousLow - currentLow, 0) : 0;\n                }\n                return correctFloat(DM);\n            }\n            calculateDI(smoothedDM, tr) {\n                return smoothedDM / tr * 100;\n            }\n            calculateDX(plusDI, minusDI) {\n                return correctFloat(Math.abs(plusDI - minusDI) / Math.abs(plusDI + minusDI) * 100);\n            }\n            smoothValues(accumulatedValues, currentValue, period) {\n                return correctFloat(accumulatedValues - accumulatedValues / period + currentValue);\n            }\n            getTR(currentPoint, prevPoint) {\n                return correctFloat(Math.max(\n                // currentHigh - currentLow\n                currentPoint[1] - currentPoint[2], \n                // currentHigh - previousClose\n                !prevPoint ? 0 : Math.abs(currentPoint[1] - prevPoint[3]), \n                // currentLow - previousClose\n                !prevPoint ? 0 : Math.abs(currentPoint[2] - prevPoint[3])));\n            }\n            getValues(series, params) {\n                const period = params.period, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, DMI = [], xData = [], yData = [];\n                if (\n                // Check period, if bigger than points length, skip\n                (xVal.length <= period) ||\n                    // Only ohlc data is valid\n                    !isArray(yVal[0]) ||\n                    yVal[0].length !== 4) {\n                    return;\n                }\n                let prevSmoothedPlusDM = 0, prevSmoothedMinusDM = 0, prevSmoothedTR = 0, i;\n                for (i = 1; i < yValLen; i++) {\n                    let smoothedPlusDM, smoothedMinusDM, smoothedTR, plusDM, // +DM\n                    minusDM, // -DM\n                    TR, plusDI, // +DI\n                    minusDI, // -DI\n                    DX;\n                    if (i <= period) {\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Accumulate first period values to smooth them later\n                        prevSmoothedPlusDM += plusDM;\n                        prevSmoothedMinusDM += minusDM;\n                        prevSmoothedTR += TR;\n                        // Get all values for the first point\n                        if (i === period) {\n                            plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                            minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                            DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                            DMI.push([xVal[i], DX, plusDI, minusDI]);\n                            xData.push(xVal[i]);\n                            yData.push([DX, plusDI, minusDI]);\n                        }\n                    }\n                    else {\n                        // Calculate current values\n                        plusDM = this.calculateDM(yVal, i, true);\n                        minusDM = this.calculateDM(yVal, i);\n                        TR = this.getTR(yVal[i], yVal[i - 1]);\n                        // Smooth +DM, -DM and TR\n                        smoothedPlusDM = this.smoothValues(prevSmoothedPlusDM, plusDM, period);\n                        smoothedMinusDM = this.smoothValues(prevSmoothedMinusDM, minusDM, period);\n                        smoothedTR = this.smoothValues(prevSmoothedTR, TR, period);\n                        // Save current smoothed values for the next step\n                        prevSmoothedPlusDM = smoothedPlusDM;\n                        prevSmoothedMinusDM = smoothedMinusDM;\n                        prevSmoothedTR = smoothedTR;\n                        // Get all next points (except the first one calculated above)\n                        plusDI = this.calculateDI(prevSmoothedPlusDM, prevSmoothedTR);\n                        minusDI = this.calculateDI(prevSmoothedMinusDM, prevSmoothedTR);\n                        DX = this.calculateDX(prevSmoothedPlusDM, prevSmoothedMinusDM);\n                        DMI.push([xVal[i], DX, plusDI, minusDI]);\n                        xData.push(xVal[i]);\n                        yData.push([DX, plusDI, minusDI]);\n                    }\n                }\n                return {\n                    values: DMI,\n                    xData: xData,\n                    yData: yData\n                };\n            }\n        }\n        /**\n         * Directional Movement Index (DMI).\n         * This series requires the `linkedTo` option to be set and should\n         * be loaded after the `stock/indicators/indicators.js` file.\n         *\n         * @sample stock/indicators/dmi\n         *         DMI indicator\n         *\n         * @extends      plotOptions.sma\n         * @since 9.1.0\n         * @product      highstock\n         * @excluding    allAreas, colorAxis, joinBy, keys, navigatorOptions,\n         *               pointInterval, pointIntervalUnit, pointPlacement,\n         *               pointRange, pointStart, showInNavigator, stacking\n         * @requires     stock/indicators/indicators\n         * @requires     stock/indicators/dmi\n         * @optionparent plotOptions.dmi\n         */\n        DMIIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n            /**\n             * @excluding index\n             */\n            params: {\n                index: void 0 // unused index, do not inherit (#15362)\n            },\n            marker: {\n                enabled: false\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color: {point.color}\">' +\n                    '\\u25CF</span><b> {series.name}</b><br/>' +\n                    '<span style=\"color: {point.color}\">DX</span>: {point.y}<br/>' +\n                    '<span style=\"color: ' +\n                    '{point.series.options.plusDILine.styles.lineColor}\">' +\n                    '+DI</span>: {point.plusDI}<br/>' +\n                    '<span style=\"color: ' +\n                    '{point.series.options.minusDILine.styles.lineColor}\">' +\n                    '-DI</span>: {point.minusDI}<br/>'\n            },\n            /**\n             * +DI line options.\n             */\n            plusDILine: {\n                /**\n                 * Styles for the +DI line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: \"#06b535\" /* Palette.positiveColor */ // green-ish\n                }\n            },\n            /**\n             * -DI line options.\n             */\n            minusDILine: {\n                /**\n                 * Styles for the -DI line.\n                 */\n                styles: {\n                    /**\n                     * Pixel width of the line.\n                     */\n                    lineWidth: 1,\n                    /**\n                     * Color of the line.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    lineColor: \"#f21313\" /* Palette.negativeColor */ // red-ish\n                }\n            },\n            dataGrouping: {\n                approximation: 'averages'\n            }\n        });\n        extend(DMIIndicator.prototype, {\n            areaLinesNames: [],\n            nameBase: 'DMI',\n            linesApiNames: ['plusDILine', 'minusDILine'],\n            pointArrayMap: ['y', 'plusDI', 'minusDI'],\n            parallelArrays: ['x', 'y', 'plusDI', 'minusDI'],\n            pointValKey: 'y'\n        });\n        MultipleLinesComposition.compose(DMIIndicator);\n        SeriesRegistry.registerSeriesType('dmi', DMIIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The Directional Movement Index (DMI) indicator series.\n         * If the [type](#series.dmi.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.dmi\n         * @since 9.1.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis,  dataParser, dataURL, joinBy, keys,\n         *            navigatorOptions, pointInterval, pointIntervalUnit,\n         *            pointPlacement, pointRange, pointStart, showInNavigator, stacking\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/dmi\n         * @apioption series.dmi\n         */\n        ''; // to include the above in the js output\n\n        return DMIIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/dmi.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","MultipleLinesComposition","sma","prototype","smaProto","seriesTypes","defined","error","merge","composedMembers","linesApiNames","pointArrayMap","areaLinesNames","getLineName","propertyName","charAt","toUpperCase","slice","getTranslatedLinesNames","indicator","excludedValue","translatedLines","forEach","push","indicatorDrawGraph","pointValKey","mainLinePoints","points","mainLineOptions","options","mainLinePath","graph","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","length","point","plotLine","index","x","plotX","plotY","isNull","userOptions","fillColor","indexOf","secondLinePoints","firstLinePoints","originalColor","color","nextPoints","area","fillGraph","drawGraph","call","lineName","i","styles","indicatorGetGraphPath","areaPath","higherAreaPath","getGraphPath","arguments","indicatorToYData","pointColl","indicatorTranslate","LinesNames","value","translate","dataModify","modifyValue","yAxis","toPixels","compose","IndicatorClass","pushUnique","proto","toYData","SMAIndicator","correctFloat","extend","isArray","DMIIndicator","constructor","calculateDM","yVal","isPositiveDM","currentHigh","currentLow","previousHigh","previousLow","Math","max","calculateDI","smoothedDM","tr","calculateDX","plusDI","minusDI","abs","smoothValues","accumulatedValues","currentValue","period","getTR","currentPoint","prevPoint","getValues","series","params","xVal","xData","yData","yValLen","DMI","prevSmoothedPlusDM","prevSmoothedMinusDM","prevSmoothedTR","smoothedPlusDM","smoothedMinusDM","smoothedTR","plusDM","minusDM","TR","DX","values","defaultOptions","marker","enabled","tooltip","pointFormat","plusDILine","lineWidth","lineColor","minusDILine","dataGrouping","approximation","nameBase","parallelArrays","registerSeriesType"],"mappings":"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"}