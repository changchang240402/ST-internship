{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Highcharts Stock as a plugin for Highcharts\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/stock', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                }\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than usin Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are substracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'masters/modules/broken-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/BrokenAxis.js']], function (Highcharts, BrokenAxis) {\n\n        const G = Highcharts;\n        // Compositions\n        BrokenAxis.compose(G.Axis, G.Series);\n\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        const ApproximationRegistry = {\n        // approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arrayMax, arrayMin, correctFloat, extend, isNumber } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            const len = arr.length;\n            let ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            const ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            let len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ApproximationDefaults = {\n            average,\n            averages,\n            close,\n            high,\n            hlc,\n            low,\n            ohlc,\n            open,\n            range,\n            sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        const common = {\n            // enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // the first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            // smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        const seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts aftre refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        const units = [\n            [\n                'millisecond',\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingDefaults = {\n            common,\n            seriesSpecific,\n            units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, extend, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            const axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(AxisClass.prototype, {\n                    applyGrouping,\n                    getGroupPixelWidth,\n                    setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            const series = this.series;\n            let i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProccessed flag to avoid taking\n         * previous data grouping of neighbour series into accound when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            const axis = this;\n            let i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instanciated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentaly use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingAxisComposition = {\n            compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto } } = SeriesRegistry;\n        const { addEvent, defined, error, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const baseGeneratePoints = seriesProto.generatePoints;\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            const options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            let i;\n            // DataGrouping x-coordinates.\n            if (dataGroupingOptions && series.xData && totalRange && series.groupMap) {\n                const groupedDataLength = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = pick(dataGroupingOptions.firstAnchor, anchor), lastAnchor = pick(dataGroupingOptions.lastAnchor, anchor);\n                // Anchor points that are not extremes.\n                if (anchor && anchor !== 'start') {\n                    const shiftInterval = (totalRange *\n                        { middle: 0.5, end: 1 }[anchor]);\n                    i = groupedXData.length - 1;\n                    while (i-- && i > 0) {\n                        groupedXData[i] += shiftInterval;\n                    }\n                }\n                // Change the first point position, but only when it is\n                // the first point in the data set not in the current zoom.\n                if (firstAnchor &&\n                    firstAnchor !== 'start' &&\n                    series.xData[0] >= groupedXData[0]) {\n                    const groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                    let firstGroupstEnd;\n                    if (isNumber(groupStart) && isNumber(groupLength)) {\n                        firstGroupstEnd = groupStart + (groupLength - 1);\n                    }\n                    groupedXData[0] = {\n                        middle: groupedXData[0] + 0.5 * totalRange,\n                        end: groupedXData[0] + totalRange,\n                        firstPoint: series.xData[0],\n                        lastPoint: firstGroupstEnd && series.xData[firstGroupstEnd]\n                    }[firstAnchor];\n                }\n                // Change the last point position but only when it is\n                // the last point in the data set not in the current zoom.\n                if (lastAnchor &&\n                    lastAnchor !== 'start' &&\n                    totalRange &&\n                    groupedXData[groupedDataLength] >= xMax - totalRange) {\n                    const lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                    groupedXData[groupedDataLength] = {\n                        middle: groupedXData[groupedDataLength] + 0.5 * totalRange,\n                        end: groupedXData[groupedDataLength] + totalRange,\n                        firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                        lastPoint: series.xData[series.xData.length - 1]\n                    }[lastAnchor];\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            let currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            const skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (!skip) {\n                series.destroyGroupedData();\n                const processedXData = dataGroupingOptions.groupAll ?\n                    series.xData :\n                    series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                    series.yData :\n                    series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n                let i, hasGroupedData;\n                // Execute grouping if the amount of points is greater than the limit\n                // defined in groupPixelWidth\n                if (groupPixelWidth &&\n                    processedXData &&\n                    processedXData.length &&\n                    plotSizeX) {\n                    hasGroupedData = true;\n                    // Force recreation of point instances in series.translate, #5699\n                    series.isDirty = true;\n                    series.points = null; // #6709\n                    const extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                        xAxis.ordinal &&\n                        xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                        groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                        DataGroupingDefaults.units), \n                    // Processed data may extend beyond axis (#4907)\n                    Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                        processedXData,\n                        processedYData,\n                        groupPositions,\n                        dataGroupingOptions.approximation\n                    ]);\n                    let groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                    // The smoothed option is deprecated, instead, there is a fallback\n                    // to the new anchoring mechanism. #12455.\n                    if (dataGroupingOptions &&\n                        dataGroupingOptions.smoothed &&\n                        groupedXData.length) {\n                        dataGroupingOptions.firstAnchor = 'firstPoint';\n                        dataGroupingOptions.anchor = 'middle';\n                        dataGroupingOptions.lastAnchor = 'lastPoint';\n                        error(32, false, chart, {\n                            'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                        });\n                    }\n                    // Record what data grouping values were used\n                    for (i = 1; i < groupPositions.length; i++) {\n                        // The grouped gapSize needs to be the largest distance between\n                        // the group to capture varying group sizes like months or DST\n                        // crossing (#10000). Also check that the gap is not at the\n                        // start of a segment.\n                        if (!groupPositions.info.segmentStarts ||\n                            groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                            gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                        }\n                    }\n                    currentDataGrouping = groupPositions.info;\n                    currentDataGrouping.gapSize = gapSize;\n                    series.closestPointRange = groupPositions.info.totalRange;\n                    series.groupMap = groupedData.groupMap;\n                    series.currentDataGrouping = currentDataGrouping;\n                    anchorPoints(series, groupedXData, xMax);\n                    if (reserveSpace) {\n                        adjustExtremes(xAxis, groupedXData);\n                    }\n                    // We calculated all group positions but we should render\n                    // only the ones within the visible range\n                    if (dataGroupingOptions.groupAll) {\n                        // Keep the reference to all grouped points\n                        // for further calculation (eg. heikinashi).\n                        series.allGroupedData = groupedYData;\n                        croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                        groupedXData = croppedData.xData;\n                        groupedYData = croppedData.yData;\n                        series.cropStart = croppedData.start; // #15005\n                    }\n                    // Set series props\n                    series.processedXData = groupedXData;\n                    series.processedYData = groupedYData;\n                }\n                else {\n                    series.groupMap = null;\n                }\n                series.hasGroupedData = hasGroupedData;\n                series.preventGraphAnimation =\n                    (lastDataGrouping && lastDataGrouping.totalRange) !==\n                        (currentDataGrouping && currentDataGrouping.totalRange);\n            }\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            const PointClass = SeriesClass.prototype.pointClass;\n            if (U.pushUnique(composedMembers, PointClass)) {\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n            }\n            if (U.pushUnique(composedMembers, SeriesClass)) {\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(SeriesClass.prototype, {\n                    applyGrouping,\n                    destroyGroupedData,\n                    generatePoints,\n                    getDGApproximation,\n                    groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            const series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // when grouping the fake extended axis for panning,\n            // we don't need to consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            let pointX, pointY, groupedY, pos = 0, start = 0;\n            const approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                let len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            const valuesLen = pointArrayMapLength || 1;\n            for (let i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // with next point\n                }\n                // when a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // reset the aggregate arrays\n                    start = i;\n                    for (let j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // break out\n                if (i === dataLength) {\n                    break;\n                }\n                // for each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    const index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    let val;\n                    for (let j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData,\n                groupedYData,\n                groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            let defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                const rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingSeriesComposition = {\n            compose,\n            groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { addEvent, extend, isNumber } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                U.pushUnique(composedMembers, TooltipClass)) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            const chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            let xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // if we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // if not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                // now format the key\n                formattedKey = time.dateFormat(xDateFormat, labelConfig.key);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, labelConfig.key + currentDataGrouping.totalRange - 1);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingComposition = {\n            compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        const G = Highcharts;\n        G.dataGrouping = {\n            approximationDefaults: ApproximationDefaults,\n            approximations: ApproximationRegistry\n        };\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindingsUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2021 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define types for editable fields per annotation. There is no need to define\n         * numbers, because they won't change their type to string.\n         * @private\n         */\n        const annotationsFieldsTypes = {\n            backgroundColor: 'string',\n            borderColor: 'string',\n            borderRadius: 'string',\n            color: 'string',\n            fill: 'string',\n            fontSize: 'string',\n            labels: 'string',\n            name: 'string',\n            stroke: 'string',\n            title: 'string'\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns the first xAxis or yAxis that was clicked with its value.\n         *\n         * @private\n         *\n         * @param {Array<Highcharts.PointerAxisCoordinateObject>} coords\n         *        All the chart's x or y axes with a current pointer's axis value.\n         *\n         * @return {Highcharts.PointerAxisCoordinateObject}\n         *         Object with a first found axis and its value that pointer\n         *         is currently pointing.\n         */\n        function getAssignedAxis(coords) {\n            return coords.filter((coord) => {\n                const extremes = coord.axis.getExtremes(), axisMin = extremes.min, axisMax = extremes.max, \n                // Correct axis edges when axis has series\n                // with pointRange (like column)\n                minPointOffset = pick(coord.axis.minPointOffset, 0);\n                return isNumber(axisMin) && isNumber(axisMax) &&\n                    coord.value >= (axisMin - minPointOffset) &&\n                    coord.value <= (axisMax + minPointOffset) &&\n                    // don't count navigator axis\n                    !coord.axis.options.isInternal;\n            })[0]; // If the axes overlap, return the first axis that was found.\n        }\n        /**\n         * Get field type according to value\n         *\n         * @private\n         *\n         * @param {'boolean'|'number'|'string'} value\n         * Atomic type (one of: string, number, boolean)\n         *\n         * @return {'checkbox'|'number'|'text'}\n         * Field type (one of: text, number, checkbox)\n         */\n        function getFieldType(key, value) {\n            const predefinedType = annotationsFieldsTypes[key];\n            let fieldType = typeof value;\n            if (defined(predefinedType)) {\n                fieldType = predefinedType;\n            }\n            return {\n                'string': 'text',\n                'number': 'number',\n                'boolean': 'checkbox'\n            }[fieldType];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigationBindingUtilities = {\n            annotationsFieldsTypes,\n            getAssignedAxis,\n            getFieldType\n        };\n\n        return NavigationBindingUtilities;\n    });\n    _registerModule(_modules, 'Extensions/MouseWheelZoom/MouseWheelZoom.js', [_modules['Core/Utilities.js'], _modules['Extensions/Annotations/NavigationBindingsUtilities.js']], function (U, NBU) {\n        /* *\n         *\n         *  (c) 2023 Torstein Honsi, Askel Eirik Johansson\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, isObject, pick, defined, merge, isNumber } = U;\n        const { getAssignedAxis } = NBU;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedClasses = [], defaultOptions = {\n            enabled: true,\n            sensitivity: 1.1\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        const optionsToObject = (options) => {\n            if (!isObject(options)) {\n                return merge(defaultOptions, { enabled: defined(options) ? options : true });\n            }\n            return merge(defaultOptions, options);\n        };\n        /**\n         * Fit a segment inside a range.\n         * @private\n         * @param {number} outerStart\n         * Beginning of the range.\n         * @param {number} outerWidth\n         * Width of the range.\n         * @param {number} innerStart\n         * Beginning of the segment.\n         * @param {number} innerWidth\n         * Width of the segment.\n         * @return {Object}\n         * Object containing rangeStart and rangeWidth.\n         */\n        const fitToRange = (outerStart, outerWidth, innerStart, innerWidth) => {\n            if (innerStart + innerWidth > outerStart + outerWidth) {\n                if (innerWidth > outerWidth) {\n                    innerWidth = outerWidth;\n                    innerStart = outerStart;\n                }\n                else {\n                    innerStart = outerStart + outerWidth - innerWidth;\n                }\n            }\n            if (innerWidth > outerWidth) {\n                innerWidth = outerWidth;\n            }\n            if (innerStart < outerStart) {\n                innerStart = outerStart;\n            }\n            return {\n                rangeStart: innerStart,\n                rangeWidth: innerWidth\n            };\n        };\n        let wheelTimer, startOnTick, endOnTick;\n        /**\n         * Temporarly disable `axis.startOnTick` and `axis.endOnTick` to allow zooming\n         * for small values.\n         * @private\n        */\n        const waitForAutomaticExtremes = function (axis) {\n            const axisOptions = axis.options;\n            // Options interfering with yAxis zoom by setExtremes() returning\n            // integers by default.\n            if (defined(wheelTimer)) {\n                clearTimeout(wheelTimer);\n            }\n            if (!defined(startOnTick)) {\n                startOnTick = axisOptions.startOnTick;\n                endOnTick = axisOptions.endOnTick;\n            }\n            // Temporarily disable start and end on tick, because they would\n            // prevent small increments of zooming.\n            if (startOnTick || endOnTick) {\n                axisOptions.startOnTick = false;\n                axisOptions.endOnTick = false;\n            }\n            wheelTimer = setTimeout(() => {\n                if (defined(startOnTick) && defined(endOnTick)) {\n                    // Repeat merge after the wheel zoom is finished, #19178\n                    axisOptions.startOnTick = startOnTick;\n                    axisOptions.endOnTick = endOnTick;\n                    // Set the extremes to the same as they already are, but now\n                    // with the original startOnTick and endOnTick. We need\n                    // `forceRedraw` otherwise it will detect that the values\n                    // haven't changed. We do not use a simple yAxis.update()\n                    // because it will destroy the ticks and prevent animation.\n                    const { min, max } = axis.getExtremes();\n                    axis.forceRedraw = true;\n                    axis.setExtremes(min, max);\n                    startOnTick = endOnTick = void 0;\n                }\n            }, 400);\n        };\n        /**\n        * Calulate the ratio of mouse position on the axis to it's length. If mousePos\n        * doesn't exist, returns 0.5;\n        * @private\n        */\n        const getMouseAxisRatio = function (chart, axis, mousePos) {\n            if (!defined(mousePos)) {\n                return 0.5;\n            }\n            const mouseAxisRatio = (mousePos - axis.pos) / axis.len, isXAxis = axis.isXAxis;\n            if (isXAxis && (!axis.reversed !== !chart.inverted) ||\n                !isXAxis && axis.reversed) {\n                // We are taking into account that xAxis automatically gets\n                // reversed when chart.inverted\n                return 1 - mouseAxisRatio;\n            }\n            return mouseAxisRatio;\n        };\n        /**\n        * Perform zooming on the passed axis.\n        * @private\n        * @param {Highcharts.Chart} chart\n        * Chart object.\n        * @param {Highcharts.Axis} axis\n        * Axis to zoom.\n        * @param {number} mousePos\n        * Mouse position on the plot.\n        * @param {number} howMuch\n        * Amount of zoom to apply.\n        * @param {number} centerArg\n        * Mouse position in axis units.\n        * @return {boolean}\n        * True if axis extremes were changed.\n        */\n        const zoomOnDirection = function (chart, axis, mousePos, howMuch, centerArg) {\n            const isXAxis = axis.isXAxis;\n            let hasZoomed = false;\n            if (defined(axis.max) && defined(axis.min) &&\n                defined(axis.dataMax) && defined(axis.dataMin)) {\n                if (!isXAxis) {\n                    waitForAutomaticExtremes(axis);\n                }\n                const range = axis.max - axis.min, center = isNumber(centerArg) ? centerArg :\n                    axis.min + range / 2, mouseAxisRatio = getMouseAxisRatio(chart, axis, mousePos), newRange = range * howMuch, newMin = center - newRange * mouseAxisRatio, dataRange = pick(axis.options.max, axis.dataMax) -\n                    pick(axis.options.min, axis.dataMin), minPaddingOffset = axis.options.min ? 0 :\n                    dataRange * axis.options.minPadding, maxPaddingOffset = axis.options.max ? 0 :\n                    dataRange * axis.options.maxPadding, outerMin = pick(axis.options.min, axis.dataMin) - minPaddingOffset, outerRange = dataRange + maxPaddingOffset + minPaddingOffset, newExt = fitToRange(outerMin, outerRange, newMin, newRange), zoomOut = (newExt.rangeStart < pick(axis.options.min, outerMin) ||\n                    newExt.rangeStart === axis.min &&\n                        (newExt.rangeWidth > outerRange &&\n                            newExt.rangeStart + newExt.rangeWidth <\n                                pick(axis.options.max, Number.MIN_VALUE)) ||\n                    newExt.rangeWidth === axis.max - axis.min);\n                if (defined(howMuch) && !zoomOut) { // Zoom\n                    axis.setExtremes(newExt.rangeStart, newExt.rangeStart + newExt.rangeWidth, false);\n                    hasZoomed = true;\n                }\n                else { // Reset zoom\n                    axis.setExtremes(void 0, void 0, false);\n                }\n            }\n            return hasZoomed;\n        };\n        /**\n         * @private\n         */\n        const zoomBy = function (chart, howMuch, xAxis, yAxis, mouseX, mouseY, options) {\n            const type = pick(options.type, chart.zooming.type, ''), zoomX = /x/.test(type), zoomY = /y/.test(type);\n            let centerXArg = xAxis.toValue(mouseX), centerYArg = yAxis.toValue(mouseY);\n            if (chart.inverted) {\n                const emulateRoof = yAxis.pos + yAxis.len;\n                // Get the correct values\n                centerXArg = xAxis.toValue(mouseY);\n                centerYArg = yAxis.toValue(mouseX);\n                // Swapping x and y for simplicity when chart is inverted.\n                const tmp = mouseX;\n                mouseX = mouseY;\n                mouseY = emulateRoof - tmp + yAxis.pos;\n            }\n            const hasZoomedX = zoomX && zoomOnDirection(chart, xAxis, mouseX, howMuch, centerXArg), hasZoomedY = zoomY && zoomOnDirection(chart, yAxis, mouseY, howMuch, centerYArg), hasZoomed = hasZoomedX || hasZoomedY;\n            if (hasZoomed) {\n                chart.redraw(false);\n            }\n            return hasZoomed;\n        };\n        /**\n         * @private\n         */\n        function onAfterGetContainer() {\n            const chart = this, wheelZoomOptions = optionsToObject(chart.zooming.mouseWheel);\n            if (wheelZoomOptions.enabled) {\n                addEvent(this.container, 'wheel', (e) => {\n                    e = this.pointer.normalize(e);\n                    const allowZoom = !chart.pointer.inClass(e.target, 'highcharts-no-mousewheel');\n                    // Firefox uses e.detail, WebKit and IE uses deltaX, deltaY, deltaZ.\n                    if (chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop) && allowZoom) {\n                        const wheelSensitivity = wheelZoomOptions.sensitivity || 1.1, delta = e.detail || ((e.deltaY || 0) / 120), xAxisCoords = getAssignedAxis(this.pointer.getCoordinates(e).xAxis), yAxisCoords = getAssignedAxis(this.pointer.getCoordinates(e).yAxis);\n                        const hasZoomed = zoomBy(chart, Math.pow(wheelSensitivity, delta), xAxisCoords ? xAxisCoords.axis : chart.xAxis[0], yAxisCoords ? yAxisCoords.axis : chart.yAxis[0], e.chartX, e.chartY, wheelZoomOptions);\n                        // Prevent page scroll\n                        if (hasZoomed && e.preventDefault) {\n                            e.preventDefault();\n                        }\n                    }\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (composedClasses.indexOf(ChartClass) === -1) {\n                composedClasses.push(ChartClass);\n                addEvent(ChartClass, 'afterGetContainer', onAfterGetContainer);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MouseWheelZoomComposition = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The mouse wheel zoom is a feature included in Highcharts Stock, but is also\n         * available for Highcharts Core as a module. Zooming with the mouse wheel is\n         * enabled by default in Highcharts Stock. In Highcharts Core it is enabled if\n         * [chart.zooming.type](chart.zooming.type) is set. It can be disabled by\n         * setting this option to `false`.\n         *\n         * @type      {boolean|object}\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @sample    {highstock} stock/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @apioption chart.zooming.mouseWheel\n         */\n        /**\n         * Zooming with the mouse wheel can be disabled by setting this option to\n         * `false`.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.enabled\n         */\n        /**\n         * Adjust the sensitivity of the zoom. Sensitivity of mouse wheel or trackpad\n         * scrolling. `1` is no sensitivity, while with `2`, one mouse wheel delta will\n         * zoom in `50%`.\n         *\n         * @type      {number}\n         * @default   1.1\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @sample    {highstock} stock/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @apioption chart.zooming.mouseWheel.sensitivity\n         */\n        /**\n         * Decides in what dimensions the user can zoom scrolling the wheel. Can be one\n         * of `x`, `y` or `xy`. In Highcharts Core, if not specified here, it will\n         * inherit the type from [chart.zooming.type](chart.zooming.type). In Highcharts\n         * Stock, it defaults to `x`.\n         *\n         * Note that particularly with mouse wheel in the y direction, the zoom is\n         * affected by the default [yAxis.startOnTick](#yAxis.startOnTick) and\n         * [endOnTick]((#yAxis.endOnTick)) settings. In order to respect these settings,\n         * the zoom level will adjust after the user has stopped zooming. To prevent\n         * this, consider setting `startOnTick` and `endOnTick` to `false`.\n         *\n         * @type      {string}\n         * @default   {highcharts} undefined\n         * @default   {highstock} x\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.type\n         */\n        (''); // Keeps doclets above in JS file\n\n        return MouseWheelZoomComposition;\n    });\n    _registerModule(_modules, 'masters/modules/mouse-wheel-zoom.src.js', [_modules['Core/Globals.js'], _modules['Extensions/MouseWheelZoom/MouseWheelZoom.js']], function (Highcharts, MouseWheelZoom) {\n\n        const G = Highcharts;\n        MouseWheelZoom.compose(G.Chart);\n\n    });\n    _registerModule(_modules, 'Series/DataModifyComposition.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, Point, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { prototype: { tooltipFormatter: pointTooltipFormatter } } = Point;\n        const { addEvent, arrayMax, arrayMin, correctFloat, defined, isArray, isNumber, isString, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var DataModifyComposition;\n        (function (DataModifyComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Extends the series, axis and point classes with\n             * compare and cumulative support.\n             *\n             * @private\n             *\n             * @param SeriesClass\n             * Series class to use.\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param PointClass\n             * Point class to use.\n             */\n            function compose(SeriesClass, AxisClass, PointClass) {\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.setCompare = seriesSetCompare;\n                    seriesProto.setCumulative = seriesSetCumulative;\n                    addEvent(SeriesClass, 'afterInit', afterInit);\n                    addEvent(SeriesClass, 'afterGetExtremes', afterGetExtremes);\n                    addEvent(SeriesClass, 'afterProcessData', afterProcessData);\n                }\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    const axisProto = AxisClass.prototype;\n                    axisProto.setCompare = axisSetCompare;\n                    axisProto.setModifier = setModifier;\n                    axisProto.setCumulative = axisSetCumulative;\n                }\n                if (U.pushUnique(composedMembers, PointClass)) {\n                    const pointProto = PointClass.prototype;\n                    pointProto.tooltipFormatter = tooltipFormatter;\n                }\n                return SeriesClass;\n            }\n            DataModifyComposition.compose = compose;\n            /* ********************************************************************** *\n             *  Start shared compare and cumulative logic                             *\n             * ********************************************************************** */\n            /**\n             * Shared code for the axis.setCompare() and the axis.setCumulative()\n             * methods. Inits the 'compare' or the 'cumulative' mode.\n             * @private\n             */\n            function setModifier(mode, modeState, redraw) {\n                if (!this.isXAxis) {\n                    this.series.forEach(function (series) {\n                        if (mode === 'compare' &&\n                            typeof modeState !== 'boolean') {\n                            series.setCompare(modeState, false);\n                        }\n                        else if (mode === 'cumulative' &&\n                            !isString(modeState)) {\n                            series.setCumulative(modeState, false);\n                        }\n                    });\n                    if (pick(redraw, true)) {\n                        this.chart.redraw();\n                    }\n                }\n            }\n            /**\n             * Extend the tooltip formatter by adding support for the point.change\n             * variable as well as the changeDecimals option.\n             *\n             * @ignore\n             * @function Highcharts.Point#tooltipFormatter\n             *\n             * @param {string} pointFormat\n             */\n            function tooltipFormatter(pointFormat) {\n                const point = this, { numberFormatter } = point.series.chart, replace = function (value) {\n                    pointFormat = pointFormat.replace('{point.' + value + '}', (point[value] > 0 && value === 'change' ? '+' : '') +\n                        numberFormatter(point[value], pick(point.series.tooltipOptions.changeDecimals, 2)));\n                };\n                if (defined(point.change)) {\n                    replace('change');\n                }\n                if (defined(point.cumulativeSum)) {\n                    replace('cumulativeSum');\n                }\n                return pointTooltipFormatter.apply(this, [pointFormat]);\n            }\n            /**\n             * Extend series.init by adding a methods to modify the y values used\n             * for plotting on the y axis. For compare mode, this method is called both\n             * from the axis when finding dataMin and dataMax,\n             * and from the series.translate method.\n             *\n             * @ignore\n             * @function Highcharts.Series#init\n             */\n            function afterInit() {\n                const compare = this.options.compare;\n                let dataModify;\n                if (compare === 'percent' ||\n                    compare === 'value' ||\n                    this.options.cumulative) {\n                    dataModify = new Additions(this);\n                    if (compare === 'percent' || compare === 'value') {\n                        // Set comparison mode\n                        dataModify.initCompare(compare);\n                    }\n                    else {\n                        // Set Cumulative Sum mode\n                        dataModify.initCumulative();\n                    }\n                }\n                this.dataModify = dataModify;\n            }\n            /**\n             * Adjust the extremes (compare and cumulative modify the data).\n             * @private\n             */\n            function afterGetExtremes(e) {\n                const dataExtremes = e.dataExtremes, activeYData = dataExtremes.activeYData;\n                if (this.dataModify && dataExtremes) {\n                    let extremes;\n                    if (this.options.compare) {\n                        extremes = [\n                            this.dataModify.modifyValue(dataExtremes.dataMin),\n                            this.dataModify.modifyValue(dataExtremes.dataMax)\n                        ];\n                    }\n                    else if (this.options.cumulative &&\n                        isArray(activeYData) &&\n                        // If only one y visible, sum doesn't change\n                        // so no need to change extremes\n                        activeYData.length >= 2) {\n                        extremes = Additions.getCumulativeExtremes(activeYData);\n                    }\n                    if (extremes) {\n                        dataExtremes.dataMin = arrayMin(extremes);\n                        dataExtremes.dataMax = arrayMax(extremes);\n                    }\n                }\n            }\n            /* ********************************************************************** *\n             *  End shared compare and cumulative logic                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start value compare logic                                             *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCompare} on the X axis to update all its series.\n             *\n             * @function Highcharts.Series#setCompare\n             *\n             * @param {string|null} [compare]\n             *        Can be one of `undefined` (default), `null`, `\"percent\"`\n             *        or `\"value\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCompare(compare, redraw) {\n                // Survive to export, #5485 (and for options generally)\n                this.options.compare = this.userOptions.compare = compare;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                if (this.dataModify && (compare === 'value' || compare === 'percent')) {\n                    this.dataModify.initCompare(compare);\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.change;\n                    });\n                }\n            }\n            /**\n             * Extend series.processData by finding the first y value in the plot area,\n             * used for comparing the following values\n             *\n             * @ignore\n             * @function Highcharts.Series#processData\n             */\n            function afterProcessData() {\n                const series = this;\n                if (series.xAxis && // not pies\n                    series.processedYData &&\n                    series.dataModify) {\n                    const processedXData = series.processedXData, processedYData = series.processedYData, length = processedYData.length, compareStart = series.options.compareStart === true ? 0 : 1;\n                    let keyIndex = -1, i;\n                    // For series with more than one value (range, OHLC etc), compare\n                    // against close or the pointValKey (#4922, #3112, #9854)\n                    if (series.pointArrayMap) {\n                        keyIndex = series.pointArrayMap.indexOf(series.options.pointValKey || series.pointValKey || 'y');\n                    }\n                    // find the first value for comparison\n                    for (i = 0; i < length - compareStart; i++) {\n                        const compareValue = processedYData[i] && keyIndex > -1 ?\n                            processedYData[i][keyIndex] : processedYData[i];\n                        if (isNumber(compareValue) &&\n                            compareValue !== 0 &&\n                            processedXData[i + compareStart] >= (series.xAxis.min || 0)) {\n                            series.dataModify.compareValue = compareValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the compare mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             *\n             * @sample stock/members/axis-setcompare/\n             *         Set compare\n             *\n             * @function Highcharts.Axis#setCompare\n             *\n             * @param {string|null} [compare]\n             *        The compare mode. Can be one of `undefined` (default), `null`,\n             *        `\"value\"` or `\"percent\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCompare(compare, redraw) {\n                this.setModifier('compare', compare, redraw);\n            }\n            /* ********************************************************************** *\n             *  End value compare logic                                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start Cumulative Sum logic, author: Rafal Sebestjanski                *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCumulative} on the Y axis to update all its series.\n             *\n             * @function Highcharts.Series#setCumulative\n             *\n             * @param {boolean} [cumulative=false]\n             *        Either enable or disable Cumulative Sum mode.\n             *        Can be one of `false` (default) or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCumulative(cumulative, redraw) {\n                // Set default value to false\n                cumulative = pick(cumulative, false);\n                // Survive to export, #5485 (and for options generally)\n                this.options.cumulative = this.userOptions.cumulative = cumulative;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                // If should, turn on the Cumulative Sum mode\n                if (this.dataModify) {\n                    this.dataModify.initCumulative();\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.cumulativeSum;\n                    });\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the cumulative mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             *\n             * @sample stock/members/axis-setcumulative/\n             *         Set cumulative\n             *\n             * @function Highcharts.Axis#setCumulative\n             *\n             * @param {boolean} [cumulative]\n             *        Whether to disable or enable the cumulative mode.\n             *        Can be one of `undefined` (default, treated as `false`),\n             *        `false` or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCumulative(cumulative, redraw) {\n                this.setModifier('cumulative', cumulative, redraw);\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(series) {\n                    this.series = series;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * @private\n                 */\n                modifyValue() {\n                    return 0;\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#getCumulativeExtremes\n                 *\n                 * @param {Array} [activeYData]\n                 *        An array cointaining all the points' y values\n                 *        in a visible range.\n                 */\n                static getCumulativeExtremes(activeYData) {\n                    let cumulativeDataMin = Infinity, cumulativeDataMax = -Infinity;\n                    activeYData.reduce((prev, cur) => {\n                        const sum = prev + cur;\n                        cumulativeDataMin = Math.min(cumulativeDataMin, sum, prev);\n                        cumulativeDataMax = Math.max(cumulativeDataMax, sum, prev);\n                        return sum;\n                    });\n                    return [cumulativeDataMin, cumulativeDataMax];\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCompare\n                 *\n                 * @param {string} [compare]\n                 *        Can be one of `\"percent\"` or `\"value\"`.\n                 */\n                initCompare(compare) {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        const compareValue = this.compareValue;\n                        if (typeof value !== 'undefined' &&\n                            typeof compareValue !== 'undefined') { // #2601, #5814\n                            // Get the modified value\n                            if (compare === 'value') {\n                                value -= compareValue;\n                                // Compare percent\n                            }\n                            else {\n                                const compareBase = this.series.options.compareBase;\n                                value = 100 * (value / compareValue) -\n                                    (compareBase === 100 ? 0 : 100);\n                            }\n                            // record for tooltip etc.\n                            if (typeof index !== 'undefined') {\n                                const point = this.series.points[index];\n                                if (point) {\n                                    point.change = value;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCumulative\n                 */\n                initCumulative() {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        if (value !== void 0 && index !== void 0) {\n                            const prevPoint = index > 0 ?\n                                this.series.points[index - 1] : null;\n                            // Get the modified value\n                            if (prevPoint && prevPoint.cumulativeSum) {\n                                value = correctFloat(prevPoint.cumulativeSum + value);\n                            }\n                            // Record for tooltip etc.\n                            const point = this.series.points[index];\n                            if (point) {\n                                point.cumulativeSum = value;\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n            }\n            DataModifyComposition.Additions = Additions;\n        })(DataModifyComposition || (DataModifyComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Compare the values of the series against the first non-null, non-\n         * zero value in the visible range. The y axis will show percentage\n         * or absolute change depending on whether `compare` is set to `\"percent\"`\n         * or `\"value\"`. When this is applied to multiple series, it allows\n         * comparing the development of the series against each other. Adds\n         * a `change` field to every point object.\n         *\n         * @see [compareBase](#plotOptions.series.compareBase)\n         * @see [Axis.setCompare()](/class-reference/Highcharts.Axis#setCompare)\n         * @see [Series.setCompare()](/class-reference/Highcharts.Series#setCompare)\n         *\n         * @sample {highstock} stock/plotoptions/series-compare-percent/\n         *         Percent\n         * @sample {highstock} stock/plotoptions/series-compare-value/\n         *         Value\n         *\n         * @type      {string}\n         * @since     1.0.1\n         * @product   highstock\n         * @validvalue [\"percent\", \"value\"]\n         * @apioption plotOptions.series.compare\n         */\n        /**\n         * Defines if comparison should start from the first point within the visible\n         * range or should start from the first point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will have 0% (`compareStart=true`) or should have been already calculated\n         * according to the previous point (`compareStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-comparestart/\n         *         Calculate compare within visible range\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.compareStart\n         */\n        /**\n         * When [compare](#plotOptions.series.compare) is `percent`, this option\n         * dictates whether to use 0 or 100 as the base of comparison.\n         *\n         * @sample {highstock} stock/plotoptions/series-comparebase/\n         *         Compare base is 100\n         *\n         * @type       {number}\n         * @default    0\n         * @since      5.0.6\n         * @product    highstock\n         * @validvalue [0, 100]\n         * @apioption  plotOptions.series.compareBase\n         */\n        /**\n         * Cumulative Sum feature replaces points' values with the following formula:\n         * `sum of all previous points' values + current point's value`.\n         * Works only for points in a visible range.\n         * Adds the `cumulativeSum` field to each point object that can be accessed\n         * e.g. in the [tooltip.pointFormat](https://api.highcharts.com/highstock/tooltip.pointFormat).\n         *\n         * With `dataGrouping` enabled, default grouping approximation is set to `sum`.\n         *\n         * @see [Axis.setCumulative()](/class-reference/Highcharts.Axis#setCumulative)\n         * @see [Series.setCumulative()](/class-reference/Highcharts.Series#setCumulative)\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulative-sum/\n         *         Cumulative Sum\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 9.3.0\n         * @product   highstock\n         * @apioption plotOptions.series.cumulative\n         */\n        ''; // keeps doclets above in transpiled file\n\n        return DataModifyComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisZoom(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            if (axis.isXAxis && ((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled))) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y') {\n                    e.zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom\n                    // selection, then when the reset button is pressed, revert to\n                    // this state. This should apply only if the chart is\n                    // initialized with a range (#6612), otherwise zoom all the way\n                    // out.\n                }\n                else if (((!isTouchDevice && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    if (defined(e.newMin)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                    }\n                    else if (previousZoom) {\n                        e.newMin = previousZoom[0];\n                        e.newMax = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof e.zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'zoom', onAxisZoom);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, chart = axis.chart;\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                const fixedRange = chart && chart.fixedRange, halfPointRange = (axis.pointRange || 0) / 2;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // Make sure panning to the edges does not decrease the zoomed range\n                if (fixedRange && axis.dataMin && axis.dataMax) {\n                    if (newMax >= axis.dataMax) {\n                        newMin = correctFloat(axis.dataMax - fixedRange);\n                    }\n                    if (newMin <= axis.dataMin) {\n                        newMax = correctFloat(axis.dataMin + fixedRange);\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null,\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * xAxis.maxPadding, but value is set in milliseconds.\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @since   6.0.0\n                 */\n                overscroll: 0,\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = Math.round(halfWidth / 3) + 0.5;\n            height = options.height || height;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, setOptions } = D;\n        const { isTouchDevice } = H;\n        const { getRendererType } = RendererRegistry;\n        const { addEvent, extend, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, NavigatorClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            NavigatorConstructor = NavigatorClass;\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n            if (U.pushUnique(composedMembers, SeriesClass)) {\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n            }\n            if (U.pushUnique(composedMembers, getRendererType)) {\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n            }\n            if (U.pushUnique(composedMembers, setOptions)) {\n                extend(defaultOptions, { navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2023 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n            *\n            *  Constants\n            *\n            * */\n            const composedMembers = [];\n            /* *\n            *\n            *  Variables\n            *\n            * */\n            let Scrollbar;\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composedMembers, ScrollbarClass)) {\n                    Scrollbar = ScrollbarClass;\n                }\n                if (pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can  also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)',\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chart = void 0;\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.group = void 0;\n                this.options = void 0;\n                this.renderer = void 0;\n                this.scrollbar = void 0;\n                this.scrollbarButtons = [];\n                this.scrollbarGroup = void 0;\n                this.scrollbarLeft = 0;\n                this.scrollbarRifles = void 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.track = void 0;\n                this.trackBorderWidth = 1;\n                this.userOptions = void 0;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                // Mouse events\n                const _events = [\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler]\n                ];\n                // Touch events\n                if (H.hasTouch) {\n                    _events.push([bar, 'touchstart', mouseDownHandler], [bar.ownerDocument, 'touchmove', mouseMoveHandler], [bar.ownerDocument, 'touchend', mouseUpHandler]);\n                }\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // minWidth distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        // +1 to compensate for crispifying in rect method\n                        width: size + 1,\n                        height: size + 1,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer.normalize(e), mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer.normalize(e), options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scorllbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -trackBorderWidth % 2 / 2,\n                    y: -trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer.normalize(e), range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Utilities.js']], function (Axis, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { hasTouch, isTouchDevice } = H;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, SeriesClass) {\n                NavigatorComposition.compose(AxisClass, ChartClass, Navigator, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.baseSeries = void 0;\n                this.chart = void 0;\n                this.handles = void 0;\n                this.height = void 0;\n                this.left = void 0;\n                this.navigatorEnabled = void 0;\n                this.navigatorGroup = void 0;\n                this.navigatorOptions = void 0;\n                this.navigatorSeries = void 0;\n                this.navigatorSize = void 0;\n                this.opposite = void 0;\n                this.outline = void 0;\n                this.range = void 0;\n                this.rendered = void 0;\n                this.scrollbarHeight = 0;\n                this.scrollButtonSize = void 0;\n                this.shades = void 0;\n                this.size = void 0;\n                this.top = void 0;\n                this.xAxis = void 0;\n                this.yAxis = void 0;\n                this.zoomedMax = void 0;\n                this.zoomedMin = void 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin],\n                        ['M', left, zoomedMax],\n                        ['L', left + height, zoomedMax],\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // left\n                        ['M', left, lineTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            navigatorTop + halfOutline\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup = renderer\n                    .g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                    navigator.shades[index] = shade;\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles && navigatorOptions.handles.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        navigator.handles[index] = renderer.symbol(handlesOptions.symbols[index], -width / 2 - 1, 0, width, height, handlesOptions);\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach((series) => {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                const chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, options);\n                this.init(this.chart);\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                // Add mouse move and mouseup events. These are bind to doc/container,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                eventsToUnbind.push(addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler));\n                // Touch events\n                if (hasTouch) {\n                    eventsToUnbind.push(addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                    eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                }\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer.normalize(e);\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, null, // auto animation\n                            { trigger: 'navigator' });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer.normalize(e);\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.fixedRange = null;\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer.normalize(e);\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, \n                        // Run animation when clicking buttons, scrollbar track etc,\n                        // but not when dragging handles or scrollbar\n                        navigator.hasDragged ? false : null, {\n                            trigger: 'navigator',\n                            triggerOp: 'navigator-drag',\n                            DOMEvent: DOMEvent // #1838\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break and ordinal options\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollButtonSize, 0, -scrollButtonSize, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollButtonSize, 0, scrollButtonSize],\n                        height: height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null,\n                    linkedTo: null,\n                    group: 'nav',\n                    padXAxis: false,\n                    xAxis: 'navigator-x-axis',\n                    yAxis: 'navigator-y-axis',\n                    showInLegend: false,\n                    stacking: void 0,\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitily\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.options.overscroll, 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    let chart = this, navigator = chart.navigator, marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'Février', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'Août',\n         *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: '→'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0,\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, setOptions } = D;\n        const { addEvent, defined, extend, find, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.fixedRange = max - min;\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n            }\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                addEvent(ChartClass, 'afterGetContainer', onChartAfterGetContainer);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'render', onChartRender);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                const chartProto = ChartClass.prototype;\n                chartProto.callbacks.push(onChartCallback);\n            }\n            if (U.pushUnique(composedMembers, setOptions)) {\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function onChartAfterGetContainer() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, axes = chart.axes, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                axes.forEach((axis) => {\n                    axis.updateNames();\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            let extremes, legend, alignTo, verticalAlign;\n            const rangeSelector = chart.rangeSelector, redraw = () => {\n                if (rangeSelector) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    legend = chart.legend;\n                    verticalAlign = (rangeSelector &&\n                        rangeSelector.options.verticalAlign);\n                    if (isNumber(extremes.min)) {\n                        rangeSelector.render(extremes.min, extremes.max);\n                    }\n                    // Re-align the legend so that it's below the rangeselector\n                    if (legend.display &&\n                        verticalAlign === 'top' &&\n                        verticalAlign === legend.options.verticalAlign) {\n                        // Create a new alignment box for the legend.\n                        alignTo = merge(chart.spacingBox);\n                        if (legend.options.layout === 'vertical') {\n                            alignTo.y = chart.plotTop;\n                        }\n                        else {\n                            alignTo.y += rangeSelector.getHeight();\n                        }\n                        legend.group.placed = false; // Don't animate the alignment.\n                        legend.align(alignTo);\n                    }\n                }\n            };\n            if (rangeSelector) {\n                const events = find(chartDestroyEvents, (e) => e[0] === chart);\n                if (!events) {\n                    chartDestroyEvents.push([chart, [\n                            // redraw the scroller on setExtremes\n                            addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                if (rangeSelector) {\n                                    rangeSelector.render(e.min, e.max);\n                                }\n                            }),\n                            // redraw the scroller chart resize\n                            addEvent(chart, 'redraw', redraw)\n                        ]]);\n                }\n                // do it now\n                redraw();\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector && !rangeSelector.options.floating) {\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.extraBottomMargin = true;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.extraTopMargin = true;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                onChartCallback(this);\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.buttons = void 0;\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.options = void 0;\n                this.chart = chart;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, minSetting, rangeSetting, ctx, ytdExtremes, addOffsetMin = true;\n                // chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                // Set the fixed range before range is altered\n                chart.fixedRange = range;\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instanciated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (this.max - this.min !==\n                                chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttons = rangeSelector.buttons;\n                let selectedExists = isNumber(selected);\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, button = buttons[i], offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed in\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    let state = 0, \n                    // Do not select the YTD button if not explicitly told so\n                    isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isAllButAlreadyShowingAll = false, isSameRange = range === actualRange;\n                    // Months and years have a variable range so we check the extremes\n                    if ((type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    const select = ((isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                    }\n                });\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // these time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax;\n                    let value = rangeSelector.getInputValue(name);\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyound the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and and records\n                // click events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // update extermes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // set offset only for varticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputsZIndex = pick(chartOptions.chart.style &&\n                    chartOptions.chart.style.zIndex, 0) + 1, inputEnabled = options.inputEnabled, rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        const minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        const maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    width: '1px',\n                    height: '1px',\n                    padding: 0,\n                    border: 0,\n                    top: '-9999em',\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(([from, to]) => {\n                    addEvent(dropdown, from, () => {\n                        const button = buttons[this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup, buttons } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // getBBox for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons(xOffsetForExportButton) {\n                const { buttons, buttonOptions, chart, dropdown, options, zoomText } = this;\n                const userButtonTheme = (chart.userOptions.rangeSelector &&\n                    chart.userOptions.rangeSelector.buttonTheme) || {};\n                const getAttribs = (text) => ({\n                    text: text ? `${text} ▾` : '▾',\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme.padding, 8)\n                });\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                let hasActiveButton = false;\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                const { align } = options.buttonPosition;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, buttonOptions, options, zoomText } = this;\n                this.hideDropdown();\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            }\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            currentButtonIndex() {\n                const { dropdown } = this;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, buttons, chart, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, correctFloat, css, defined, error, pick, timeUnits } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* eslint-disable valid-jsdoc */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    const axisProto = AxisClass.prototype;\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                }\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    addEvent(ChartClass, 'pan', onChartPan);\n                }\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense consentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions = [], closestDistance = 0, findHigherRanks) {\n                const higherRanks = {}, tickPixelIntervalOption = this.options.tickPixelInterval, time = this.chart.time, \n                // Record all the start positions of a segment, to use when\n                // deciding what's a gap in the data.\n                segmentStarts = [];\n                let end, segmentPositions, hasCrossedHigherRank, info, outsideMax, start = 0, groupPositions = [], lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                const posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    const length = groupPositions.length, translatedArr = [], distances = [];\n                    let itemToRemove, translated, lastTranslated, medianDistance, distance, i = length;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort();\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length - 1] > max ? length - 1 : length; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                const axis = this, ordinal = axis.ordinal, \n                // Context could be changed to extendedOrdinalPositions.\n                ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                let i = ordinalPositions.length - 1, distance;\n                if (index < 0) { // out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // split it up\n                    i = Math.floor(index);\n                    distance = index - i; // the decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                const axis = this, ordinal = axis.ordinal, localMin = axis.old ? axis.old.min : axis.min, localA = axis.old ? axis.old.transA : axis.transA;\n                let positions = ordinal.positions; // for the current visible range\n                // The visible range contains only equally spaced values.\n                if (!positions) {\n                    return val;\n                }\n                // Convert back from modivied value to pixels. // #15970\n                const pixelVal = correctFloat((val - localMin) * localA +\n                    axis.minPixelPadding), isInside = val >= positions[0] &&\n                    val <= positions[positions.length - 1];\n                // If the value is not inside the plot area, use the extended positions.\n                // (array contains also points that are outside of the plotArea).\n                if (!isInside) {\n                    positions = ordinal.getExtendedPositions();\n                }\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    const indexOf = positions.indexOf(val);\n                    const index = indexOf !== -1 ? indexOf : correctFloat(ordinal.getIndexOfPoint(pixelVal, positions)), mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index <= positions.length - 1) {\n                        const leftNeighbour = positions[Math.floor(index)], rightNeighbour = positions[Math.ceil(index)], distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                    // If the value is outside positions array, return initial value\n                    return val; // #16784\n                }\n                return val;\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                const index = OrdinalAxis.Additions.findIndexOf(ordinalPositions, val, true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                const percent = (val - ordinalPositions[index]) /\n                    (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                const axis = this;\n                if (axis.isXAxis &&\n                    defined(axis.options.overscroll) &&\n                    axis.max === axis.dataMax &&\n                    (\n                    // Panning is an execption. We don't want to apply\n                    // overscroll when panning over the dataMax\n                    !axis.chart.mouseIsDown ||\n                        axis.isInternal) && (\n                // Scrollbar buttons are the other execption:\n                !axis.eventArgs ||\n                    axis.eventArgs && axis.eventArgs.trigger !== 'navigator')) {\n                    axis.max += axis.options.overscroll;\n                    // Live data and buttons require translation for the min:\n                    if (!axis.isInternal && defined(axis.userMin)) {\n                        axis.min += axis.options.overscroll;\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                const axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                const axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                const chart = this, xAxis = chart.xAxis[0], overscroll = xAxis.options.overscroll, chartX = e.originalEvent.chartX, panning = chart.options.chart.panning;\n                let runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length) {\n                    const mouseDownX = chart.mouseDownX, extremes = xAxis.getExtremes(), dataMax = extremes.dataMax, min = extremes.min, max = extremes.max, hoverPoints = chart.hoverPoints, closestPointRange = (xAxis.closestPointRange ||\n                        (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)), pointPixelWidth = (xAxis.translationSlope *\n                        (xAxis.ordinal.slope || closestPointRange)), \n                    // how many ordinal units did we move?\n                    movedUnits = Math.round((mouseDownX - chartX) / pointPixelWidth), \n                    // get index of all the chart's points\n                    extendedOrdinalPositions = xAxis.ordinal.getExtendedPositions(), extendedAxis = {\n                        ordinal: {\n                            positions: extendedOrdinalPositions,\n                            extendedOrdinalPositions: extendedOrdinalPositions\n                        }\n                    }, index2val = xAxis.index2val, val2lin = xAxis.val2lin;\n                    let trimmedRange, ordinalPositions, searchAxisLeft, searchAxisRight;\n                    // we have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        if (movedUnits < 0) {\n                            searchAxisLeft = extendedAxis;\n                            searchAxisRight = xAxis.ordinal.positions ?\n                                xAxis : extendedAxis;\n                        }\n                        else {\n                            searchAxisLeft = xAxis.ordinal.positions ?\n                                xAxis : extendedAxis;\n                            searchAxisRight = extendedAxis;\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = searchAxisRight.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.fixedRange = max - min;\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val.apply(searchAxisLeft, [\n                            val2lin.apply(searchAxisLeft, [min, true]) +\n                                movedUnits\n                        ]), index2val.apply(searchAxisRight, [\n                            val2lin.apply(searchAxisRight, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) +\n                                overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                const xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                const axis = this, ordinal = axis.ordinal, ordinalPositions = ordinal.positions;\n                let slope = ordinal.slope, extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                const ordinalLength = ordinalPositions.length;\n                let ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // final return value is based on ordinalIndex\n                }\n                else {\n                    extendedOrdinalPositions =\n                        ordinal.getExtendedPositions &&\n                            ordinal.getExtendedPositions();\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    const length = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length;\n                    }\n                    // OriginalPointReference is equal to the index of\n                    // first point of ordinalPositions in extendedOrdinalPositions.\n                    const originalPositionsReference = getIndexInArray(extendedOrdinalPositions, ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        if (!toIndex) {\n                            // If the value is outside positions array,\n                            // return initial value, #16784\n                            return val;\n                        }\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculete\n                        // the approximate position of the point, which is outside\n                        // the extededOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            const diff = extendedOrdinalPositions[0] - val, approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            const diff = val -\n                                extendedOrdinalPositions[length - 1], approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(axis) {\n                    this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                beforeSetTickPositions() {\n                    const axis = this.axis, ordinal = axis.ordinal, extremes = axis.getExtremes(), min = extremes.min, max = extremes.max, hasBreaks = axis.brokenAxis?.hasBreaks, isOrdinal = axis.options.ordinal;\n                    let len, uniqueOrdinalPositions, dist, minIndex, maxIndex, slope, i, ordinalPositions = [], overscrollPointsRange = Number.MAX_VALUE, useOrdinal = false, adjustOrdinalExtremesPoints = false, isBoosted = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        let distanceBetweenPoint = 0;\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            // For an axis with multiple series, check if the distance\n                            // between points is identical throughout all series.\n                            if (i > 0 &&\n                                series.options.id !== 'highcharts-navigator-series' &&\n                                series.processedXData.length > 1) {\n                                adjustOrdinalExtremesPoints =\n                                    distanceBetweenPoint !== series.processedXData[1] -\n                                        series.processedXData[0];\n                            }\n                            distanceBetweenPoint =\n                                series.processedXData[1] - series.processedXData[0];\n                            if (series.boosted) {\n                                isBoosted = series.boosted;\n                            }\n                            if (series.reserveSpace() &&\n                                (series\n                                    .takeOrdinalPosition !== false || hasBreaks)) {\n                                // concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        // If the distance between points is not identical throughout\n                        // all series, remove the first and last ordinal position to\n                        // avoid enabling ordinal logic when it is not needed, #17405.\n                        // Only for boosted series because changes are negligible.\n                        if (adjustOrdinalExtremesPoints && isBoosted) {\n                            ordinalPositions.pop();\n                            ordinalPositions.shift();\n                        }\n                        // cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.options.overscroll;\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions.\n                            ordinal.slope = slope =\n                                (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // reset for next run\n                }\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                static findIndexOf(sortedArray, key, indirectSearch) {\n                    let start = 0, end = sortedArray.length - 1, middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                }\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                getExtendedPositions() {\n                    const ordinal = this, axis = ordinal.axis, axisProto = axis.constructor.prototype, chart = axis.chart, grouping = axis.series[0].currentDataGrouping, key = grouping ?\n                        grouping.count + grouping.unitName :\n                        'raw', overscroll = axis.options.overscroll, extremes = axis.getExtremes();\n                    let fakeAxis, fakeSeries = void 0, ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            applyGrouping: axisProto.applyGrouping,\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin,\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                groupPixelWidth: series.groupPixelWidth,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping,\n                                reserveSpace: Series.prototype.reserveSpace,\n                                visible: series.visible\n                            };\n                            fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: 'firstPoint',\n                                    anchor: 'middle',\n                                    lastAnchor: 'lastPoint',\n                                    enabled: true,\n                                    forced: true,\n                                    // doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        fakeAxis.applyGrouping({ hasExtremesChanged: true });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries.closestPointRange !==\n                            fakeSeries.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                }\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                getGroupIntervalFactor(xMin, xMax, series) {\n                    const ordinal = this, axis = ordinal.axis, processedXData = series.processedXData, len = processedXData.length, distances = [];\n                    let median, i, groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                }\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinallArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                getIndexOfPoint(val, ordinalArray) {\n                    const ordinal = this, axis = ordinal.axis, firstPointVal = ordinal.positions ? ordinal.positions[0] : 0;\n                    // Check whether the series has at least one point inside the chart\n                    const hasPointsInside = function (series) {\n                        const { min, max } = axis;\n                        if (defined(min) && defined(max)) {\n                            return series.points.some((point) => point.x >= min && point.x <= max);\n                        }\n                        return false;\n                    };\n                    let firstPointX;\n                    // When more series assign to axis, find the smallest one, #15987.\n                    axis.series.forEach((series) => {\n                        const firstPoint = series.points?.[0];\n                        if (defined(firstPoint?.plotX) &&\n                            (firstPoint.plotX < firstPointX ||\n                                !defined(firstPointX)) &&\n                            hasPointsInside(series)) {\n                            firstPointX = firstPoint.plotX;\n                        }\n                    });\n                    // If undefined, give a default value\n                    firstPointX ?? (firstPointX = axis.minPixelPadding);\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    const ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                        axis.closestPointRange ||\n                        ordinal.overscrollPointsRange), \n                    // toValue for the first point.\n                    shiftIndex = correctFloat((val - firstPointX) / ordinalPointPixelInterval);\n                    return Additions.findIndexOf(ordinalArray, firstPointVal, true) + shiftIndex;\n                }\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                getOverscrollPositions() {\n                    const ordinal = this, axis = ordinal.axis, extraRange = axis.options.overscroll, distance = ordinal.overscrollPointsRange, positions = [];\n                    let max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                }\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                postProcessTickInterval(tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    const ordinal = this, axis = ordinal.axis, ordinalSlope = ordinal.slope;\n                    let ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                }\n            }\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class HLCPoint extends ColumnPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.close = void 0;\n                this.high = void 0;\n                this.low = void 0;\n                this.options = void 0;\n                this.plotClose = void 0;\n                this.series = void 0;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCPoint;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An HLC chart is a style of financial chart used to describe price\n         * movements over time. It displays high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/hlc/\n         *         HLC chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, crisp, stacking,\n         *               stack\n         * @product      highstock\n         * @optionparent plotOptions.hlc\n         */\n        const HLCSeriesDefaults = {\n            /**\n             * The approximate pixel width of each group. If for example a series\n             * with 30 points is displayed over a 600 pixel wide plot area, no\n             * grouping is performed. If however the series contains so many points\n             * that the spacing is less than the groupPixelWidth, Highcharts will\n             * try to group it into appropriate groups so that each is more or less\n             * two pixels wide. Defaults to `5`.\n             *\n             * @type      {number}\n             * @default   5\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.groupPixelWidth\n             */\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   hlc\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.approximation\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            /**\n             * The pixel width of the line/border. Defaults to `1`.\n             *\n             * @sample {highstock} stock/plotoptions/hlc-linewidth/\n             *         A greater line width\n             *\n             * @type    {number}\n             * @default 1\n             * @product highstock\n             *\n             * @public\n             */\n            lineWidth: 1,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line representing the HLC point.\n                     *\n                     * @type    {number}\n                     * @default 3\n                     * @product highstock\n                     */\n                    lineWidth: 3\n                }\n            },\n            /**\n             * Determines which one of  `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @sample {highstock} stock/plotoptions/hlc-pointvalkey/\n             *         Possible values\n             *\n             * @declare    Highcharts.OptionsHLCPointValKeyValue\n             * @type       {string}\n             * @default    close\n             * @validvalue [\"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.hlc.pointValKey\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `hlc` series. If the [type](#series.hlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.hlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.hlc\n         */\n        /**\n         * An array of data points for the series. For the `hlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 or 3 values. In this case, the values correspond\n         *    to `x,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length of 3\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 5, 6, 7],\n         *        [1, 4, 8, 2],\n         *        [2, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.hlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number>|Array<(number|string),number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.hlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.hlc.data.close\n         */\n        (''); // keeps doclets above in JS file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeries.js', [_modules['Series/HLC/HLCPoint.js'], _modules['Series/HLC/HLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (HLCPoint, HLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The hlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.hlc\n         *\n         * @augments Highcharts.Series\n         */\n        class HLCSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                this.yData = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the path if close is not between high and low.\n             *\n             * @param {SVGPath} path the path array of the point\n             * @param {number} halfStrokeWidth\n             * @param {number} value value of the point to which the stem should be extended\n             */\n            extendStem(path, halfStrokeWidth, value) {\n                const start = path[0];\n                const end = path[1];\n                // We don't need to worry about crisp - close value\n                // is already crisped and halfStrokeWidth should remove it.\n                if (typeof start[2] === 'number') {\n                    start[2] = Math.max(value + halfStrokeWidth, start[2]);\n                }\n                if (typeof end[2] === 'number') {\n                    end[2] = Math.min(value - halfStrokeWidth, end[2]);\n                }\n            }\n            /**\n             * Function to create SVGPath of the point based on the\n             * plot positions of this point.\n             * @private\n             */\n            getPointPath(point, graphic) {\n                // crisp vector coordinates\n                const strokeWidth = graphic.strokeWidth(), series = point.series, crispCorr = (strokeWidth % 2) / 2, \n                // #2596:\n                crispX = Math.round(point.plotX) - crispCorr, halfWidth = Math.round(point.shapeArgs.width / 2);\n                let plotClose = point.plotClose;\n                // the vertical stem\n                const path = [\n                    ['M', crispX, Math.round(point.yBottom)],\n                    ['L', crispX, Math.round(point.plotHigh)]\n                ];\n                // close\n                if (point.close !== null) {\n                    plotClose = Math.round(point.plotClose) + crispCorr;\n                    path.push(['M', crispX, plotClose], ['L', crispX + halfWidth, plotClose]);\n                    series.extendStem(path, strokeWidth / 2, plotClose);\n                }\n                return path;\n            }\n            /**\n             * Draw single point\n             * @private\n             */\n            drawSinglePoint(point) {\n                const series = point.series, chart = series.chart;\n                let path, graphic = point.graphic;\n                if (typeof point.plotY !== 'undefined') {\n                    // Create and/or update the graphic\n                    if (!graphic) {\n                        point.graphic = graphic = chart.renderer.path()\n                            .add(series.group);\n                    }\n                    if (!chart.styledMode) {\n                        graphic.attr(series.pointAttribs(point, (point.selected && 'select'))); // #3897\n                    }\n                    // crisp vector coordinates\n                    path = series.getPointPath(point, graphic);\n                    graphic[!graphic ? 'attr' : 'animate']({ d: path })\n                        .addClass(point.getClassName(), true);\n                }\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                this.points.forEach(this.drawSinglePoint);\n            }\n            /**\n             * @private\n             * @function Highcharts.seriesTypes.hlc#init\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #8817\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state);\n                delete attribs.fill;\n                return attribs;\n            }\n            toYData(point) {\n                // return a plain array for speedy calculation\n                return [point.high, point.low, point.close];\n            }\n            /**\n             * Translate data points from raw values x and y to plotX and plotY\n             *\n             * @private\n             * @function Highcharts.seriesTypes.hlc#translate\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, names = (this.pointArrayMap && this.pointArrayMap.slice()) || [], translated = names.map((name) => `plot${name.charAt(0).toUpperCase() + name.slice(1)}`);\n                translated.push('yBottom');\n                names.push('low');\n                super.translate.apply(series);\n                // Do the translation\n                series.points.forEach(function (point) {\n                    names.forEach(function (name, i) {\n                        let value = point[name];\n                        if (value !== null) {\n                            if (series.dataModify) {\n                                value = series.dataModify.modifyValue(value);\n                            }\n                            point[translated[i]] =\n                                yAxis.toPixels(value, true);\n                        }\n                    });\n                    // Align the tooltip to the high value to avoid covering the\n                    // point\n                    point.tooltipPos[1] =\n                        point.plotHigh + yAxis.pos - series.chart.plotTop;\n                });\n            }\n        }\n        HLCSeries.defaultOptions = merge(ColumnSeries.defaultOptions, HLCSeriesDefaults);\n        extend(HLCSeries.prototype, {\n            pointClass: HLCPoint,\n            animate: null,\n            directTouch: false,\n            pointArrayMap: ['high', 'low', 'close'],\n            pointAttrToOptions: {\n                stroke: 'color',\n                'stroke-width': 'lineWidth'\n            },\n            pointValKey: 'close'\n        });\n        SeriesRegistry.registerSeriesType('hlc', HLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeries;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { hlc: HLCSeries } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class OHLCPoint extends HLCSeries.prototype.pointClass {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.open = void 0;\n                this.options = void 0;\n                this.plotOpen = void 0;\n                this.series = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the parent method by adding up or down to the class name.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getClassName\n             */\n            getClassName() {\n                return super.getClassName.call(this) +\n                    (this.open < this.close ?\n                        ' highcharts-point-up' :\n                        ' highcharts-point-down');\n            }\n            /**\n             * Save upColor as point color (#14826).\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveUpColor\n             */\n            resolveUpColor() {\n                if (this.open < this.close &&\n                    !this.options.color &&\n                    this.series.options.upColor) {\n                    this.color = this.series.options.upColor;\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveColor\n             */\n            resolveColor() {\n                super.resolveColor();\n                this.resolveUpColor();\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getZone\n             *\n             * @return {Highcharts.SeriesZonesOptionsObject}\n             *         The zone item.\n             */\n            getZone() {\n                const zone = super.getZone();\n                this.resolveUpColor();\n                return zone;\n            }\n            /**\n             * Extend the parent method by resolving up/down colors (#15849)\n             * @private\n             **/\n            applyOptions() {\n                super.applyOptions.apply(this, arguments);\n                if (this.resolveColor) {\n                    this.resolveColor();\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCPoint;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An OHLC chart is a style of financial chart used to describe price\n         * movements over time. It displays open, high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/ohlc\n         *         OHLC chart\n         *\n         * @extends      plotOptions.hlc\n         * @product      highstock\n         * @optionparent plotOptions.ohlc\n         */\n        const OHLCSeriesDefaults = {\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   ohlc\n             * @product   highstock\n             * @apioption plotOptions.ohlc.dataGrouping.approximation\n             */\n            /**\n             * Determines which one of  `open`, `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @declare    Highcharts.OptionsPointValKeyValue\n             * @default    close\n             * @validvalue [\"open\", \"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.ohlc.pointValKey\n             */\n            /**\n             * Line color for up points.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highstock\n             * @apioption plotOptions.ohlc.upColor\n             */\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'Open: {point.open}<br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            }\n        };\n        /**\n         * The parameter allows setting line series type and use OHLC indicators.\n         * Data in OHLC format is required.\n         *\n         * @sample {highstock} stock/indicators/use-ohlc-data\n         *         Use OHLC data format to plot line chart\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @apioption plotOptions.line.useOhlcData\n         */\n        /**\n         * A `ohlc` series. If the [type](#series.ohlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ohlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.ohlc\n         */\n        /**\n         * An array of data points for the series. For the `ohlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 6, 5, 6, 7],\n         *        [1, 9, 4, 8, 2],\n         *        [2, 6, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.ohlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 3,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 4,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.ohlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.close\n         */\n        /**\n         * The opening value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.open\n         */\n        ''; // adds doclets above to transpilat\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeries.js', [_modules['Series/OHLC/OHLCPoint.js'], _modules['Series/OHLC/OHLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (OHLCPoint, OHLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { hlc: HLCSeries } } = SeriesRegistry;\n        const { addEvent, extend, merge } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onSeriesAfterSetOptions(e) {\n            const options = e.options, dataGrouping = options.dataGrouping;\n            if (dataGrouping &&\n                options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                dataGrouping.approximation = 'ohlc';\n            }\n        }\n        /**\n         * Add useOhlcData option\n         * @private\n         */\n        function onSeriesInit(eventOptions) {\n            // eslint-disable-next-line no-invalid-this\n            const series = this, options = eventOptions.options;\n            if (options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                extend(series, {\n                    pointValKey: OHLCSeries.prototype.pointValKey,\n                    // keys: ohlcProto.keys, // @todo potentially nonsense\n                    pointArrayMap: OHLCSeries.prototype.pointArrayMap,\n                    toYData: OHLCSeries.prototype.toYData\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ohlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ohlc\n         *\n         * @augments Highcharts.Series\n         */\n        class OHLCSeries extends HLCSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(SeriesClass, ..._args) {\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    addEvent(SeriesClass, 'afterSetOptions', onSeriesAfterSetOptions);\n                    addEvent(SeriesClass, 'init', onSeriesInit);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getPointPath(point, graphic) {\n                const path = super.getPointPath(point, graphic), strokeWidth = graphic.strokeWidth(), crispCorr = (strokeWidth % 2) / 2, crispX = Math.round(point.plotX) - crispCorr, halfWidth = Math.round(point.shapeArgs.width / 2);\n                let plotOpen = point.plotOpen;\n                // crisp vector coordinates\n                if (point.open !== null) {\n                    plotOpen = Math.round(point.plotOpen) + crispCorr;\n                    path.push(['M', crispX, plotOpen], ['L', crispX - halfWidth, plotOpen]);\n                    super.extendStem(path, strokeWidth / 2, plotOpen);\n                }\n                return path;\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state), options = this.options;\n                delete attribs.fill;\n                if (!point.options.color &&\n                    options.upColor &&\n                    point.open < point.close) {\n                    attribs.stroke = options.upColor;\n                }\n                return attribs;\n            }\n            toYData(point) {\n                // return a plain array for speedy calculation\n                return [point.open, point.high, point.low, point.close];\n            }\n        }\n        OHLCSeries.defaultOptions = merge(HLCSeries.defaultOptions, OHLCSeriesDefaults);\n        extend(OHLCSeries.prototype, {\n            pointClass: OHLCPoint,\n            pointArrayMap: ['open', 'high', 'low', 'close']\n        });\n        SeriesRegistry.registerSeriesType('ohlc', OHLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeries;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeriesDefaults.js', [_modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (D, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A candlestick chart is a style of financial chart used to describe\n         * price movements over time.\n         *\n         * @sample stock/demo/candlestick/\n         *         Candlestick chart\n         *\n         * @extends      plotOptions.ohlc\n         * @excluding    borderColor,borderRadius,borderWidth\n         * @product      highstock\n         * @optionparent plotOptions.candlestick\n         */\n        const CandlestickSeriesDefaults = {\n            /**\n             * The specific line color for up candle sticks. The default is to\n             * inherit the general `lineColor` setting.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     1.3.6\n             * @product   highstock\n             * @apioption plotOptions.candlestick.upLineColor\n             */\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line/border around the\n                     * candlestick.\n                     *\n                     * @product highstock\n                     */\n                    lineWidth: 2\n                }\n            },\n            /**\n             * @type    {number|null}\n             * @product highstock\n             */\n            threshold: null,\n            /**\n             * The color of the line/border of the candlestick.\n             *\n             * In styled mode, the line stroke can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @see [upLineColor](#plotOptions.candlestick.upLineColor)\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @product highstock\n             */\n            lineColor: \"#000000\" /* Palette.neutralColor100 */,\n            /**\n             * The pixel width of the candlestick line/border. Defaults to `1`.\n             *\n             *\n             * In styled mode, the line stroke width can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            /**\n             * The fill color of the candlestick when values are rising.\n             *\n             * In styled mode, the up color can be set with the\n             * `.highcharts-candlestick-series .highcharts-point-up` rule.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-color/\n             *         Custom colors\n             * @sample {highstock} highcharts/css/candlestick/\n             *         Colors in styled mode\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @product highstock\n            */\n            upColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * @product highstock\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `candlestick` series. If the [type](#series.candlestick.type)\n         * option is not specified, it is inherited from [chart.type](\n         * #chart.type).\n         *\n         * @type      {*}\n         * @extends   series,plotOptions.candlestick\n         * @excluding dataParser, dataURL, marker\n         * @product   highstock\n         * @apioption series.candlestick\n         */\n        /**\n         * An array of data points for the series. For the `candlestick` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 7, 2, 0, 4],\n         *        [1, 1, 4, 2, 8],\n         *        [2, 3, 3, 9, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.candlestick.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 9,\n         *        high: 2,\n         *        low: 4,\n         *        close: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 1,\n         *        high: 4,\n         *        low: 7,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.ohlc.data\n         * @excluding y\n         * @product   highstock\n         * @apioption series.candlestick.data\n         */\n        ''; // adds doclets above to transpilat\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeries.js', [_modules['Series/Candlestick/CandlestickSeriesDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (CandlestickSeriesDefaults, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { column: ColumnSeries, ohlc: OHLCSeries } = SeriesRegistry.seriesTypes;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The candlestick series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.candlestick\n         *\n         * @augments Highcharts.seriesTypes.ohlc\n         */\n        class CandlestickSeries extends OHLCSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#pointAttribs\n             */\n            pointAttribs(point, state) {\n                const attribs = ColumnSeries.prototype.pointAttribs.call(this, point, state), options = this.options, isUp = point.open < point.close, stroke = options.lineColor || this.color, color = point.color || this.color; // (#14826)\n                attribs['stroke-width'] = options.lineWidth;\n                attribs.fill = point.options.color ||\n                    (isUp ? (options.upColor || color) : color);\n                attribs.stroke = point.options.lineColor ||\n                    (isUp ? (options.upLineColor || stroke) : stroke);\n                // Select or hover states\n                if (state) {\n                    const stateOptions = options.states[state];\n                    attribs.fill = stateOptions.color || attribs.fill;\n                    attribs.stroke = stateOptions.lineColor || attribs.stroke;\n                    attribs['stroke-width'] =\n                        stateOptions.lineWidth || attribs['stroke-width'];\n                }\n                return attribs;\n            }\n            /**\n             * Draw the data points.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#drawPoints\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, reversedYAxis = series.yAxis.reversed;\n                for (const point of points) {\n                    let graphic = point.graphic, plotOpen, plotClose, topBox, bottomBox, hasTopWhisker, hasBottomWhisker, crispCorr, crispX, path, halfWidth;\n                    const isNew = !graphic;\n                    if (typeof point.plotY !== 'undefined') {\n                        if (!graphic) {\n                            point.graphic = graphic = chart.renderer.path()\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point, (point.selected && 'select'))) // #3897\n                                .shadow(series.options.shadow);\n                        }\n                        // Crisp vector coordinates\n                        crispCorr = (graphic.strokeWidth() % 2) / 2;\n                        // #2596:\n                        crispX = Math.round(point.plotX) - crispCorr;\n                        plotOpen = point.plotOpen;\n                        plotClose = point.plotClose;\n                        topBox = Math.min(plotOpen, plotClose);\n                        bottomBox = Math.max(plotOpen, plotClose);\n                        halfWidth = Math.round(point.shapeArgs.width / 2);\n                        hasTopWhisker = reversedYAxis ?\n                            bottomBox !== point.yBottom :\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh);\n                        hasBottomWhisker = reversedYAxis ?\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh) :\n                            bottomBox !== point.yBottom;\n                        topBox = Math.round(topBox) + crispCorr;\n                        bottomBox = Math.round(bottomBox) + crispCorr;\n                        // Create the path. Due to a bug in Chrome 49, the path is\n                        // first instanciated with no values, then the values\n                        // pushed. For unknown reasons, instanciating the path array\n                        // with all the values would lead to a crash when updating\n                        // frequently (#5193).\n                        path = [];\n                        path.push(['M', crispX - halfWidth, bottomBox], ['L', crispX - halfWidth, topBox], ['L', crispX + halfWidth, topBox], ['L', crispX + halfWidth, bottomBox], ['Z'], // Ensure a nice rectangle #2602\n                        ['M', crispX, topBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasTopWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.yBottom :\n                                    point.plotHigh) :\n                                topBox\n                        ], ['M', crispX, bottomBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasBottomWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.plotHigh :\n                                    point.yBottom) :\n                                bottomBox\n                        ]);\n                        graphic[isNew ? 'attr' : 'animate']({ d: path })\n                            .addClass(point.getClassName(), true);\n                    }\n                }\n            }\n        }\n        CandlestickSeries.defaultOptions = merge(OHLCSeries.defaultOptions, defaultOptions.plotOptions, { tooltip: OHLCSeries.defaultOptions.tooltip }, CandlestickSeriesDefaults);\n        SeriesRegistry.registerSeriesType('candlestick', CandlestickSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeries;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class FlagsPoint extends ColumnPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n                this.ttBelow = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            isValid() {\n                // #9233 - Prevent from treating flags as null points (even if\n                // they have no y values defined).\n                return isNumber(this.y) || typeof this.y === 'undefined';\n            }\n            /**\n             * @private\n             */\n            hasNewShapeType() {\n                const shape = this.options.shape || this.series.options.shape;\n                return this.graphic && shape && shape !== this.graphic.symbolKey;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsPoint;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Flags are used to mark events in stock charts. They can be added on the\n         * timeline, or attached to a specific series.\n         *\n         * @sample stock/demo/flags-general/\n         *         Flags on a line series\n         *\n         * @extends      plotOptions.column\n         * @excluding    animation, borderColor, borderRadius, borderWidth,\n         *               colorByPoint, cropThreshold, dataGrouping, pointPadding,\n         *               pointWidth, turboThreshold\n         * @product      highstock\n         * @optionparent plotOptions.flags\n         */\n        const FlagsSeriesDefaults = {\n            /**\n             * In case the flag is placed on a series, on what point key to place\n             * it. Line and columns have one key, `y`. In range or OHLC-type series,\n             * however, the flag can optionally be placed on the `open`, `high`,\n             * `low` or `close` key.\n             *\n             * @sample {highstock} stock/plotoptions/flags-onkey/\n             *         Range series, flag on high\n             *\n             * @type       {string}\n             * @default    y\n             * @since      4.2.2\n             * @product    highstock\n             * @validvalue [\"y\", \"open\", \"high\", \"low\", \"close\"]\n             * @apioption  plotOptions.flags.onKey\n             */\n            /**\n             * The id of the series that the flags should be drawn on. If no id\n             * is given, the flags are drawn on the x axis.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Flags on series and on x axis\n             *\n             * @type      {string}\n             * @product   highstock\n             * @apioption plotOptions.flags.onSeries\n             */\n            pointRange: 0,\n            /**\n             * Whether the flags are allowed to overlap sideways. If `false`, the\n             * flags are moved sideways using an algorithm that seeks to place every\n             * flag as close as possible to its original position.\n             *\n             * @sample {highstock} stock/plotoptions/flags-allowoverlapx\n             *         Allow sideways overlap\n             *\n             * @since 6.0.4\n             */\n            allowOverlapX: false,\n            /**\n             * The shape of the marker. Can be one of \"flag\", \"circlepin\",\n             * \"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\n             * Individual shapes can also be set for each point.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Different shapes\n             *\n             * @type    {Highcharts.FlagsShapeValue}\n             * @product highstock\n             */\n            shape: 'flag',\n            /**\n             * When multiple flags in the same series fall on the same value, this\n             * number determines the vertical offset between them.\n             *\n             * @sample {highstock} stock/plotoptions/flags-stackdistance/\n             *         A greater stack distance\n             *\n             * @product highstock\n             */\n            stackDistance: 12,\n            /**\n             * Text alignment for the text inside the flag.\n             *\n             * @since      5.0.0\n             * @product    highstock\n             * @validvalue [\"left\", \"center\", \"right\"]\n             */\n            textAlign: 'center',\n            /**\n             * Specific tooltip options for flag series. Flag series tooltips are\n             * different from most other types in that a flag doesn't have a data\n             * value, so the tooltip rather displays the `text` option for each\n             * point.\n             *\n             * @extends   plotOptions.series.tooltip\n             * @excluding changeDecimals, valueDecimals, valuePrefix, valueSuffix\n             * @product   highstock\n             */\n            tooltip: {\n                pointFormat: '{point.text}'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            /**\n             * The text to display on each flag. This can be defined on series\n             * level, or individually for each point. Defaults to `\"A\"`.\n             *\n             * @type      {string}\n             * @default   A\n             * @product   highstock\n             * @apioption plotOptions.flags.title\n             */\n            /**\n             * The y position of the top left corner of the flag relative to either\n             * the series (if onSeries is defined), or the x axis. Defaults to\n             * `-30`.\n             *\n             * @product highstock\n             */\n            y: -30,\n            /**\n             * Whether to use HTML to render the flag texts. Using HTML allows for\n             * advanced formatting, images and reliable bi-directional text\n             * rendering. Note that exported images won't respect the HTML, and that\n             * HTML won't respect Z-index settings.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     1.3\n             * @product   highstock\n             * @apioption plotOptions.flags.useHTML\n             */\n            /**\n             * Fixed width of the flag's shape. By default, width is autocalculated\n             * according to the flag's title.\n             *\n             * @sample {highstock} stock/demo/flags-shapes/\n             *         Flags with fixed width\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.width\n             */\n            /**\n             * Fixed height of the flag's shape. By default, height is\n             * autocalculated according to the flag's title.\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.height\n             */\n            /**\n             * The fill color for the flags.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product highstock\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The color of the line/border of the flag.\n             *\n             * In styled mode, the stroke is set in the\n             * `.highcharts-flag-series.highcharts-point` rule.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   #000000\n             * @product   highstock\n             * @apioption plotOptions.flags.lineColor\n             */\n            /**\n             * The pixel width of the flag's line/border.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The color of the line/border of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    lineColor: \"#000000\" /* Palette.neutralColor100 */,\n                    /**\n                     * The fill or background color of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    fillColor: \"#ccd3ff\" /* Palette.highlightColor20 */\n                }\n            },\n            /**\n             * The text styles of the flag.\n             *\n             * In styled mode, the styles are set in the\n             * `.highcharts-flag-series .highcharts-point` rule.\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}\n             * @product highstock\n             */\n            style: {\n                /** @ignore-option */\n                fontSize: '0.7em',\n                /** @ignore-option */\n                fontWeight: 'bold'\n            }\n        };\n        /**\n         * A `flags` series. If the [type](#series.flags.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flags\n         * @excluding animation, borderColor, borderRadius, borderWidth, colorByPoint,\n         *            connectNulls, cropThreshold, dashStyle, dataGrouping, dataParser,\n         *            dataURL, gapSize, gapUnit, linecap, lineWidth, marker,\n         *            pointPadding, pointWidth, step, turboThreshold, useOhlcData\n         * @product   highstock\n         * @apioption series.flags\n         */\n        /**\n         * An array of data points for the series. For the `flags` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.flags.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        title: \"A\",\n         *        text: \"First event\"\n         *    }, {\n         *        x: 1,\n         *        title: \"B\",\n         *        text: \"Second event\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @excluding dataLabels, marker, name, y\n         * @product   highstock\n         * @apioption series.flags.data\n         */\n        /**\n         * The fill color of an individual flag. By default it inherits from\n         * the series color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highstock\n         * @apioption series.flags.data.fillColor\n         */\n        /**\n         * The longer text to be shown in the flag's tooltip.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.text\n         */\n        /**\n         * The short text to be shown on the flag.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.title\n         */\n        ''; // keeps doclets above in transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSymbols.js', [_modules['Core/Renderer/RendererRegistry.js']], function (RendererRegistry) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var FlagsSymbols;\n        (function (FlagsSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const modifiedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedMembers.indexOf(SVGRendererClass) === -1) {\n                    modifiedMembers.push(SVGRendererClass);\n                    const symbols = SVGRendererClass.prototype.symbols;\n                    symbols.flag = flag;\n                    createPinSymbol(symbols, 'circle');\n                    createPinSymbol(symbols, 'square');\n                }\n                const RendererClass = RendererRegistry.getRendererType();\n                // The symbol callbacks are generated on the SVGRenderer object in all\n                // browsers.\n                if (modifiedMembers.indexOf(RendererClass)) {\n                    modifiedMembers.push(RendererClass);\n                }\n            }\n            FlagsSymbols.compose = compose;\n            /**\n             * Create the flag icon with anchor.\n             * @private\n             */\n            function flag(x, y, w, h, options) {\n                const anchorX = (options && options.anchorX) || x, anchorY = (options && options.anchorY) || y;\n                // To do: unwanted any cast because symbols.circle has wrong type, it\n                // actually returns an SVGPathArray\n                const path = this.circle(anchorX - 1, anchorY - 1, 2, 2);\n                path.push(['M', anchorX, anchorY], ['L', x, y + h], ['L', x, y], ['L', x + w, y], ['L', x + w, y + h], ['L', x, y + h], ['Z']);\n                return path;\n            }\n            /**\n             * Create the circlepin and squarepin icons with anchor.\n             * @private\n             */\n            function createPinSymbol(symbols, shape) {\n                symbols[(shape + 'pin')] = function (x, y, w, h, options) {\n                    const anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n                    let path;\n                    // For single-letter flags, make sure circular flags are not taller\n                    // than their width\n                    if (shape === 'circle' && h > w) {\n                        x -= Math.round((h - w) / 2);\n                        w = h;\n                    }\n                    path = (symbols[shape])(x, y, w, h);\n                    if (anchorX && anchorY) {\n                        /**\n                         * If the label is below the anchor, draw the connecting line\n                         * from the top edge of the label, otherwise start drawing from\n                         * the bottom edge\n                         */\n                        let labelX = anchorX;\n                        if (shape === 'circle') {\n                            labelX = x + w / 2;\n                        }\n                        else {\n                            const startSeg = path[0];\n                            const endSeg = path[1];\n                            if (startSeg[0] === 'M' && endSeg[0] === 'L') {\n                                labelX = (startSeg[1] + endSeg[1]) / 2;\n                            }\n                        }\n                        const labelY = (y > anchorY) ? y : y + h;\n                        path.push([\n                            'M',\n                            labelX,\n                            labelY\n                        ], [\n                            'L',\n                            anchorX,\n                            anchorY\n                        ]);\n                        path = path.concat(symbols.circle(anchorX - 1, anchorY - 1, 2, 2));\n                    }\n                    return path;\n                };\n            }\n        })(FlagsSymbols || (FlagsSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSymbols;\n    });\n    _registerModule(_modules, 'Series/OnSeriesComposition.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (ColumnSeries, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { prototype: columnProto } = ColumnSeries;\n        const { prototype: seriesProto } = Series;\n        const { defined, stableSort } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OnSeriesComposition;\n        (function (OnSeriesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Properties\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.getPlotBox = getPlotBox;\n                    seriesProto.translate = translate;\n                }\n                return SeriesClass;\n            }\n            OnSeriesComposition.compose = compose;\n            /**\n             * Override getPlotBox. If the onSeries option is valid, return the plot box\n             * of the onSeries, otherwise proceed as usual.\n             *\n             * @private\n             */\n            function getPlotBox(name) {\n                return seriesProto.getPlotBox.call((this.options.onSeries &&\n                    this.chart.get(this.options.onSeries)) || this, name);\n            }\n            OnSeriesComposition.getPlotBox = getPlotBox;\n            /**\n             * Extend the translate method by placing the point on the related series\n             *\n             * @private\n             */\n            function translate() {\n                columnProto.translate.apply(this);\n                const series = this, options = series.options, chart = series.chart, points = series.points, optionsOnSeries = options.onSeries, onSeries = (optionsOnSeries &&\n                    chart.get(optionsOnSeries)), step = onSeries && onSeries.options.step, onData = (onSeries && onSeries.points), inverted = chart.inverted, xAxis = series.xAxis, yAxis = series.yAxis;\n                let cursor = points.length - 1, point, lastPoint, onKey = options.onKey || 'y', i = onData && onData.length, xOffset = 0, leftPoint, lastX, rightPoint, currentDataGrouping, distanceRatio;\n                // relate to a master series\n                if (onSeries && onSeries.visible && i) {\n                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;\n                    currentDataGrouping = onSeries.currentDataGrouping;\n                    lastX = (onData[i - 1].x +\n                        (currentDataGrouping ? currentDataGrouping.totalRange : 0)); // #2374\n                    // sort the data points\n                    stableSort(points, (a, b) => (a.x - b.x));\n                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);\n                    while (i-- && points[cursor]) {\n                        leftPoint = onData[i];\n                        point = points[cursor];\n                        point.y = leftPoint.y;\n                        if (leftPoint.x <= point.x &&\n                            typeof leftPoint[onKey] !== 'undefined') {\n                            if (point.x <= lastX) { // #803\n                                point.plotY = leftPoint[onKey];\n                                // interpolate between points, #666\n                                if (leftPoint.x < point.x &&\n                                    !step) {\n                                    rightPoint = onData[i + 1];\n                                    if (rightPoint &&\n                                        typeof rightPoint[onKey] !== 'undefined') {\n                                        // If the series is spline, calculate Y of the\n                                        // point on the bezier line. #19264\n                                        if (defined(point.plotX) &&\n                                            onSeries.is('spline')) {\n                                            leftPoint = leftPoint;\n                                            rightPoint = rightPoint;\n                                            const p0 = [\n                                                leftPoint.plotX || 0,\n                                                leftPoint.plotY || 0\n                                            ], p3 = [\n                                                rightPoint.plotX || 0,\n                                                rightPoint.plotY || 0\n                                            ], p1 = (leftPoint.controlPoints?.high ||\n                                                p0), p2 = (rightPoint.controlPoints?.low ||\n                                                p3), pixelThreshold = 0.25, maxIterations = 100, calculateCoord = (t, key) => (\n                                            // The parametric formula for the\n                                            // cubic Bezier curve.\n                                            Math.pow(1 - t, 3) * p0[key] +\n                                                3 * (1 - t) * (1 - t) * t *\n                                                    p1[key] + 3 * (1 - t) * t * t *\n                                                p2[key] + t * t * t * p3[key]);\n                                            let tMin = 0, tMax = 1, t;\n                                            // Find `t` of the parametric function of\n                                            // the bezier curve for the given `plotX`.\n                                            for (let i = 0; i < maxIterations; i++) {\n                                                const tMid = (tMin + tMax) / 2;\n                                                const xMid = calculateCoord(tMid, 0);\n                                                if (xMid === null) {\n                                                    break;\n                                                }\n                                                if (Math.abs(xMid - point.plotX) < pixelThreshold) {\n                                                    t = tMid;\n                                                    break;\n                                                }\n                                                if (xMid < point.plotX) {\n                                                    tMin = tMid;\n                                                }\n                                                else {\n                                                    tMax = tMid;\n                                                }\n                                            }\n                                            if (defined(t)) {\n                                                point.plotY =\n                                                    calculateCoord(t, 1);\n                                                point.y =\n                                                    yAxis.toValue(point.plotY, true);\n                                            }\n                                        }\n                                        else {\n                                            // the distance ratio, between 0 and 1\n                                            distanceRatio =\n                                                (point.x - leftPoint.x) /\n                                                    (rightPoint.x - leftPoint.x);\n                                            point.plotY +=\n                                                distanceRatio *\n                                                    // the plotY distance\n                                                    (rightPoint[onKey] - leftPoint[onKey]);\n                                            point.y +=\n                                                distanceRatio *\n                                                    (rightPoint.y - leftPoint.y);\n                                        }\n                                    }\n                                }\n                            }\n                            cursor--;\n                            i++; // check again for points in the same x position\n                            if (cursor < 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Add plotY position and handle stacking\n                points.forEach((point, i) => {\n                    let stackIndex;\n                    point.plotX += xOffset; // #2049\n                    // Undefined plotY means the point is either on axis, outside series\n                    // range or hidden series. If the series is outside the range of the\n                    // x axis it should fall through with an undefined plotY, but then\n                    // we must remove the shapeArgs (#847). For inverted charts, we need\n                    // to calculate position anyway, because series.invertGroups is not\n                    // defined\n                    if (typeof point.plotY === 'undefined' || inverted) {\n                        if (point.plotX >= 0 &&\n                            point.plotX <= xAxis.len) {\n                            // We're inside xAxis range\n                            if (inverted) {\n                                point.plotY = xAxis.translate(point.x, 0, 1, 0, 1);\n                                point.plotX = defined(point.y) ?\n                                    yAxis.translate(point.y, 0, 0, 0, 1) :\n                                    0;\n                            }\n                            else {\n                                point.plotY = (xAxis.opposite ? 0 : series.yAxis.len) +\n                                    xAxis.offset; // For the windbarb demo\n                            }\n                        }\n                        else {\n                            point.shapeArgs = {}; // 847\n                        }\n                    }\n                    // if multiple flags appear at the same x, order them into a stack\n                    lastPoint = points[i - 1];\n                    if (lastPoint && lastPoint.plotX === point.plotX) {\n                        if (typeof lastPoint.stackIndex === 'undefined') {\n                            lastPoint.stackIndex = 0;\n                        }\n                        stackIndex = lastPoint.stackIndex + 1;\n                    }\n                    point.stackIndex = stackIndex; // #3639\n                });\n                this.onSeries = onSeries;\n            }\n            OnSeriesComposition.translate = translate;\n        })(OnSeriesComposition || (OnSeriesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OnSeriesComposition;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeries.js', [_modules['Series/Flags/FlagsPoint.js'], _modules['Series/Flags/FlagsSeriesDefaults.js'], _modules['Series/Flags/FlagsSymbols.js'], _modules['Core/Globals.js'], _modules['Series/OnSeriesComposition.js'], _modules['Core/Renderer/RendererUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (FlagsPoint, FlagsSeriesDefaults, FlagsSymbols, H, OnSeriesComposition, R, SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { distribute } = R;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { addEvent, defined, extend, merge, objectEach, wrap } = U;\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * The Flags series.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flags\n         *\n         * @augments Highcharts.Series\n         */\n        class FlagsSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Disable animation, but keep clipping (#8546).\n             * @private\n             */\n            animate(init) {\n                if (init) {\n                    this.setClip();\n                }\n            }\n            /**\n             * Draw the markers.\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, renderer = chart.renderer, inverted = chart.inverted, options = series.options, optionsY = options.y, yAxis = series.yAxis, boxesMap = {}, boxes = [];\n                let plotX, plotY, shape, i, point, graphic, stackIndex, anchorY, attribs, outsideRight, centered;\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    outsideRight =\n                        (inverted ? point.plotY : point.plotX) >\n                            series.xAxis.len;\n                    plotX = point.plotX;\n                    stackIndex = point.stackIndex;\n                    shape = point.options.shape || options.shape;\n                    plotY = point.plotY;\n                    if (typeof plotY !== 'undefined') {\n                        plotY = point.plotY + optionsY -\n                            (typeof stackIndex !== 'undefined' &&\n                                (stackIndex * options.stackDistance));\n                    }\n                    // skip connectors for higher level stacked points\n                    point.anchorX = stackIndex ? void 0 : point.plotX;\n                    anchorY = stackIndex ? void 0 : point.plotY;\n                    centered = shape !== 'flag';\n                    graphic = point.graphic;\n                    // Only draw the point if y is defined and the flag is within\n                    // the visible area\n                    if (typeof plotY !== 'undefined' &&\n                        plotX >= 0 &&\n                        !outsideRight) {\n                        // #15384\n                        if (graphic && point.hasNewShapeType()) {\n                            graphic = graphic.destroy();\n                        }\n                        // Create the flag\n                        if (!graphic) {\n                            graphic = point.graphic = renderer.label('', null, null, shape, null, null, options.useHTML)\n                                .addClass('highcharts-point')\n                                .add(series.markerGroup);\n                            // Add reference to the point for tracker (#6303)\n                            if (point.graphic.div) {\n                                point.graphic.div.point = point;\n                            }\n                            graphic.isNew = true;\n                        }\n                        graphic.attr({\n                            align: centered ? 'center' : 'left',\n                            width: options.width,\n                            height: options.height,\n                            'text-align': options.textAlign\n                        });\n                        if (!chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point))\n                                .css(merge(options.style, point.style))\n                                .shadow(options.shadow);\n                        }\n                        if (plotX > 0) { // #3119\n                            plotX -= graphic.strokeWidth() % 2; // #4285\n                        }\n                        // Plant the flag\n                        attribs = {\n                            y: plotY,\n                            anchorY: anchorY\n                        };\n                        if (options.allowOverlapX) {\n                            attribs.x = plotX;\n                            attribs.anchorX = point.anchorX;\n                        }\n                        graphic.attr({\n                            text: point.options.title || options.title || 'A'\n                        })[graphic.isNew ? 'attr' : 'animate'](attribs);\n                        // Rig for the distribute function\n                        if (!options.allowOverlapX) {\n                            if (!boxesMap[point.plotX]) {\n                                boxesMap[point.plotX] = {\n                                    align: centered ? 0.5 : 0,\n                                    size: graphic.width || 0,\n                                    target: plotX,\n                                    anchorX: plotX\n                                };\n                            }\n                            else {\n                                boxesMap[point.plotX].size = Math.max(boxesMap[point.plotX].size, graphic.width || 0);\n                            }\n                        }\n                        // Set the tooltip anchor position\n                        point.tooltipPos = [\n                            plotX,\n                            plotY + yAxis.pos - chart.plotTop\n                        ]; // #6327\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy();\n                    }\n                }\n                // Handle X-dimension overlapping\n                if (!options.allowOverlapX) {\n                    let maxDistance = 100;\n                    objectEach(boxesMap, function (box) {\n                        box.plotX = box.anchorX;\n                        boxes.push(box);\n                        maxDistance = Math.max(box.size, maxDistance);\n                    });\n                    // If necessary (for overlapping or long labels)  distribute it\n                    // depending on the label width or a hardcoded value, #16041.\n                    distribute(boxes, inverted ? yAxis.len : this.xAxis.len, maxDistance);\n                    for (const point of points) {\n                        const plotX = point.plotX, graphic = point.graphic, box = graphic && boxesMap[plotX];\n                        if (box && graphic) {\n                            // Hide flag when its box position is not specified\n                            // (#8573, #9299)\n                            if (!defined(box.pos)) {\n                                graphic.hide().isNew = true;\n                            }\n                            else {\n                                graphic[graphic.isNew ? 'attr' : 'animate']({\n                                    x: box.pos + (box.align || 0) * box.size,\n                                    anchorX: point.anchorX\n                                }).show().isNew = false;\n                            }\n                        }\n                    }\n                }\n                // Can be a mix of SVG and HTML and we need events for both (#6303)\n                if (options.useHTML && series.markerGroup) {\n                    wrap(series.markerGroup, 'on', function (proceed) {\n                        return SVGElement.prototype.on.apply(\n                        // for HTML\n                        // eslint-disable-next-line no-invalid-this\n                        proceed.apply(this, [].slice.call(arguments, 1)), \n                        // and for SVG\n                        [].slice.call(arguments, 1));\n                    });\n                }\n            }\n            /**\n             * Extend the column trackers with listeners to expand and contract\n             * stacks.\n             * @private\n             */\n            drawTracker() {\n                const series = this, points = series.points;\n                super.drawTracker();\n                /* *\n                * Bring each stacked flag up on mouse over, this allows readability\n                * of vertically stacked elements as well as tight points on the x\n                * axis. #1924.\n                */\n                for (const point of points) {\n                    const graphic = point.graphic;\n                    if (graphic) {\n                        if (point.unbindMouseOver) {\n                            point.unbindMouseOver();\n                        }\n                        point.unbindMouseOver = addEvent(graphic.element, 'mouseover', function () {\n                            // Raise this point\n                            if (point.stackIndex > 0 &&\n                                !point.raised) {\n                                point._y = graphic.y;\n                                graphic.attr({\n                                    y: point._y - 8\n                                });\n                                point.raised = true;\n                            }\n                            // Revert other raised points\n                            for (const otherPoint of points) {\n                                if (otherPoint !== point &&\n                                    otherPoint.raised &&\n                                    otherPoint.graphic) {\n                                    otherPoint.graphic.attr({\n                                        y: otherPoint._y\n                                    });\n                                    otherPoint.raised = false;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const options = this.options, color = (point && point.color) || this.color;\n                let lineColor = options.lineColor, lineWidth = (point && point.lineWidth), fill = (point && point.fillColor) || options.fillColor;\n                if (state) {\n                    fill = options.states[state].fillColor;\n                    lineColor = options.states[state].lineColor;\n                    lineWidth = options.states[state].lineWidth;\n                }\n                return {\n                    fill: fill || color,\n                    stroke: lineColor || color,\n                    'stroke-width': lineWidth || options.lineWidth || 0\n                };\n            }\n            /**\n             * @private\n             */\n            setClip() {\n                Series.prototype.setClip.apply(this, arguments);\n                if (this.options.clip !== false &&\n                    this.sharedClipKey &&\n                    this.markerGroup) {\n                    this.markerGroup.clip(this.chart.sharedClips[this.sharedClipKey]);\n                }\n            }\n        }\n        FlagsSeries.compose = FlagsSymbols.compose;\n        FlagsSeries.defaultOptions = merge(ColumnSeries.defaultOptions, FlagsSeriesDefaults);\n        OnSeriesComposition.compose(FlagsSeries);\n        extend(FlagsSeries.prototype, {\n            allowDG: false,\n            forceCrop: true,\n            invertible: false,\n            noSharedTooltip: true,\n            pointClass: FlagsPoint,\n            sorted: false,\n            takeOrdinalPosition: false,\n            trackerGroups: ['markerGroup'],\n            buildKDTree: noop,\n            /**\n             * Inherit the initialization from base Series.\n             * @private\n             */\n            init: Series.prototype.init\n        });\n        SeriesRegistry.registerSeriesType('flags', FlagsSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"circlepin\"|\"flag\"|\"squarepin\"} Highcharts.FlagsShapeValue\n         */\n        ''; // detach doclets above\n\n        return FlagsSeries;\n    });\n    _registerModule(_modules, 'Core/Chart/StockChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Templating.js'], _modules['Core/Defaults.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (Chart, F, D, NavigatorDefaults, RangeSelectorDefaults, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { getOptions } = D;\n        const { addEvent, clamp, defined, extend, find, isNumber, isString, merge, pick, pushUnique, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get stock-specific default axis options.\n         *\n         * @private\n         * @function getDefaultAxisOptions\n         */\n        function getDefaultAxisOptions(type, options) {\n            if (type === 'xAxis') {\n                return {\n                    minPadding: 0,\n                    maxPadding: 0,\n                    overscroll: 0,\n                    ordinal: true,\n                    title: {\n                        text: null\n                    },\n                    labels: {\n                        overflow: 'justify'\n                    },\n                    showLastLabel: true\n                };\n            }\n            if (type === 'yAxis') {\n                return {\n                    labels: {\n                        y: -2\n                    },\n                    opposite: pick(options.opposite, true),\n                    showLastLabel: !!(\n                    // #6104, show last label by default for category axes\n                    options.categories ||\n                        options.type === 'category'),\n                    title: {\n                        text: null\n                    }\n                };\n            }\n            return {};\n        }\n        /**\n         * Get stock-specific forced axis options.\n         *\n         * @private\n         * @function getForcedAxisOptions\n         */\n        function getForcedAxisOptions(type, chartOptions) {\n            if (type === 'xAxis') {\n                // Always disable startOnTick:true on the main axis when the navigator\n                // is enabled (#1090)\n                const navigatorEnabled = pick(chartOptions.navigator && chartOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                const axisOptions = {\n                    type: 'datetime',\n                    categories: void 0\n                };\n                if (navigatorEnabled) {\n                    axisOptions.startOnTick = false;\n                    axisOptions.endOnTick = false;\n                }\n                return axisOptions;\n            }\n            return {};\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/stock\n         *\n         * @class\n         * @name Highcharts.StockChart\n         * @extends Highcharts.Chart\n         */\n        class StockChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.StockChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.StockChart#event:init\n             * @emits Highcharts.StockChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const defaultOptions = getOptions(), xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis, \n                // Always disable startOnTick:true on the main axis when the\n                // navigator is enabled (#1090)\n                navigatorEnabled = pick(userOptions.navigator && userOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge({\n                    chart: {\n                        panning: {\n                            enabled: true,\n                            type: 'x'\n                        },\n                        zooming: {\n                            pinchType: 'x',\n                            mouseWheel: {\n                                type: 'x'\n                            }\n                        }\n                    },\n                    navigator: {\n                        enabled: navigatorEnabled\n                    },\n                    scrollbar: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(ScrollbarDefaults.enabled, true)\n                    },\n                    rangeSelector: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(RangeSelectorDefaults.rangeSelector.enabled, true)\n                    },\n                    title: {\n                        text: null\n                    },\n                    tooltip: {\n                        split: pick(defaultOptions.tooltip && defaultOptions.tooltip.split, true),\n                        crosshairs: true\n                    },\n                    legend: {\n                        enabled: false\n                    }\n                }, userOptions, // user's options\n                {\n                    isStock: true // internal flag\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // apply X axis options to both single and multi y axes\n                options.xAxis = splat(userOptions.xAxis || {}).map((xAxisOptions, i) => merge(getDefaultAxisOptions('xAxis', xAxisOptions), defaultOptions.xAxis, // #3802\n                // #7690\n                // @todo remove, default axis options are not arrays\n                defaultOptions.xAxis && defaultOptions.xAxis[i], xAxisOptions, // user options\n                getForcedAxisOptions('xAxis', userOptions)));\n                // apply Y axis options to both single and multi y axes\n                options.yAxis = splat(userOptions.yAxis || {}).map((yAxisOptions, i) => merge(getDefaultAxisOptions('yAxis', yAxisOptions), defaultOptions.yAxis, // #3802\n                // #7690\n                // @todo remove, default axis options are not arrays\n                defaultOptions.yAxis && defaultOptions.yAxis[i], yAxisOptions // user options\n                ));\n                super.init(options, callback);\n            }\n            /**\n             * Factory for creating different axis types.\n             * Extended to add stock defaults.\n             *\n             * @private\n             * @function Highcharts.StockChart#createAxis\n             * @param {string} coll\n             * An axis type.\n             * @param {Chart.CreateAxisOptionsObject} options\n             * The axis creation options.\n             */\n            createAxis(coll, options) {\n                options.axis = merge(getDefaultAxisOptions(coll, options.axis), options.axis, getForcedAxisOptions(coll, this.userOptions));\n                return super.createAxis(coll, options);\n            }\n        }\n        addEvent(Chart, 'update', function (e) {\n            const chart = this, options = e.options;\n            // Use case: enabling scrollbar from a disabled state.\n            // Scrollbar needs to be initialized from a controller, Navigator in this\n            // case (#6615)\n            if ('scrollbar' in options && chart.navigator) {\n                merge(true, chart.options.scrollbar, options.scrollbar);\n                chart.navigator.update({});\n                delete options.scrollbar;\n            }\n        });\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        (function (StockChart) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(AxisClass, SeriesClass, SVGRendererClass) {\n                if (pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'afterDrawCrosshair', onAxisAfterDrawCrosshair);\n                    addEvent(AxisClass, 'afterHideCrosshair', onAxisAfterHideCrosshair);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'getPlotLinePath', onAxisGetPlotLinePath);\n                }\n                if (pushUnique(composedMembers, SeriesClass)) {\n                    SeriesClass.prototype.forceCropping = seriesForceCropping;\n                    addEvent(SeriesClass, 'setOptions', onSeriesSetOptions);\n                }\n                if (pushUnique(composedMembers, SVGRendererClass)) {\n                    SVGRendererClass.prototype.crispPolyLine = svgRendererCrispPolyLine;\n                }\n            }\n            StockChart.compose = compose;\n            /**\n             * Extend crosshairs to also draw the label.\n             * @private\n             */\n            function onAxisAfterDrawCrosshair(event) {\n                const axis = this;\n                // Check if the label has to be drawn\n                if (!axis.crosshair ||\n                    !axis.crosshair.label ||\n                    !axis.crosshair.label.enabled ||\n                    !axis.cross ||\n                    !isNumber(axis.min) ||\n                    !isNumber(axis.max)) {\n                    return;\n                }\n                const chart = axis.chart, log = axis.logarithmic, options = axis.crosshair.label, // the label's options\n                horiz = axis.horiz, // axis orientation\n                opposite = axis.opposite, // axis position\n                left = axis.left, // left position\n                top = axis.top, // top position\n                width = axis.width, tickInside = axis.options.tickPosition === 'inside', snap = axis.crosshair.snap !== false, e = event.e || (axis.cross && axis.cross.e), point = event.point;\n                let crossLabel = axis.crossLabel, // the svgElement\n                posx, posy, formatOption = options.format, formatFormat = '', limit, offset = 0, \n                // Use last available event (#5287)\n                min = axis.min, max = axis.max;\n                if (log) {\n                    min = log.lin2log(axis.min);\n                    max = log.lin2log(axis.max);\n                }\n                const align = (horiz ? 'center' : opposite ?\n                    (axis.labelAlign === 'right' ? 'right' : 'left') :\n                    (axis.labelAlign === 'left' ? 'left' : 'center'));\n                // If the label does not exist yet, create it.\n                if (!crossLabel) {\n                    crossLabel = axis.crossLabel = chart.renderer\n                        .label('', 0, void 0, options.shape || 'callout')\n                        .addClass('highcharts-crosshair-label highcharts-color-' + (point && point.series ?\n                        point.series.colorIndex :\n                        axis.series[0] && this.series[0].colorIndex))\n                        .attr({\n                        align: options.align || align,\n                        padding: pick(options.padding, 8),\n                        r: pick(options.borderRadius, 3),\n                        zIndex: 2\n                    })\n                        .add(axis.labelGroup);\n                    // Presentational\n                    if (!chart.styledMode) {\n                        crossLabel\n                            .attr({\n                            fill: options.backgroundColor ||\n                                ( // #14888\n                                point && point.series &&\n                                    point.series.color) ||\n                                \"#666666\" /* Palette.neutralColor60 */,\n                            stroke: options.borderColor || '',\n                            'stroke-width': options.borderWidth || 0\n                        })\n                            .css(extend({\n                            color: \"#ffffff\" /* Palette.backgroundColor */,\n                            fontWeight: 'normal',\n                            fontSize: '0.7em',\n                            textAlign: 'center'\n                        }, options.style || {}));\n                    }\n                }\n                if (horiz) {\n                    posx = snap ? (point.plotX || 0) + left : e.chartX;\n                    posy = top + (opposite ? 0 : axis.height);\n                }\n                else {\n                    posx = left + axis.offset + (opposite ? width : 0);\n                    posy = snap ? (point.plotY || 0) + top : e.chartY;\n                }\n                if (!formatOption && !options.formatter) {\n                    if (axis.dateTime) {\n                        formatFormat = '%b %d, %Y';\n                    }\n                    formatOption =\n                        '{value' + (formatFormat ? ':' + formatFormat : '') + '}';\n                }\n                // Show the label\n                const value = snap ?\n                    (axis.isXAxis ? point.x : point.y) :\n                    axis.toValue(horiz ? e.chartX : e.chartY);\n                // Crosshair should be rendered within Axis range (#7219) and the point\n                // of currentPriceIndicator should be inside the plot area (#14879).\n                const isInside = point && point.series ?\n                    point.series.isPointInside(point) :\n                    (isNumber(value) && value > min && value < max);\n                let text = '';\n                if (formatOption) {\n                    text = format(formatOption, { value }, chart);\n                }\n                else if (options.formatter && isNumber(value)) {\n                    text = options.formatter.call(axis, value);\n                }\n                crossLabel.attr({\n                    text,\n                    x: posx,\n                    y: posy,\n                    visibility: isInside ? 'inherit' : 'hidden'\n                });\n                const crossBox = crossLabel.getBBox();\n                // Now it is placed we can correct its position\n                if (isNumber(crossLabel.x) && !horiz && !opposite) {\n                    posx = crossLabel.x - (crossBox.width / 2);\n                }\n                if (isNumber(crossLabel.y)) {\n                    if (horiz) {\n                        if ((tickInside && !opposite) || (!tickInside && opposite)) {\n                            posy = crossLabel.y - crossBox.height;\n                        }\n                    }\n                    else {\n                        posy = crossLabel.y - (crossBox.height / 2);\n                    }\n                }\n                // Check the edges\n                if (horiz) {\n                    limit = {\n                        left: left - crossBox.x,\n                        right: left + axis.width - crossBox.x\n                    };\n                }\n                else {\n                    limit = {\n                        left: axis.labelAlign === 'left' ? left : 0,\n                        right: axis.labelAlign === 'right' ?\n                            left + axis.width :\n                            chart.chartWidth\n                    };\n                }\n                const translateX = crossLabel.translateX || 0;\n                // Left edge\n                if (translateX < limit.left) {\n                    offset = limit.left - translateX;\n                }\n                // Right edge\n                if (translateX + crossBox.width >= limit.right) {\n                    offset = -(translateX + crossBox.width - limit.right);\n                }\n                // Show the crosslabel\n                crossLabel.attr({\n                    x: posx + offset,\n                    y: posy,\n                    // First set x and y, then anchorX and anchorY, when box is actually\n                    // calculated, #5702\n                    anchorX: horiz ?\n                        posx :\n                        (axis.opposite ? 0 : chart.chartWidth),\n                    anchorY: horiz ?\n                        (axis.opposite ? chart.chartHeight : 0) :\n                        posy + crossBox.height / 2\n                });\n            }\n            /**\n             * Wrapper to hide the label.\n             * @private\n             */\n            function onAxisAfterHideCrosshair() {\n                const axis = this;\n                if (axis.crossLabel) {\n                    axis.crossLabel = axis.crossLabel.hide();\n                }\n            }\n            /**\n             * Override the automatic label alignment so that the first Y axis' labels\n             * are drawn on top of the grid line, and subsequent axes are drawn outside.\n             * @private\n             */\n            function onAxisAutoLabelAlign(e) {\n                const axis = this, chart = axis.chart, options = axis.options, panes = chart._labelPanes = chart._labelPanes || {}, labelOptions = options.labels;\n                if (chart.options.isStock && axis.coll === 'yAxis') {\n                    const key = options.top + ',' + options.height;\n                    // Do it only for the first Y axis of each pane\n                    if (!panes[key] && labelOptions.enabled) {\n                        if (labelOptions.distance === 15 && // default\n                            axis.side === 1) {\n                            labelOptions.distance = 0;\n                        }\n                        if (typeof labelOptions.align === 'undefined') {\n                            labelOptions.align = 'right';\n                        }\n                        panes[key] = axis;\n                        e.align = 'right';\n                        e.preventDefault();\n                    }\n                }\n            }\n            /**\n             * Clear axis from label panes. (#6071)\n             * @private\n             */\n            function onAxisDestroy() {\n                const axis = this, chart = axis.chart, key = (axis.options &&\n                    (axis.options.top + ',' + axis.options.height));\n                if (key && chart._labelPanes && chart._labelPanes[key] === axis) {\n                    delete chart._labelPanes[key];\n                }\n            }\n            /**\n             * Override getPlotLinePath to allow for multipane charts.\n             * @private\n             */\n            function onAxisGetPlotLinePath(e) {\n                const axis = this, series = (axis.isLinked && !axis.series && axis.linkedParent ?\n                    axis.linkedParent.series :\n                    axis.series), chart = axis.chart, renderer = chart.renderer, axisLeft = axis.left, axisTop = axis.top, result = [], translatedValue = e.translatedValue, value = e.value, force = e.force, \n                /**\n                 * Return the other axis based on either the axis option or on\n                 * related series.\n                 * @private\n                 */\n                getAxis = (coll) => {\n                    const otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis', opt = axis.options[otherColl];\n                    // Other axis indexed by number\n                    if (isNumber(opt)) {\n                        return [chart[otherColl][opt]];\n                    }\n                    // Other axis indexed by id (like navigator)\n                    if (isString(opt)) {\n                        return [chart.get(opt)];\n                    }\n                    // Auto detect based on existing series\n                    return series.map((s) => s[otherColl]);\n                };\n                let x1, y1, x2, y2, axes = [], // #3416 need a default array\n                axes2, uniqueAxes, transVal;\n                if ( // For stock chart, by default render paths across the panes\n                // except the case when `acrossPanes` is disabled by user (#6644)\n                (chart.options.isStock && e.acrossPanes !== false) &&\n                    // Ignore in case of colorAxis or zAxis. #3360, #3524, #6720\n                    axis.coll === 'xAxis' || axis.coll === 'yAxis') {\n                    e.preventDefault();\n                    // Get the related axes based on series\n                    axes = getAxis(axis.coll);\n                    // Get the related axes based options.*Axis setting #2810\n                    axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);\n                    for (const A of axes2) {\n                        if (defined(A.options.id) ?\n                            A.options.id.indexOf('navigator') === -1 :\n                            true) {\n                            const a = (A.isXAxis ? 'yAxis' : 'xAxis'), rax = (defined(A.options[a]) ?\n                                chart[a][A.options[a]] :\n                                chart[a][0]);\n                            if (axis === rax) {\n                                axes.push(A);\n                            }\n                        }\n                    }\n                    // Remove duplicates in the axes array. If there are no axes in the\n                    // axes array, we are adding an axis without data, so we need to\n                    // populate this with grid lines (#2796).\n                    uniqueAxes = axes.length ?\n                        [] :\n                        [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; // #3742\n                    for (const axis2 of axes) {\n                        if (uniqueAxes.indexOf(axis2) === -1 &&\n                            // Do not draw on axis which overlap completely. #5424\n                            !find(uniqueAxes, (unique) => (unique.pos === axis2.pos &&\n                                unique.len === axis2.len))) {\n                            uniqueAxes.push(axis2);\n                        }\n                    }\n                    transVal = pick(translatedValue, axis.translate(value || 0, void 0, void 0, e.old));\n                    if (isNumber(transVal)) {\n                        if (axis.horiz) {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                y1 = axis2.pos;\n                                y2 = y1 + axis2.len;\n                                x1 = x2 = Math.round(transVal + axis.transB);\n                                // outside plot area\n                                if (force !== 'pass' &&\n                                    (x1 < axisLeft || x1 > axisLeft + axis.width)) {\n                                    if (force) {\n                                        x1 = x2 = clamp(x1, axisLeft, axisLeft + axis.width);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                        else {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                x1 = axis2.pos;\n                                x2 = x1 + axis2.len;\n                                y1 = y2 = Math.round(axisTop + axis.height - transVal);\n                                // outside plot area\n                                if (force !== 'pass' &&\n                                    (y1 < axisTop || y1 > axisTop + axis.height)) {\n                                    if (force) {\n                                        y1 = y2 = clamp(y1, axisTop, axisTop + axis.height);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                    }\n                    e.path = result.length > 0 ?\n                        renderer.crispPolyLine(result, e.lineWidth || 1) :\n                        // #3557 getPlotLinePath in regular Highcharts also returns null\n                        void 0;\n                }\n            }\n            /**\n             * Handle som Stock-specific series defaults, override the plotOptions\n             * before series options are handled.\n             * @private\n             */\n            function onSeriesSetOptions(e) {\n                const series = this;\n                if (series.chart.options.isStock) {\n                    let overrides;\n                    if (series.is('column') || series.is('columnrange')) {\n                        overrides = {\n                            borderWidth: 0,\n                            shadow: false\n                        };\n                    }\n                    else if (!series.is('scatter') && !series.is('sma')) {\n                        overrides = {\n                            marker: {\n                                enabled: false,\n                                radius: 2\n                            }\n                        };\n                    }\n                    if (overrides) {\n                        e.plotOptions[series.type] = merge(e.plotOptions[series.type], overrides);\n                    }\n                }\n            }\n            /**\n             * Based on the data grouping options decides whether\n             * the data should be cropped while processing.\n             *\n             * @ignore\n             * @function Highcharts.Series#forceCropping\n             */\n            function seriesForceCropping() {\n                const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = (series.allowDG !== false &&\n                    dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled, chart.options.isStock));\n                return groupingEnabled;\n            }\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * Factory function for creating new stock charts. Creates a new\n             * {@link Highcharts.StockChart|StockChart} object with different default\n             * options than the basic Chart.\n             *\n             * @example\n             * let chart = Highcharts.stockChart('container', {\n             *     series: [{\n             *         data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n             *         pointInterval: 24 * 60 * 60 * 1000\n             *     }]\n             * });\n             *\n             * @function Highcharts.stockChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure as described in the\n             *        [options reference](https://api.highcharts.com/highstock).\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        A function to execute when the chart object is finished\n             *        rendering and all external image files (`chart.backgroundImage`,\n             *        `chart.plotBackgroundImage` etc) are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.StockChart}\n             *         The chart object.\n             */\n            function stockChart(a, b, c) {\n                return new StockChart(a, b, c);\n            }\n            StockChart.stockChart = stockChart;\n            /* eslint-enable jsdoc/check-param-names */\n            /**\n             * Function to crisp a line with multiple segments\n             *\n             * @private\n             * @function Highcharts.SVGRenderer#crispPolyLine\n             */\n            function svgRendererCrispPolyLine(points, width) {\n                // points format: [['M', 0, 0], ['L', 100, 0]]\n                // normalize to a crisp line\n                for (let i = 0; i < points.length; i = i + 2) {\n                    const start = points[i], end = points[i + 1];\n                    if (start[1] === end[1]) {\n                        // Substract due to #1129. Now bottom and left axis gridlines\n                        // behave the same.\n                        start[1] = end[1] =\n                            Math.round(start[1]) - (width % 2 / 2);\n                    }\n                    if (start[2] === end[2]) {\n                        start[2] = end[2] =\n                            Math.round(start[2]) + (width % 2 / 2);\n                    }\n                }\n                return points;\n            }\n        })(StockChart || (StockChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return StockChart;\n    });\n    _registerModule(_modules, 'masters/modules/stock.src.js', [_modules['Core/Globals.js'], _modules['Series/DataModifyComposition.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Axis/OrdinalAxis.js'], _modules['Series/OHLC/OHLCSeries.js'], _modules['Series/Flags/FlagsSeries.js'], _modules['Core/Chart/StockChart.js']], function (Highcharts, DataModifyComposition, Navigator, RangeSelector, Scrollbar, OrdinalAxis, OHLCSeries, FlagsSeries, StockChart) {\n\n        const G = Highcharts;\n        // Classes\n        G.Navigator = Navigator;\n        G.RangeSelector = RangeSelector;\n        G.Scrollbar = Scrollbar;\n        G.StockChart = G.stockChart = StockChart.stockChart;\n        // Compositions\n        DataModifyComposition.compose(G.Series, G.Axis, G.Point);\n        FlagsSeries.compose(G.Renderer);\n        Navigator.compose(G.Axis, G.Chart, G.Series);\n        OHLCSeries.compose(G.Series);\n        OrdinalAxis.compose(G.Axis, G.Series, G.Chart);\n        RangeSelector.compose(G.Axis, G.Chart);\n        Scrollbar.compose(G.Axis);\n        StockChart.compose(G.Axis, G.Series, G.SVGRenderer);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","StackItem","U","BrokenAxis","addEvent","find","fireEvent","isArray","isNumber","pick","composedMembers","onAxisAfterInit","brokenAxis","setBreaks","options","breaks","onAxisAfterSetOptions","axis","hasBreaks","ordinal","onAxisAfterSetTickPositions","tickPositions","info","newPositions","i","length","isInAnyBreak","push","onAxisInit","Additions","onSeriesAfterGeneratePoints","isDirty","connectNulls","points","xAxis","yAxis","point","nullGap","y","isPointInBreak","x","visible","onSeriesAfterRender","drawBreaks","pointArrayMap","seriesDrawBreaks","keys","threshold","series","forEach","key","breakArray","isXAxis","min","breaksOutOfRange","filter","brk","isOut","otherBreak","from","to","toUpperCase","eventName","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","slice","current","next","gapUnit","basePointRange","xRange","splice","isNull","stacking","stack","stacks","stackKey","stackLabels","total","getGraphPath","compose","AxisClass","SeriesClass","pushUnique","keepProps","seriesProto","prototype","gappedPath","isInBreak","val","repeat","Infinity","test","inclusive","lin2Val","nval","len","val2Lin","constructor","findBreakAt","b","testKeep","inbrk","keep","ret","showPoints","redraw","Object","userOptions","forceRedraw","val2lin","lin2val","setExtremes","newMin","newMax","animation","eventArguments","axisBreak","call","setAxisTranslation","unitLength","breakArrayT","pointRangePadding","inBrk","userMin","max","userMax","start","value","move","size","breakSize","sort","a","staticScale","transA","minPixelPadding","minPointOffset","chart","G","Axis","Series","ApproximationRegistry","arrayMax","arrayMin","correctFloat","extend","average","arr","sum","hasNulls","ApproximationDefaults","averages","arguments","close","high","hlc","low","ohlc","open","range","common","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","seriesSpecific","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","units","DataGroupingDefaults","AxisConstructor","merge","applyGrouping","e","getGroupPixelWidth","hasProcessed","hasExtremesChanged","doGrouping","dataLength","dgOptions","dataGrouping","Math","processedXData","data","plotSizeX","forced","onAfterSetScale","setDataGrouping","update","seriesOptions","slope","DateTimeAxis","D","SeriesRegistry","defined","error","baseGeneratePoints","generatePoints","groupedXData","dataGroupingOptions","groupingEnabled","allowDG","enabled","isStock","reserveSpace","lastDataGrouping","croppedData","revertRequireSorting","requireSorting","skip","skipDataGrouping","isCartesian","hasGroupedData","destroyGroupedData","groupAll","xData","processedYData","yData","extremes","getExtremes","xMin","xMax","groupIntervalFactor","getGroupIntervalFactor","interval","groupPositions","getTimeTicks","normalizeTimeTickInterval","startOfWeek","closestPointRange","groupedData","groupData","approximation","groupedYData","smoothed","firstAnchor","anchor","lastAnchor","segmentStarts","indexOf","totalRange","groupMap","anchorPoints","groupedDataLength","shiftInterval","middle","end","firstGroupstEnd","groupStart","groupLength","firstPoint","lastPoint","lastGroupStart","dataMin","dataMax","allGroupedData","cropData","cropStart","preventGraphAnimation","destroy","getDGApproximation","is","cumulative","dataOptions","handleYData","values","pointArrayMapLength","extendedPointArrayMap","concat","pointX","pointY","groupedY","pos","approximationFn","valuesLen","dataGroupInfo","pointClass","optionsToObject","j","index","applyOptions","onAfterSetOptions","type","plotOptions","baseOptions","useCommonDataGrouping","defaultOptions","rangeSelector","isInternal","selected","buttonOptions","PointClass","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","F","format","onTooltipHeaderFormatter","time","labelConfig","tooltipOptions","xDateFormat","xDateFormatEnd","labelFormats","formattedKey","formatString","isFooter","unitName","count","dateTime","getXDateFormat","dateFormat","styledMode","styledModeFormat","text","preventDefault","DataGroupingComposition","TooltipClass","DataGrouping","approximationDefaults","approximations","Tooltip","annotationsFieldsTypes","backgroundColor","borderColor","borderRadius","color","fill","fontSize","labels","name","stroke","title","getAssignedAxis","coords","coord","axisMin","axisMax","getFieldType","predefinedType","fieldType","NBU","wheelTimer","startOnTick","endOnTick","isObject","composedClasses","sensitivity","fitToRange","outerStart","outerWidth","innerStart","innerWidth","rangeStart","rangeWidth","waitForAutomaticExtremes","axisOptions","clearTimeout","setTimeout","getMouseAxisRatio","mousePos","mouseAxisRatio","reversed","inverted","zoomOnDirection","howMuch","centerArg","hasZoomed","center","newRange","dataRange","minPaddingOffset","minPadding","maxPaddingOffset","maxPadding","outerMin","outerRange","newExt","zoomOut","Number","MIN_VALUE","zoomBy","mouseX","mouseY","zooming","zoomX","zoomY","centerXArg","toValue","centerYArg","emulateRoof","tmp","hasZoomedX","hasZoomedY","onAfterGetContainer","wheelZoomOptions","mouseWheel","container","pointer","normalize","allowZoom","inClass","target","isInsidePlot","chartX","plotLeft","chartY","plotTop","wheelSensitivity","delta","deltaY","xAxisCoords","getCoordinates","yAxisCoords","pow","ChartClass","MouseWheelZoom","Chart","Point","DataModifyComposition","tooltipFormatter","pointTooltipFormatter","isString","setModifier","mode","modeState","setCompare","setCumulative","pointFormat","numberFormatter","replace","changeDecimals","change","cumulativeSum","afterInit","dataModify","compare","initCompare","initCumulative","afterGetExtremes","dataExtremes","activeYData","modifyValue","getCumulativeExtremes","seriesSetCompare","afterProcessData","compareStart","keyIndex","pointValKey","compareValue","axisSetCompare","seriesSetCumulative","axisSetCumulative","axisProto","pointProto","cumulativeDataMin","cumulativeDataMax","reduce","prev","cur","compareBase","prevPoint","H","isTouchDevice","navigatorAxis","NavigatorAxisAdditions","onAxisZoom","chartOptions","navigator","pinchType","zoomType","zoomed","previousZoom","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","translate","horiz","fixedRange","halfPointRange","pointRange","Color","parse","seriesTypes","NavigatorDefaults","height","margin","maskInside","handles","width","symbols","lineWidth","maskFill","setOpacity","get","outlineColor","outlineWidth","fillOpacity","sonification","dataLabels","zIndex","id","className","lineColor","marker","overscroll","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","align","style","opacity","textOutline","crosshair","tickWidth","_x","_y","halfWidth","markerPosition","round","NavigatorSymbols","RendererRegistry","NavigatorConstructor","setOptions","getRendererType","onChartAfterAddSeries","setBaseSeries","onChartAfterSetChartSize","legendOptions","legend","scrollbarHeight","scrollButtonSize","left","opposite","chartWidth","spacing","top","navigatorOptions","chartHeight","scrollbar","extraBottomMargin","getHeight","verticalAlign","layout","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","onChartBeforeRender","onChartBeforeShowResetZoom","onChartCallback","render","onChartUpdate","scrollbarOptions","onSeriesAfterUpdate","NavigatorClass","chartProto","callbacks","ScrollbarAxis","Scrollbar","scrollMin","scrollMax","onAxisAfterGetOffset","scrollbarsOffsets","axisOffset","vertical","renderer","unitedMin","unitedMax","shouldUpdateExtremes","DOMType","animate","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","destroyObjectProperties","removeEvent","swapXY","seg","temp","_events","group","scrollbarButtons","scrollbarGroup","scrollbarLeft","scrollbarRifles","scrollbarStrokeWidth","scrollbarTop","track","init","addEvents","buttonsOrder","buttons","bar","element","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","hasTouch","updatePosition","trigger","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","g","add","rect","addClass","attr","crisp","r","strokeWidth","arrow","mousePosition","initPositions","grabbedCenter","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","fromPX","newSize","fullWidth","toPX","ceil","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","NavigatorComposition","clamp","erase","splat","numExt","extreme","numbers","Navigator","baseSeries","navigatorEnabled","navigatorGroup","navigatorSeries","navigatorSize","outline","shades","zoomedMax","zoomedMin","drawHandle","verb","parseInt","drawOutline","halfOutline","outlineCorrection","navigatorTop","lineTop","lineBtm","verticalMin","d","drawMasks","navigatorHeight","shade","renderElements","mouseCursor","cursor","visibility","hasMask","css","handlesOptions","symbol","rotation","rotationOriginX","rotationOriginY","scrollbarXAxis","fake","minRange","maxRange","navigatorWidth","plotWidth","plotHeight","toPixels","abs","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","eventsToUnbind","onMouseMove","onMouseUp","getPartsEvents","renderTo","modifyNavigatorAxisExtremes","events","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","unionExtremes","triggerOp","unbind","removeBaseSeriesEvents","adaptToUpdatedData","updatedDataHandler","modifyBaseAxisExtremes","scrollbarEnabled","Boolean","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","updateNavigatorSeries","unbindRedraw","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","returnFalseOnNoBaseSeries","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","linkedTo","padXAxis","showInLegend","states","inactive","navSeries","base","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","navigatorSeriesData","hasNavigatorData","initSeries","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","hasSetExtremes","unmutable","eventArgs","MAX_VALUE","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","getTrueRange","timeName","date","Date","basePeriod","set","getTime","_offsetMin","onChartAfterGetContainer","deferredYTDClick","clickButton","updateNames","setScale","getAxisMargins","extraTopMargin","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","onChartGetMargins","rangeSelectorHeight","marginBottom","onChartRender","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","RangeSelectorComposition","SVGElement","createElement","discardElement","objectEach","pad","pInt","RangeSelector","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","minSetting","rangeSetting","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","updateButtonStates","actualRange","hasNoData","hasVisibleSeries","ytdMin","ytdMax","selectedExists","button","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","state","isYTDButNotSelected","isAllButAlreadyShowingAll","isSameRange","disable","select","setState","disabled","fixedTimes","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","inputTypeFormats","setInputExtremes","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","label","on","focus","preferredInputType","ms","some","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","now","startOfYear","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","getBBox","alignElements","buttonGroup","isMS","currentButtonIndex","zoomText","paddingLeft","paddingRight","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","hover","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","inputGroupX","alignOptions","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","userButtonTheme","getAttribs","hasActiveButton","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","subtitle","rSelector","HTMLElement","OrdinalAxis","timeUnits","normalizedInterval","positions","closestDistance","findHigherRanks","higherRanks","tickPixelIntervalOption","segmentPositions","hasCrossedHigherRank","outsideMax","lastGroupPosition","posLength","shift","unitRange","translatedArr","distances","itemToRemove","translated","lastTranslated","medianDistance","distance","index2val","ordinalPositions","localMin","old","localA","pixelVal","isInside","getExtendedPositions","getIndexOfPoint","mantissa","leftNeighbour","rightNeighbour","getIndexInArray","findIndexOf","percent","onAxisFoundExtremes","mouseIsDown","onAxisAfterSetScale","isOrdinal","onAxisInitialAxisTranslation","beforeSetTickPositions","tickInterval","postProcessTickInterval","onChartPan","originalEvent","panning","runBase","trimmedRange","searchAxisLeft","searchAxisRight","mouseDownX","hoverPoints","overscrollPointsRange","pointPixelWidth","translationSlope","movedUnits","extendedOrdinalPositions","extendedAxis","onSeriesUpdatedData","toIndex","ordinalIndex","ordinalLength","originalPositionsReference","diff","approximateIndexOffset","ordinal2lin","uniqueOrdinalPositions","dist","minIndex","maxIndex","useOrdinal","adjustOrdinalExtremesPoints","isBoosted","distanceBetweenPoint","takeOrdinalPosition","unshift","pop","forceOrdinal","getOverscrollPositions","sortedArray","indirectSearch","grouping","fakeAxis","fakeSeries","noop","getProcessedData","processData","median","ordinalArray","firstPointX","firstPointVal","hasPointsInside","plotX","ordinalPointPixelInterval","shiftIndex","extraRange","ordinalSlope","ColumnPoint","plotClose","tooltip","stickyTracking","HLCPoint","HLCSeriesDefaults","ColumnSeries","HLCSeries","extendStem","halfStrokeWidth","getPointPath","graphic","crispCorr","crispX","shapeArgs","yBottom","plotHigh","drawSinglePoint","plotY","pointAttribs","getClassName","drawPoints","attribs","toYData","names","map","charAt","tooltipPos","directTouch","pointAttrToOptions","registerSeriesType","OHLCPoint","plotOpen","resolveUpColor","upColor","resolveColor","getZone","zone","OHLCSeriesDefaults","onSeriesAfterSetOptions","useOhlcData","onSeriesInit","eventOptions","OHLCSeries","_args","CandlestickSeriesDefaults","CandlestickSeries","isUp","upLineColor","stateOptions","reversedYAxis","topBox","bottomBox","hasTopWhisker","hasBottomWhisker","isNew","shadow","ttBelow","isValid","hasNewShapeType","shape","symbolKey","allowOverlapX","stackDistance","fillColor","fontWeight","FlagsSymbols","modifiedMembers","flag","w","h","anchorX","anchorY","circle","createPinSymbol","labelX","startSeg","endSeg","labelY","SVGRendererClass","RendererClass","OnSeriesComposition","columnProto","stableSort","getPlotBox","onSeries","optionsOnSeries","onData","onKey","leftPoint","lastX","rightPoint","distanceRatio","pointXOffset","barW","substr","p0","p3","p1","controlPoints","p2","calculateCoord","t","tMin","tMax","tMid","xMid","stackIndex","FlagsPoint","FlagsSeriesDefaults","R","distribute","wrap","FlagsSeries","setClip","outsideRight","centered","optionsY","boxesMap","boxes","useHTML","markerGroup","maxDistance","box","proceed","drawTracker","unbindMouseOver","otherPoint","raised","clip","sharedClipKey","sharedClips","forceCrop","invertible","noSharedTooltip","sorted","trackerGroups","buildKDTree","getOptions","getDefaultAxisOptions","overflow","showLastLabel","categories","getForcedAxisOptions","StockChart","callback","xAxisOptions","yAxisOptions","crosshairs","createAxis","onAxisAfterDrawCrosshair","cross","log","logarithmic","tickInside","tickPosition","snap","crossLabel","posx","posy","formatOption","formatFormat","limit","lin2log","labelAlign","colorIndex","labelGroup","borderWidth","formatter","isPointInside","crossBox","right","onAxisAfterHideCrosshair","onAxisAutoLabelAlign","panes","_labelPanes","labelOptions","side","onAxisDestroy","onAxisGetPlotLinePath","isLinked","linkedParent","axisLeft","axisTop","result","translatedValue","force","x1","y1","x2","y2","uniqueAxes","transVal","acrossPanes","A","getAxis","otherColl","opt","rax","axis2","unique","transB","crispPolyLine","onSeriesSetOptions","overrides","radius","seriesForceCropping","svgRendererCrispPolyLine","forceCropping","stockChart","c","Renderer","SVGRenderer"],"mappings":"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"}