{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.2.0 (2023-10-30)\n *\n * Gantt series\n *\n * (c) 2016-2021 Lars A. V. Cabrera\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/gantt', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Gantt/Connection.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, error, merge, objectEach } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const deg2rad = H.deg2rad, max = Math.max, min = Math.min;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Connection class. Used internally to represent a connection between two\n         * points.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Connection\n         *\n         * @param {Highcharts.Point} from\n         *        Connection runs from this Point.\n         *\n         * @param {Highcharts.Point} to\n         *        Connection runs to this Point.\n         *\n         * @param {Highcharts.ConnectorsOptions} [options]\n         *        Connection options.\n         */\n        class Connection {\n            constructor(from, to, options) {\n                /* *\n                *\n                * Properties\n                *\n                * */\n                this.chart = void 0;\n                this.fromPoint = void 0;\n                this.graphics = void 0;\n                this.pathfinder = void 0;\n                this.toPoint = void 0;\n                this.init(from, to, options);\n            }\n            /**\n             * Initialize the Connection object. Used as constructor only.\n             *\n             * @function Highcharts.Connection#init\n             *\n             * @param {Highcharts.Point} from\n             *        Connection runs from this Point.\n             *\n             * @param {Highcharts.Point} to\n             *        Connection runs to this Point.\n             *\n             * @param {Highcharts.ConnectorsOptions} [options]\n             *        Connection options.\n             */\n            init(from, to, options) {\n                this.fromPoint = from;\n                this.toPoint = to;\n                this.options = options;\n                this.chart = from.series.chart;\n                this.pathfinder = this.chart.pathfinder;\n            }\n            /**\n             * Add (or update) this connection's path on chart. Stores reference to the\n             * created element on this.graphics.path.\n             *\n             * @function Highcharts.Connection#renderPath\n             *\n             * @param {Highcharts.SVGPathArray} path\n             *        Path to render, in array format. E.g. ['M', 0, 0, 'L', 10, 10]\n             *\n             * @param {Highcharts.SVGAttributes} [attribs]\n             *        SVG attributes for the path.\n             *\n             * @param {Partial<Highcharts.AnimationOptionsObject>} [animation]\n             *        Animation options for the rendering.\n             */\n            renderPath(path, attribs, animation) {\n                const connection = this, chart = this.chart, styledMode = chart.styledMode, pathfinder = chart.pathfinder, animate = !chart.options.chart.forExport && animation !== false, anim = {};\n                let pathGraphic = connection.graphics && connection.graphics.path;\n                // Add the SVG element of the pathfinder group if it doesn't exist\n                if (!pathfinder.group) {\n                    pathfinder.group = chart.renderer.g()\n                        .addClass('highcharts-pathfinder-group')\n                        .attr({ zIndex: -1 })\n                        .add(chart.seriesGroup);\n                }\n                // Shift the group to compensate for plot area.\n                // Note: Do this always (even when redrawing a path) to avoid issues\n                // when updating chart in a way that changes plot metrics.\n                pathfinder.group.translate(chart.plotLeft, chart.plotTop);\n                // Create path if does not exist\n                if (!(pathGraphic && pathGraphic.renderer)) {\n                    pathGraphic = chart.renderer.path()\n                        .add(pathfinder.group);\n                    if (!styledMode) {\n                        pathGraphic.attr({\n                            opacity: 0\n                        });\n                    }\n                }\n                // Set path attribs and animate to the new path\n                pathGraphic.attr(attribs);\n                anim.d = path;\n                if (!styledMode) {\n                    anim.opacity = 1;\n                }\n                pathGraphic[animate ? 'animate' : 'attr'](anim, animation);\n                // Store reference on connection\n                this.graphics = this.graphics || {};\n                this.graphics.path = pathGraphic;\n            }\n            /**\n             * Calculate and add marker graphics for connection to the chart. The\n             * created/updated elements are stored on this.graphics.start and\n             * this.graphics.end.\n             *\n             * @function Highcharts.Connection#addMarker\n             *\n             * @param {string} type\n             *        Marker type, either 'start' or 'end'.\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} options\n             *        All options for this marker. Not calculated or merged with other\n             *        options.\n             *\n             * @param {Highcharts.SVGPathArray} path\n             *        Connection path in array format. This is used to calculate the\n             *        rotation angle of the markers.\n             */\n            addMarker(type, options, path) {\n                const connection = this, chart = connection.fromPoint.series.chart, pathfinder = chart.pathfinder, renderer = chart.renderer, point = (type === 'start' ?\n                    connection.fromPoint :\n                    connection.toPoint), anchor = point.getPathfinderAnchorPoint(options);\n                let markerVector, radians, rotation, box, width, height, pathVector, segment;\n                if (!options.enabled) {\n                    return;\n                }\n                // Last vector before start/end of path, used to get angle\n                if (type === 'start') {\n                    segment = path[1];\n                }\n                else { // 'end'\n                    segment = path[path.length - 2];\n                }\n                if (segment && segment[0] === 'M' || segment[0] === 'L') {\n                    pathVector = {\n                        x: segment[1],\n                        y: segment[2]\n                    };\n                    // Get angle between pathVector and anchor point and use it to\n                    // create marker position.\n                    radians = point.getRadiansToVector(pathVector, anchor);\n                    markerVector = point.getMarkerVector(radians, options.radius, anchor);\n                    // Rotation of marker is calculated from angle between pathVector\n                    // and markerVector.\n                    // (Note:\n                    //  Used to recalculate radians between markerVector and pathVector,\n                    //  but this should be the same as between pathVector and anchor.)\n                    rotation = -radians / deg2rad;\n                    if (options.width && options.height) {\n                        width = options.width;\n                        height = options.height;\n                    }\n                    else {\n                        width = height = options.radius * 2;\n                    }\n                    // Add graphics object if it does not exist\n                    connection.graphics = connection.graphics || {};\n                    box = {\n                        x: markerVector.x - (width / 2),\n                        y: markerVector.y - (height / 2),\n                        width: width,\n                        height: height,\n                        rotation: rotation,\n                        rotationOriginX: markerVector.x,\n                        rotationOriginY: markerVector.y\n                    };\n                    if (!connection.graphics[type]) {\n                        // Create new marker element\n                        connection.graphics[type] = renderer\n                            .symbol(options.symbol)\n                            .addClass('highcharts-point-connecting-path-' + type + '-marker' +\n                            ' highcharts-color-' + this.fromPoint.colorIndex)\n                            .attr(box)\n                            .add(pathfinder.group);\n                        if (!renderer.styledMode) {\n                            connection.graphics[type].attr({\n                                fill: options.color || connection.fromPoint.color,\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth,\n                                opacity: 0\n                            })\n                                .animate({\n                                opacity: 1\n                            }, point.series.options.animation);\n                        }\n                    }\n                    else {\n                        connection.graphics[type].animate(box);\n                    }\n                }\n            }\n            /**\n             * Calculate and return connection path.\n             * Note: Recalculates chart obstacles on demand if they aren't calculated.\n             *\n             * @function Highcharts.Connection#getPath\n             *\n             * @param {Highcharts.ConnectorsOptions} options\n             *        Connector options. Not calculated or merged with other options.\n             *\n             * @return {object|undefined}\n             *         Calculated SVG path data in array format.\n             */\n            getPath(options) {\n                const pathfinder = this.pathfinder, chart = this.chart, algorithm = pathfinder.algorithms[options.type];\n                let chartObstacles = pathfinder.chartObstacles;\n                if (typeof algorithm !== 'function') {\n                    error('\"' + options.type + '\" is not a Pathfinder algorithm.');\n                    return {\n                        path: [],\n                        obstacles: []\n                    };\n                }\n                // This function calculates obstacles on demand if they don't exist\n                if (algorithm.requiresObstacles && !chartObstacles) {\n                    chartObstacles =\n                        pathfinder.chartObstacles =\n                            pathfinder.getChartObstacles(options);\n                    // If the algorithmMargin was computed, store the result in default\n                    // options.\n                    chart.options.connectors.algorithmMargin =\n                        options.algorithmMargin;\n                    // Cache some metrics too\n                    pathfinder.chartObstacleMetrics =\n                        pathfinder.getObstacleMetrics(chartObstacles);\n                }\n                // Get the SVG path\n                return algorithm(\n                // From\n                this.fromPoint.getPathfinderAnchorPoint(options.startMarker), \n                // To\n                this.toPoint.getPathfinderAnchorPoint(options.endMarker), merge({\n                    chartObstacles: chartObstacles,\n                    lineObstacles: pathfinder.lineObstacles || [],\n                    obstacleMetrics: pathfinder.chartObstacleMetrics,\n                    hardBounds: {\n                        xMin: 0,\n                        xMax: chart.plotWidth,\n                        yMin: 0,\n                        yMax: chart.plotHeight\n                    },\n                    obstacleOptions: {\n                        margin: options.algorithmMargin\n                    },\n                    startDirectionX: pathfinder.getAlgorithmStartDirection(options.startMarker)\n                }, options));\n            }\n            /**\n             * (re)Calculate and (re)draw the connection.\n             *\n             * @function Highcharts.Connection#render\n             */\n            render() {\n                const connection = this, fromPoint = connection.fromPoint, series = fromPoint.series, chart = series.chart, pathfinder = chart.pathfinder, attribs = {};\n                let options = merge(chart.options.connectors, series.options.connectors, fromPoint.options.connectors, connection.options);\n                // Set path attribs\n                if (!chart.styledMode) {\n                    attribs.stroke = options.lineColor || fromPoint.color;\n                    attribs['stroke-width'] = options.lineWidth;\n                    if (options.dashStyle) {\n                        attribs.dashstyle = options.dashStyle;\n                    }\n                }\n                attribs['class'] = // eslint-disable-line dot-notation\n                    'highcharts-point-connecting-path ' +\n                        'highcharts-color-' + fromPoint.colorIndex;\n                options = merge(attribs, options);\n                // Set common marker options\n                if (!defined(options.marker.radius)) {\n                    options.marker.radius = min(max(Math.ceil((options.algorithmMargin || 8) / 2) - 1, 1), 5);\n                }\n                // Get the path\n                const pathResult = connection.getPath(options), path = pathResult.path;\n                // Always update obstacle storage with obstacles from this path.\n                // We don't know if future calls will need this for their algorithm.\n                if (pathResult.obstacles) {\n                    pathfinder.lineObstacles =\n                        pathfinder.lineObstacles || [];\n                    pathfinder.lineObstacles =\n                        pathfinder.lineObstacles.concat(pathResult.obstacles);\n                }\n                // Add the calculated path to the pathfinder group\n                connection.renderPath(path, attribs, series.options.animation);\n                // Render the markers\n                connection.addMarker('start', merge(options.marker, options.startMarker), path);\n                connection.addMarker('end', merge(options.marker, options.endMarker), path);\n            }\n            /**\n             * Destroy connection by destroying the added graphics elements.\n             *\n             * @function Highcharts.Connection#destroy\n             */\n            destroy() {\n                if (this.graphics) {\n                    objectEach(this.graphics, function (val) {\n                        val.destroy();\n                    });\n                    delete this.graphics;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The default pathfinder algorithm to use for a chart. It is possible to define\n         * your own algorithms by adding them to the\n         * `Highcharts.Pathfinder.prototype.algorithms`\n         * object before the chart has been created.\n         *\n         * The default algorithms are as follows:\n         *\n         * `straight`:      Draws a straight line between the connecting\n         *                  points. Does not avoid other points when drawing.\n         *\n         * `simpleConnect`: Finds a path between the points using right angles\n         *                  only. Takes only starting/ending points into\n         *                  account, and will not avoid other points.\n         *\n         * `fastAvoid`:     Finds a path between the points using right angles\n         *                  only. Will attempt to avoid other points, but its\n         *                  focus is performance over accuracy. Works well with\n         *                  less dense datasets.\n         *\n         * @typedef {\"fastAvoid\"|\"simpleConnect\"|\"straight\"|string} Highcharts.PathfinderTypeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Connection;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisZoom(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            if (axis.isXAxis && ((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled))) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y') {\n                    e.zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom\n                    // selection, then when the reset button is pressed, revert to\n                    // this state. This should apply only if the chart is\n                    // initialized with a range (#6612), otherwise zoom all the way\n                    // out.\n                }\n                else if (((!isTouchDevice && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    if (defined(e.newMin)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                    }\n                    else if (previousZoom) {\n                        e.newMin = previousZoom[0];\n                        e.newMax = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof e.zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'zoom', onAxisZoom);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, chart = axis.chart;\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                const fixedRange = chart && chart.fixedRange, halfPointRange = (axis.pointRange || 0) / 2;\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                // Make sure panning to the edges does not decrease the zoomed range\n                if (fixedRange && axis.dataMin && axis.dataMax) {\n                    if (newMax >= axis.dataMax) {\n                        newMin = correctFloat(axis.dataMax - fixedRange);\n                    }\n                    if (newMin <= axis.dataMin) {\n                        newMax = correctFloat(axis.dataMin + fixedRange);\n                    }\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null,\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * xAxis.maxPadding, but value is set in milliseconds.\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @since   6.0.0\n                 */\n                overscroll: 0,\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = Math.round(halfWidth / 3) + 0.5;\n            height = options.height || height;\n            return [\n                ['M', -halfWidth - 1, 0.5],\n                ['L', halfWidth, 0.5],\n                ['L', halfWidth, height + 0.5],\n                ['L', -halfWidth - 1, height + 0.5],\n                ['L', -halfWidth - 1, 0.5],\n                ['M', -markerPosition, 4],\n                ['L', -markerPosition, height - 3],\n                ['M', markerPosition - 1, 4],\n                ['L', markerPosition - 1, height - 3]\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, setOptions } = D;\n        const { isTouchDevice } = H;\n        const { getRendererType } = RendererRegistry;\n        const { addEvent, extend, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, NavigatorClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            NavigatorConstructor = NavigatorClass;\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n            if (U.pushUnique(composedMembers, SeriesClass)) {\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n            }\n            if (U.pushUnique(composedMembers, getRendererType)) {\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n            }\n            if (U.pushUnique(composedMembers, setOptions)) {\n                extend(defaultOptions, { navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // false if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2023 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n            *\n            *  Constants\n            *\n            * */\n            const composedMembers = [];\n            /* *\n            *\n            *  Variables\n            *\n            * */\n            let Scrollbar;\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composedMembers, ScrollbarClass)) {\n                    Scrollbar = ScrollbarClass;\n                }\n                if (pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.min === axis.max // #10733\n                    ) {\n                        // Default action: when extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can  also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)',\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chart = void 0;\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.group = void 0;\n                this.options = void 0;\n                this.renderer = void 0;\n                this.scrollbar = void 0;\n                this.scrollbarButtons = [];\n                this.scrollbarGroup = void 0;\n                this.scrollbarLeft = 0;\n                this.scrollbarRifles = void 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.track = void 0;\n                this.trackBorderWidth = 1;\n                this.userOptions = void 0;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                // Mouse events\n                const _events = [\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler]\n                ];\n                // Touch events\n                if (H.hasTouch) {\n                    _events.push([bar, 'touchstart', mouseDownHandler], [bar.ownerDocument, 'touchmove', mouseMoveHandler], [bar.ownerDocument, 'touchend', mouseUpHandler]);\n                }\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // minWidth distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        // +1 to compensate for crispifying in rect method\n                        width: size + 1,\n                        height: size + 1,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer.normalize(e), mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer.normalize(e), options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scorllbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -trackBorderWidth % 2 / 2,\n                    y: -trackBorderWidth % 2 / 2\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-scroller.scrollbarStrokeWidth % 2 / 2, -scroller.scrollbarStrokeWidth % 2 / 2);\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer.normalize(e), range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Utilities.js']], function (Axis, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { hasTouch, isTouchDevice } = H;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, SeriesClass) {\n                NavigatorComposition.compose(AxisClass, ChartClass, Navigator, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.baseSeries = void 0;\n                this.chart = void 0;\n                this.handles = void 0;\n                this.height = void 0;\n                this.left = void 0;\n                this.navigatorEnabled = void 0;\n                this.navigatorGroup = void 0;\n                this.navigatorOptions = void 0;\n                this.navigatorSeries = void 0;\n                this.navigatorSize = void 0;\n                this.opposite = void 0;\n                this.outline = void 0;\n                this.range = void 0;\n                this.rendered = void 0;\n                this.scrollbarHeight = 0;\n                this.scrollButtonSize = void 0;\n                this.shades = void 0;\n                this.size = void 0;\n                this.top = void 0;\n                this.xAxis = void 0;\n                this.yAxis = void 0;\n                this.zoomedMax = void 0;\n                this.zoomedMin = void 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin],\n                        ['M', left, zoomedMax],\n                        ['L', left + height, zoomedMax],\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // left\n                        ['M', left, lineTop],\n                        // upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            navigatorTop + halfOutline\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup = renderer\n                    .g('navigator')\n                    .attr({\n                    zIndex: 8,\n                    visibility: 'hidden'\n                })\n                    .add();\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = renderer.rect()\n                        .addClass('highcharts-navigator-mask' +\n                        (index === 1 ? '-inside' : '-outside'))\n                        .add(navigatorGroup);\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ?\n                                navigatorOptions.maskFill :\n                                'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                    navigator.shades[index] = shade;\n                });\n                // Create the outline:\n                navigator.outline = renderer.path()\n                    .addClass('highcharts-navigator-outline')\n                    .add(navigatorGroup);\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles && navigatorOptions.handles.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        navigator.handles[index] = renderer.symbol(handlesOptions.symbols[index], -width / 2 - 1, 0, width, height, handlesOptions);\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        // zIndex = 6 for right handle, 7 for left.\n                        // Can't be 10, because of the tooltip in inverted chart #2908\n                        navigator.handles[index].attr({ zIndex: 7 - index })\n                            .addClass('highcharts-navigator-handle ' +\n                            'highcharts-navigator-handle-' +\n                            ['left', 'right'][index]).add(navigatorGroup);\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options) {\n                // Remove references to old navigator series in base series\n                (this.series || []).forEach((series) => {\n                    if (series.baseSeries) {\n                        delete series.baseSeries.navigatorSeries;\n                    }\n                });\n                // Destroy and rebuild navigator\n                this.destroy();\n                const chartOptions = this.chart.options;\n                merge(true, chartOptions.navigator, options);\n                this.init(this.chart);\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // in case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                // Add mouse move and mouseup events. These are bind to doc/container,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                eventsToUnbind.push(addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler));\n                // Touch events\n                if (hasTouch) {\n                    eventsToUnbind.push(addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                    eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                }\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer.normalize(e);\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // it has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, null, // auto animation\n                            { trigger: 'navigator' });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer.normalize(e);\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.fixedRange = null;\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer.normalize(e);\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // outside left\n                            chartX = dragOffset;\n                            // outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        chart.xAxis[0].setExtremes(Math.min(ext.min, ext.max), Math.max(ext.min, ext.max), true, \n                        // Run animation when clicking buttons, scrollbar track etc,\n                        // but not when dragging handles or scrollbar\n                        navigator.hasDragged ? false : null, {\n                            trigger: 'navigator',\n                            triggerOp: 'navigator-drag',\n                            DOMEvent: DOMEvent // #1838\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    // an x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // inherit base xAxis' break and ordinal options\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal\n                    }, navigatorOptions.xAxis, {\n                        id: 'navigator-x-axis',\n                        yAxis: 'navigator-y-axis',\n                        type: 'datetime',\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true,\n                        startOnTick: false,\n                        endOnTick: false,\n                        minPadding: 0,\n                        maxPadding: 0,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets: [scrollButtonSize, 0, -scrollButtonSize, 0],\n                        width: height\n                    } : {\n                        offsets: [0, -scrollButtonSize, 0, scrollButtonSize],\n                        height: height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        id: 'navigator-y-axis',\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false),\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // in case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // from pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // from value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null,\n                    linkedTo: null,\n                    group: 'nav',\n                    padXAxis: false,\n                    xAxis: 'navigator-x-axis',\n                    yAxis: 'navigator-y-axis',\n                    showInLegend: false,\n                    stacking: void 0,\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitily\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.options.overscroll, 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    let chart = this, navigator = chart.navigator, marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Series/PathUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const getLinkPath = {\n            'default': getDefaultPath,\n            straight: getStraightPath,\n            curved: getCurvedPath\n        };\n        function getDefaultPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, radius, parentVisible } = pathParams;\n            const path = [\n                ['M', x1, y1],\n                ['L', x1, y1],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2]\n            ];\n            return parentVisible ?\n                applyRadius([\n                    ['M', x1, y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y2],\n                    ['L', x2, y2]\n                ], radius) :\n                path;\n        }\n        function getStraightPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ? [\n                ['M', x1, y1],\n                ['L', x1 + width * (inverted ? -1 : 1), y2],\n                ['L', x2, y2]\n            ] : [\n                ['M', x1, y1],\n                ['L', x1, y2],\n                ['L', x1, y2]\n            ];\n        }\n        function getCurvedPath(pathParams) {\n            const { x1, y1, x2, y2, offset = 0, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ?\n                [\n                    ['M', x1, y1],\n                    [\n                        'C',\n                        x1 + offset,\n                        y1,\n                        x1 - offset + width * (inverted ? -1 : 1),\n                        y2,\n                        x1 + width * (inverted ? -1 : 1),\n                        y2\n                    ],\n                    ['L', x2, y2]\n                ] :\n                [\n                    ['M', x1, y1],\n                    ['C', x1, y1, x1, y2, x1, y2],\n                    ['L', x2, y2]\n                ];\n        }\n        /**\n         * General function to apply corner radius to a path\n         * @private\n         */\n        function applyRadius(path, r) {\n            const d = [];\n            for (let i = 0; i < path.length; i++) {\n                const x = path[i][1];\n                const y = path[i][2];\n                if (typeof x === 'number' && typeof y === 'number') {\n                    // moveTo\n                    if (i === 0) {\n                        d.push(['M', x, y]);\n                    }\n                    else if (i === path.length - 1) {\n                        d.push(['L', x, y]);\n                        // curveTo\n                    }\n                    else if (r) {\n                        const prevSeg = path[i - 1];\n                        const nextSeg = path[i + 1];\n                        if (prevSeg && nextSeg) {\n                            const x1 = prevSeg[1], y1 = prevSeg[2], x2 = nextSeg[1], y2 = nextSeg[2];\n                            // Only apply to breaks\n                            if (typeof x1 === 'number' &&\n                                typeof x2 === 'number' &&\n                                typeof y1 === 'number' &&\n                                typeof y2 === 'number' &&\n                                x1 !== x2 &&\n                                y1 !== y2) {\n                                const directionX = x1 < x2 ? 1 : -1, directionY = y1 < y2 ? 1 : -1;\n                                d.push([\n                                    'L',\n                                    x - directionX * Math.min(Math.abs(x - x1), r),\n                                    y - directionY * Math.min(Math.abs(y - y1), r)\n                                ], [\n                                    'C',\n                                    x,\n                                    y,\n                                    x,\n                                    y,\n                                    x + directionX * Math.min(Math.abs(x - x2), r),\n                                    y + directionY * Math.min(Math.abs(y - y2), r)\n                                ]);\n                            }\n                        }\n                        // lineTo\n                    }\n                    else {\n                        d.push(['L', x, y]);\n                    }\n                }\n            }\n            return d;\n        }\n        const PathUtilities = {\n            applyRadius,\n            getLinkPath\n        };\n\n        return PathUtilities;\n    });\n    _registerModule(_modules, 'Gantt/PathfinderAlgorithms.js', [_modules['Series/PathUtilities.js'], _modules['Core/Utilities.js']], function (PathUtilities, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Author: Ã˜ystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const { min, max, abs } = Math;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get index of last obstacle before xMin. Employs a type of binary search, and\n         * thus requires that obstacles are sorted by xMin value.\n         *\n         * @private\n         * @function findLastObstacleBefore\n         *\n         * @param {Array<object>} obstacles\n         *        Array of obstacles to search in.\n         *\n         * @param {number} xMin\n         *        The xMin threshold.\n         *\n         * @param {number} [startIx]\n         *        Starting index to search from. Must be within array range.\n         *\n         * @return {number}\n         *         The index of the last obstacle element before xMin.\n         */\n        function findLastObstacleBefore(obstacles, xMin, startIx) {\n            const min = xMin - 0.0000001; // Make sure we include all obstacles at xMin\n            let left = startIx || 0, // Left limit\n            right = obstacles.length - 1, // Right limit\n            cursor, cmp;\n            while (left <= right) {\n                cursor = (right + left) >> 1;\n                cmp = min - obstacles[cursor].xMin;\n                if (cmp > 0) {\n                    left = cursor + 1;\n                }\n                else if (cmp < 0) {\n                    right = cursor - 1;\n                }\n                else {\n                    return cursor;\n                }\n            }\n            return left > 0 ? left - 1 : 0;\n        }\n        /**\n         * Test if a point lays within an obstacle.\n         *\n         * @private\n         * @function pointWithinObstacle\n         *\n         * @param {Object} obstacle\n         *        Obstacle to test.\n         *\n         * @param {Highcharts.Point} point\n         *        Point with x/y props.\n         *\n         * @return {boolean}\n         *         Whether point is within the obstacle or not.\n         */\n        function pointWithinObstacle(obstacle, point) {\n            return (point.x <= obstacle.xMax &&\n                point.x >= obstacle.xMin &&\n                point.y <= obstacle.yMax &&\n                point.y >= obstacle.yMin);\n        }\n        /**\n         * Find the index of an obstacle that wraps around a point.\n         * Returns -1 if not found.\n         *\n         * @private\n         * @function findObstacleFromPoint\n         *\n         * @param {Array<object>} obstacles\n         *        Obstacles to test.\n         *\n         * @param {Highcharts.Point} point\n         *        Point with x/y props.\n         *\n         * @return {number}\n         *         Ix of the obstacle in the array, or -1 if not found.\n         */\n        function findObstacleFromPoint(obstacles, point) {\n            let i = findLastObstacleBefore(obstacles, point.x + 1) + 1;\n            while (i--) {\n                if (obstacles[i].xMax >= point.x &&\n                    // Optimization using lazy evaluation\n                    pointWithinObstacle(obstacles[i], point)) {\n                    return i;\n                }\n            }\n            return -1;\n        }\n        /**\n         * Get SVG path array from array of line segments.\n         *\n         * @private\n         * @function pathFromSegments\n         *\n         * @param {Array<object>} segments\n         *        The segments to build the path from.\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         SVG path array as accepted by the SVG Renderer.\n         */\n        function pathFromSegments(segments) {\n            const path = [];\n            if (segments.length) {\n                path.push(['M', segments[0].start.x, segments[0].start.y]);\n                for (let i = 0; i < segments.length; ++i) {\n                    path.push(['L', segments[i].end.x, segments[i].end.y]);\n                }\n            }\n            return path;\n        }\n        /**\n         * Limits obstacle max/mins in all directions to bounds. Modifies input\n         * obstacle.\n         *\n         * @private\n         * @function limitObstacleToBounds\n         *\n         * @param {Object} obstacle\n         *        Obstacle to limit.\n         *\n         * @param {Object} bounds\n         *        Bounds to use as limit.\n         *\n         * @return {void}\n         */\n        function limitObstacleToBounds(obstacle, bounds) {\n            obstacle.yMin = max(obstacle.yMin, bounds.yMin);\n            obstacle.yMax = min(obstacle.yMax, bounds.yMax);\n            obstacle.xMin = max(obstacle.xMin, bounds.xMin);\n            obstacle.xMax = min(obstacle.xMax, bounds.xMax);\n        }\n        /**\n         * Get an SVG path from a starting coordinate to an ending coordinate.\n         * Draws a straight line.\n         *\n         * @function Highcharts.Pathfinder.algorithms.straight\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        function straight(start, end) {\n            return {\n                path: [\n                    ['M', start.x, start.y],\n                    ['L', end.x, end.y]\n                ],\n                obstacles: [{ start: start, end: end }]\n            };\n        }\n        /**\n         * Find a path from a starting coordinate to an ending coordinate, using\n         * right angles only, and taking only starting/ending obstacle into\n         * consideration.\n         *\n         * @function Highcharts.Pathfinder.algorithms.simpleConnect\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @param {Object} options\n         *        Options for the algorithm:\n         *        - chartObstacles: Array of chart obstacles to avoid\n         *        - startDirectionX: Optional. True if starting in the X direction.\n         *          If not provided, the algorithm starts in the direction that is\n         *          the furthest between start/end.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        const simpleConnect = function (start, end, options) {\n            const segments = [], chartObstacles = options.chartObstacles, startObstacleIx = findObstacleFromPoint(chartObstacles, start), endObstacleIx = findObstacleFromPoint(chartObstacles, end);\n            let endSegment, dir = pick(options.startDirectionX, abs(end.x - start.x) > abs(end.y - start.y)) ? 'x' : 'y', startObstacle, endObstacle, waypoint, useMax, endPoint;\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Return a clone of a point with a property set from a target object,\n             * optionally with an offset\n             * @private\n             */\n            function copyFromPoint(from, fromKey, to, toKey, offset) {\n                const point = {\n                    x: from.x,\n                    y: from.y\n                };\n                point[fromKey] = to[toKey || fromKey] + (offset || 0);\n                return point;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Return waypoint outside obstacle.\n             * @private\n             */\n            function getMeOut(obstacle, point, direction) {\n                const useMax = abs(point[direction] - obstacle[direction + 'Min']) >\n                    abs(point[direction] - obstacle[direction + 'Max']);\n                return copyFromPoint(point, direction, obstacle, direction + (useMax ? 'Max' : 'Min'), useMax ? 1 : -1);\n            }\n            // Pull out end point\n            if (endObstacleIx > -1) {\n                endObstacle = chartObstacles[endObstacleIx];\n                waypoint = getMeOut(endObstacle, end, dir);\n                endSegment = {\n                    start: waypoint,\n                    end: end\n                };\n                endPoint = waypoint;\n            }\n            else {\n                endPoint = end;\n            }\n            // If an obstacle envelops the start point, add a segment to get out,\n            // and around it.\n            if (startObstacleIx > -1) {\n                startObstacle = chartObstacles[startObstacleIx];\n                waypoint = getMeOut(startObstacle, start, dir);\n                segments.push({\n                    start: start,\n                    end: waypoint\n                });\n                // If we are going back again, switch direction to get around start\n                // obstacle.\n                if (\n                // Going towards max from start:\n                waypoint[dir] >= start[dir] ===\n                    // Going towards min to end:\n                    waypoint[dir] >= endPoint[dir]) {\n                    dir = dir === 'y' ? 'x' : 'y';\n                    useMax = start[dir] < end[dir];\n                    segments.push({\n                        start: waypoint,\n                        end: copyFromPoint(waypoint, dir, startObstacle, dir + (useMax ? 'Max' : 'Min'), useMax ? 1 : -1)\n                    });\n                    // Switch direction again\n                    dir = dir === 'y' ? 'x' : 'y';\n                }\n            }\n            // We are around the start obstacle. Go towards the end in one\n            // direction.\n            const prevWaypoint = segments.length ?\n                segments[segments.length - 1].end :\n                start;\n            waypoint = copyFromPoint(prevWaypoint, dir, endPoint);\n            segments.push({\n                start: prevWaypoint,\n                end: waypoint\n            });\n            // Final run to end point in the other direction\n            dir = dir === 'y' ? 'x' : 'y';\n            const waypoint2 = copyFromPoint(waypoint, dir, endPoint);\n            segments.push({\n                start: waypoint,\n                end: waypoint2\n            });\n            // Finally add the endSegment\n            segments.push(endSegment);\n            const path = PathUtilities.applyRadius(pathFromSegments(segments), options.radius);\n            return {\n                path,\n                obstacles: segments\n            };\n        };\n        simpleConnect.requiresObstacles = true;\n        /**\n         * Find a path from a starting coordinate to an ending coordinate, taking\n         * obstacles into consideration. Might not always find the optimal path,\n         * but is fast, and usually good enough.\n         *\n         * @function Highcharts.Pathfinder.algorithms.fastAvoid\n         *\n         * @param {Highcharts.PositionObject} start\n         *        Starting coordinate, object with x/y props.\n         *\n         * @param {Highcharts.PositionObject} end\n         *        Ending coordinate, object with x/y props.\n         *\n         * @param {Object} options\n         *        Options for the algorithm.\n         *        - chartObstacles:  Array of chart obstacles to avoid\n         *        - lineObstacles:   Array of line obstacles to jump over\n         *        - obstacleMetrics: Object with metrics of chartObstacles cached\n         *        - hardBounds:      Hard boundaries to not cross\n         *        - obstacleOptions: Options for the obstacles, including margin\n         *        - startDirectionX: Optional. True if starting in the X direction.\n         *                           If not provided, the algorithm starts in the\n         *                           direction that is the furthest between\n         *                           start/end.\n         *\n         * @return {Object}\n         *         An object with the SVG path in Array form as accepted by the SVG\n         *         renderer, as well as an array of new obstacles making up this\n         *         path.\n         */\n        function fastAvoid(start, end, options) {\n            /*\n                Algorithm rules/description\n                - Find initial direction\n                - Determine soft/hard max for each direction.\n                - Move along initial direction until obstacle.\n                - Change direction.\n                - If hitting obstacle, first try to change length of previous line\n                    before changing direction again.\n\n                Soft min/max x = start/destination x +/- widest obstacle + margin\n                Soft min/max y = start/destination y +/- tallest obstacle + margin\n\n                @todo:\n                    - Make retrospective, try changing prev segment to reduce\n                        corners\n                    - Fix logic for breaking out of end-points - not always picking\n                        the best direction currently\n                    - When going around the end obstacle we should not always go the\n                        shortest route, rather pick the one closer to the end point\n            */\n            const dirIsX = pick(options.startDirectionX, abs(end.x - start.x) > abs(end.y - start.y)), dir = dirIsX ? 'x' : 'y', endSegments = [], \n            // Boundaries to stay within. If beyond soft boundary, prefer to\n            // change direction ASAP. If at hard max, always change immediately.\n            metrics = options.obstacleMetrics, softMinX = min(start.x, end.x) - metrics.maxWidth - 10, softMaxX = max(start.x, end.x) + metrics.maxWidth + 10, softMinY = min(start.y, end.y) - metrics.maxHeight - 10, softMaxY = max(start.y, end.y) + metrics.maxHeight + 10;\n            let segments, useMax, extractedEndPoint, forceObstacleBreak = false, // Used in clearPathTo to keep track of\n            // when to force break through an obstacle.\n            // Obstacles\n            chartObstacles = options.chartObstacles, endObstacleIx = findLastObstacleBefore(chartObstacles, softMaxX);\n            const startObstacleIx = findLastObstacleBefore(chartObstacles, softMinX);\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * How far can you go between two points before hitting an obstacle?\n             * Does not work for diagonal lines (because it doesn't have to).\n             * @private\n             */\n            function pivotPoint(fromPoint, toPoint, directionIsX) {\n                const searchDirection = fromPoint.x < toPoint.x ? 1 : -1;\n                let firstPoint, lastPoint, highestPoint, lowestPoint;\n                if (fromPoint.x < toPoint.x) {\n                    firstPoint = fromPoint;\n                    lastPoint = toPoint;\n                }\n                else {\n                    firstPoint = toPoint;\n                    lastPoint = fromPoint;\n                }\n                if (fromPoint.y < toPoint.y) {\n                    lowestPoint = fromPoint;\n                    highestPoint = toPoint;\n                }\n                else {\n                    lowestPoint = toPoint;\n                    highestPoint = fromPoint;\n                }\n                // Go through obstacle range in reverse if toPoint is before\n                // fromPoint in the X-dimension.\n                let i = searchDirection < 0 ?\n                    // Searching backwards, start at last obstacle before last point\n                    min(findLastObstacleBefore(chartObstacles, lastPoint.x), chartObstacles.length - 1) :\n                    // Forwards. Since we're not sorted by xMax, we have to look\n                    // at all obstacles.\n                    0;\n                // Go through obstacles in this X range\n                while (chartObstacles[i] && (searchDirection > 0 && chartObstacles[i].xMin <= lastPoint.x ||\n                    searchDirection < 0 && chartObstacles[i].xMax >= firstPoint.x)) {\n                    // If this obstacle is between from and to points in a straight\n                    // line, pivot at the intersection.\n                    if (chartObstacles[i].xMin <= lastPoint.x &&\n                        chartObstacles[i].xMax >= firstPoint.x &&\n                        chartObstacles[i].yMin <= highestPoint.y &&\n                        chartObstacles[i].yMax >= lowestPoint.y) {\n                        if (directionIsX) {\n                            return {\n                                y: fromPoint.y,\n                                x: fromPoint.x < toPoint.x ?\n                                    chartObstacles[i].xMin - 1 :\n                                    chartObstacles[i].xMax + 1,\n                                obstacle: chartObstacles[i]\n                            };\n                        }\n                        // Else ...\n                        return {\n                            x: fromPoint.x,\n                            y: fromPoint.y < toPoint.y ?\n                                chartObstacles[i].yMin - 1 :\n                                chartObstacles[i].yMax + 1,\n                            obstacle: chartObstacles[i]\n                        };\n                    }\n                    i += searchDirection;\n                }\n                return toPoint;\n            }\n            /**\n             * Decide in which direction to dodge or get out of an obstacle.\n             * Considers desired direction, which way is shortest, soft and hard\n             * bounds.\n             *\n             * (? Returns a string, either xMin, xMax, yMin or yMax.)\n             *\n             * @private\n             * @function\n             *\n             * @param {Object} obstacle\n             *        Obstacle to dodge/escape.\n             *\n             * @param {Object} fromPoint\n             *        Point with x/y props that's dodging/escaping.\n             *\n             * @param {Object} toPoint\n             *        Goal point.\n             *\n             * @param {boolean} dirIsX\n             *        Dodge in X dimension.\n             *\n             * @param {Object} bounds\n             *        Hard and soft boundaries.\n             *\n             * @return {boolean}\n             *         Use max or not.\n             */\n            function getDodgeDirection(obstacle, fromPoint, toPoint, dirIsX, bounds) {\n                const softBounds = bounds.soft, hardBounds = bounds.hard, dir = dirIsX ? 'x' : 'y', toPointMax = { x: fromPoint.x, y: fromPoint.y }, toPointMin = { x: fromPoint.x, y: fromPoint.y }, maxOutOfSoftBounds = obstacle[dir + 'Max'] >=\n                    softBounds[dir + 'Max'], minOutOfSoftBounds = obstacle[dir + 'Min'] <=\n                    softBounds[dir + 'Min'], maxOutOfHardBounds = obstacle[dir + 'Max'] >=\n                    hardBounds[dir + 'Max'], minOutOfHardBounds = obstacle[dir + 'Min'] <=\n                    hardBounds[dir + 'Min'], \n                // Find out if we should prefer one direction over the other if\n                // we can choose freely\n                minDistance = abs(obstacle[dir + 'Min'] - fromPoint[dir]), maxDistance = abs(obstacle[dir + 'Max'] - fromPoint[dir]);\n                let // If it's a small difference, pick the one leading towards dest\n                // point. Otherwise pick the shortest distance\n                useMax = abs(minDistance - maxDistance) < 10 ?\n                    fromPoint[dir] < toPoint[dir] :\n                    maxDistance < minDistance;\n                // Check if we hit any obstacles trying to go around in either\n                // direction.\n                toPointMin[dir] = obstacle[dir + 'Min'];\n                toPointMax[dir] = obstacle[dir + 'Max'];\n                const minPivot = pivotPoint(fromPoint, toPointMin, dirIsX)[dir] !==\n                    toPointMin[dir], maxPivot = pivotPoint(fromPoint, toPointMax, dirIsX)[dir] !==\n                    toPointMax[dir];\n                useMax = minPivot ?\n                    (maxPivot ? useMax : true) :\n                    (maxPivot ? false : useMax);\n                // `useMax` now contains our preferred choice, bounds not taken into\n                // account. If both or neither direction is out of bounds we want to\n                // use this.\n                // Deal with soft bounds\n                useMax = minOutOfSoftBounds ?\n                    (maxOutOfSoftBounds ? useMax : true) : // Out on min\n                    (maxOutOfSoftBounds ? false : useMax); // Not out on min\n                // Deal with hard bounds\n                useMax = minOutOfHardBounds ?\n                    (maxOutOfHardBounds ? useMax : true) : // Out on min\n                    (maxOutOfHardBounds ? false : useMax); // Not out on min\n                return useMax;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Find a clear path between point.\n             * @private\n             */\n            function clearPathTo(fromPoint, toPoint, dirIsX) {\n                // Don't waste time if we've hit goal\n                if (fromPoint.x === toPoint.x && fromPoint.y === toPoint.y) {\n                    return [];\n                }\n                const dir = dirIsX ? 'x' : 'y', obstacleMargin = options.obstacleOptions.margin, bounds = {\n                    soft: {\n                        xMin: softMinX,\n                        xMax: softMaxX,\n                        yMin: softMinY,\n                        yMax: softMaxY\n                    },\n                    hard: options.hardBounds\n                };\n                let pivot, segments, waypoint, waypointUseMax, envelopingObstacle, secondEnvelopingObstacle, envelopWaypoint;\n                // If fromPoint is inside an obstacle we have a problem. Break out\n                // by just going to the outside of this obstacle. We prefer to go to\n                // the nearest edge in the chosen direction.\n                envelopingObstacle =\n                    findObstacleFromPoint(chartObstacles, fromPoint);\n                if (envelopingObstacle > -1) {\n                    envelopingObstacle = chartObstacles[envelopingObstacle];\n                    waypointUseMax = getDodgeDirection(envelopingObstacle, fromPoint, toPoint, dirIsX, bounds);\n                    // Cut obstacle to hard bounds to make sure we stay within\n                    limitObstacleToBounds(envelopingObstacle, options.hardBounds);\n                    envelopWaypoint = dirIsX ? {\n                        y: fromPoint.y,\n                        x: envelopingObstacle[waypointUseMax ? 'xMax' : 'xMin'] +\n                            (waypointUseMax ? 1 : -1)\n                    } : {\n                        x: fromPoint.x,\n                        y: envelopingObstacle[waypointUseMax ? 'yMax' : 'yMin'] +\n                            (waypointUseMax ? 1 : -1)\n                    };\n                    // If we crashed into another obstacle doing this, we put the\n                    // waypoint between them instead\n                    secondEnvelopingObstacle = findObstacleFromPoint(chartObstacles, envelopWaypoint);\n                    if (secondEnvelopingObstacle > -1) {\n                        secondEnvelopingObstacle = chartObstacles[secondEnvelopingObstacle];\n                        // Cut obstacle to hard bounds\n                        limitObstacleToBounds(secondEnvelopingObstacle, options.hardBounds);\n                        // Modify waypoint to lay between obstacles\n                        envelopWaypoint[dir] = waypointUseMax ? max(envelopingObstacle[dir + 'Max'] - obstacleMargin + 1, (secondEnvelopingObstacle[dir + 'Min'] +\n                            envelopingObstacle[dir + 'Max']) / 2) :\n                            min((envelopingObstacle[dir + 'Min'] + obstacleMargin - 1), ((secondEnvelopingObstacle[dir + 'Max'] +\n                                envelopingObstacle[dir + 'Min']) / 2));\n                        // We are not going anywhere. If this happens for the first\n                        // time, do nothing. Otherwise, try to go to the extreme of\n                        // the obstacle pair in the current direction.\n                        if (fromPoint.x === envelopWaypoint.x &&\n                            fromPoint.y === envelopWaypoint.y) {\n                            if (forceObstacleBreak) {\n                                envelopWaypoint[dir] = waypointUseMax ?\n                                    max(envelopingObstacle[dir + 'Max'], secondEnvelopingObstacle[dir + 'Max']) + 1 :\n                                    min(envelopingObstacle[dir + 'Min'], secondEnvelopingObstacle[dir + 'Min']) - 1;\n                            }\n                            // Toggle on if off, and the opposite\n                            forceObstacleBreak = !forceObstacleBreak;\n                        }\n                        else {\n                            // This point is not identical to previous.\n                            // Clear break trigger.\n                            forceObstacleBreak = false;\n                        }\n                    }\n                    segments = [{\n                            start: fromPoint,\n                            end: envelopWaypoint\n                        }];\n                }\n                else { // If not enveloping, use standard pivot calculation\n                    pivot = pivotPoint(fromPoint, {\n                        x: dirIsX ? toPoint.x : fromPoint.x,\n                        y: dirIsX ? fromPoint.y : toPoint.y\n                    }, dirIsX);\n                    segments = [{\n                            start: fromPoint,\n                            end: {\n                                x: pivot.x,\n                                y: pivot.y\n                            }\n                        }];\n                    // Pivot before goal, use a waypoint to dodge obstacle\n                    if (pivot[dirIsX ? 'x' : 'y'] !== toPoint[dirIsX ? 'x' : 'y']) {\n                        // Find direction of waypoint\n                        waypointUseMax = getDodgeDirection(pivot.obstacle, pivot, toPoint, !dirIsX, bounds);\n                        // Cut waypoint to hard bounds\n                        limitObstacleToBounds(pivot.obstacle, options.hardBounds);\n                        waypoint = {\n                            x: dirIsX ?\n                                pivot.x :\n                                pivot.obstacle[waypointUseMax ? 'xMax' : 'xMin'] +\n                                    (waypointUseMax ? 1 : -1),\n                            y: dirIsX ?\n                                pivot.obstacle[waypointUseMax ? 'yMax' : 'yMin'] +\n                                    (waypointUseMax ? 1 : -1) :\n                                pivot.y\n                        };\n                        // We're changing direction here, store that to make sure we\n                        // also change direction when adding the last segment array\n                        // after handling waypoint.\n                        dirIsX = !dirIsX;\n                        segments = segments.concat(clearPathTo({\n                            x: pivot.x,\n                            y: pivot.y\n                        }, waypoint, dirIsX));\n                    }\n                }\n                // Get segments for the other direction too\n                // Recursion is our friend\n                segments = segments.concat(clearPathTo(segments[segments.length - 1].end, toPoint, !dirIsX));\n                return segments;\n            }\n            // eslint-disable-next-line valid-jsdoc\n            /**\n             * Extract point to outside of obstacle in whichever direction is\n             * closest. Returns new point outside obstacle.\n             * @private\n             */\n            function extractFromObstacle(obstacle, point, goalPoint) {\n                const dirIsX = min(obstacle.xMax - point.x, point.x - obstacle.xMin) <\n                    min(obstacle.yMax - point.y, point.y - obstacle.yMin), bounds = {\n                    soft: options.hardBounds,\n                    hard: options.hardBounds\n                }, useMax = getDodgeDirection(obstacle, point, goalPoint, dirIsX, bounds);\n                return dirIsX ? {\n                    y: point.y,\n                    x: obstacle[useMax ? 'xMax' : 'xMin'] + (useMax ? 1 : -1)\n                } : {\n                    x: point.x,\n                    y: obstacle[useMax ? 'yMax' : 'yMin'] + (useMax ? 1 : -1)\n                };\n            }\n            // Cut the obstacle array to soft bounds for optimization in large\n            // datasets.\n            chartObstacles =\n                chartObstacles.slice(startObstacleIx, endObstacleIx + 1);\n            // If an obstacle envelops the end point, move it out of there and add\n            // a little segment to where it was.\n            if ((endObstacleIx = findObstacleFromPoint(chartObstacles, end)) > -1) {\n                extractedEndPoint = extractFromObstacle(chartObstacles[endObstacleIx], end, start);\n                endSegments.push({\n                    end: end,\n                    start: extractedEndPoint\n                });\n                end = extractedEndPoint;\n            }\n            // If it's still inside one or more obstacles, get out of there by\n            // force-moving towards the start point.\n            while ((endObstacleIx = findObstacleFromPoint(chartObstacles, end)) > -1) {\n                useMax = end[dir] - start[dir] < 0;\n                extractedEndPoint = {\n                    x: end.x,\n                    y: end.y\n                };\n                extractedEndPoint[dir] = chartObstacles[endObstacleIx][useMax ? dir + 'Max' : dir + 'Min'] + (useMax ? 1 : -1);\n                endSegments.push({\n                    end: end,\n                    start: extractedEndPoint\n                });\n                end = extractedEndPoint;\n            }\n            // Find the path\n            segments = clearPathTo(start, end, dirIsX);\n            // Add the end-point segments\n            segments = segments.concat(endSegments.reverse());\n            return {\n                path: pathFromSegments(segments),\n                obstacles: segments\n            };\n        }\n        fastAvoid.requiresObstacles = true;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        // Define the available pathfinding algorithms.\n        // Algorithms take up to 3 arguments: starting point, ending point, and an\n        // options object.\n        const algorithms = {\n            fastAvoid,\n            straight,\n            simpleConnect\n        };\n\n        return algorithms;\n    });\n    _registerModule(_modules, 'Gantt/ConnectorsDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Defaults\n         *\n         * */\n        /*\n         @todo:\n             - Document how to write your own algorithms\n             - Consider adding a Point.pathTo method that wraps creating a connection\n               and rendering it\n        */\n        const connectorsDefaults = {\n            /**\n             * The Pathfinder module allows you to define connections between any two\n             * points, represented as lines - optionally with markers for the start\n             * and/or end points. Multiple algorithms are available for calculating how\n             * the connecting lines are drawn.\n             *\n             * Connector functionality requires Highcharts Gantt to be loaded. In Gantt\n             * charts, the connectors are used to draw dependencies between tasks.\n             *\n             * @see [dependency](series.gantt.data.dependency)\n             *\n             * @sample gantt/pathfinder/demo\n             *         Pathfinder connections\n             *\n             * @declare      Highcharts.ConnectorsOptions\n             * @product      gantt\n             * @optionparent connectors\n             */\n            connectors: {\n                /**\n                 * Enable connectors for this chart. Requires Highcharts Gantt.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     6.2.0\n                 * @apioption connectors.enabled\n                 */\n                /**\n                 * Set the default dash style for this chart's connecting lines.\n                 *\n                 * @type      {string}\n                 * @default   solid\n                 * @since     6.2.0\n                 * @apioption connectors.dashStyle\n                 */\n                /**\n                 * Set the default color for this chart's Pathfinder connecting lines.\n                 * Defaults to the color of the point being connected.\n                 *\n                 * @type      {Highcharts.ColorString}\n                 * @since     6.2.0\n                 * @apioption connectors.lineColor\n                 */\n                /**\n                 * Set the default pathfinder margin to use, in pixels. Some Pathfinder\n                 * algorithms attempt to avoid obstacles, such as other points in the\n                 * chart. These algorithms use this margin to determine how close lines\n                 * can be to an obstacle. The default is to compute this automatically\n                 * from the size of the obstacles in the chart.\n                 *\n                 * To draw connecting lines close to existing points, set this to a low\n                 * number. For more space around existing points, set this number\n                 * higher.\n                 *\n                 * @sample gantt/pathfinder/algorithm-margin\n                 *         Small algorithmMargin\n                 *\n                 * @type      {number}\n                 * @since     6.2.0\n                 * @apioption connectors.algorithmMargin\n                 */\n                /**\n                 * Set the default pathfinder algorithm to use for this chart. It is\n                 * possible to define your own algorithms by adding them to the\n                 * Highcharts.Pathfinder.prototype.algorithms object before the chart\n                 * has been created.\n                 *\n                 * The default algorithms are as follows:\n                 *\n                 * `straight`:      Draws a straight line between the connecting\n                 *                  points. Does not avoid other points when drawing.\n                 *\n                 * `simpleConnect`: Finds a path between the points using right angles\n                 *                  only. Takes only starting/ending points into\n                 *                  account, and will not avoid other points.\n                 *\n                 * `fastAvoid`:     Finds a path between the points using right angles\n                 *                  only. Will attempt to avoid other points, but its\n                 *                  focus is performance over accuracy. Works well with\n                 *                  less dense datasets.\n                 *\n                 * Default value: `straight` is used as default for most series types,\n                 * while `simpleConnect` is used as default for Gantt series, to show\n                 * dependencies between points.\n                 *\n                 * @sample gantt/pathfinder/demo\n                 *         Different types used\n                 *\n                 * @type    {Highcharts.PathfinderTypeValue}\n                 * @default undefined\n                 * @since   6.2.0\n                 */\n                type: 'straight',\n                /**\n                 * The corner radius for the connector line.\n                 *\n                 * @since 11.2.0\n                 */\n                radius: 0,\n                /**\n                 * Set the default pixel width for this chart's Pathfinder connecting\n                 * lines.\n                 *\n                 * @since 6.2.0\n                 */\n                lineWidth: 1,\n                /**\n                 * Marker options for this chart's Pathfinder connectors. Note that\n                 * this option is overridden by the `startMarker` and `endMarker`\n                 * options.\n                 *\n                 * @declare Highcharts.ConnectorsMarkerOptions\n                 * @since   6.2.0\n                 */\n                marker: {\n                    /**\n                     * Set the radius of the connector markers. The default is\n                     * automatically computed based on the algorithmMargin setting.\n                     *\n                     * Setting marker.width and marker.height will override this\n                     * setting.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.radius\n                     */\n                    /**\n                     * Set the width of the connector markers. If not supplied, this\n                     * is inferred from the marker radius.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.width\n                     */\n                    /**\n                     * Set the height of the connector markers. If not supplied, this\n                     * is inferred from the marker radius.\n                     *\n                     * @type      {number}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.height\n                     */\n                    /**\n                     * Set the color of the connector markers. By default this is the\n                     * same as the connector color.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.color\n                     */\n                    /**\n                     * Set the line/border color of the connector markers. By default\n                     * this is the same as the marker color.\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @since     6.2.0\n                     * @apioption connectors.marker.lineColor\n                     */\n                    /**\n                     * Enable markers for the connectors.\n                     */\n                    enabled: false,\n                    /**\n                     * Horizontal alignment of the markers relative to the points.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'center',\n                    /**\n                     * Vertical alignment of the markers relative to the points.\n                     *\n                     * @type {Highcharts.VerticalAlignValue}\n                     */\n                    verticalAlign: 'middle',\n                    /**\n                     * Whether or not to draw the markers inside the points.\n                     */\n                    inside: false,\n                    /**\n                     * Set the line/border width of the pathfinder markers.\n                     */\n                    lineWidth: 1\n                },\n                /**\n                 * Marker options specific to the start markers for this chart's\n                 * Pathfinder connectors. Overrides the generic marker options.\n                 *\n                 * @declare Highcharts.ConnectorsStartMarkerOptions\n                 * @extends connectors.marker\n                 * @since   6.2.0\n                 */\n                startMarker: {\n                    /**\n                     * Set the symbol of the connector start markers.\n                     */\n                    symbol: 'diamond'\n                },\n                /**\n                 * Marker options specific to the end markers for this chart's\n                 * Pathfinder connectors. Overrides the generic marker options.\n                 *\n                 * @declare Highcharts.ConnectorsEndMarkerOptions\n                 * @extends connectors.marker\n                 * @since   6.2.0\n                 */\n                endMarker: {\n                    /**\n                     * Set the symbol of the connector end markers.\n                     */\n                    symbol: 'arrow-filled'\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Override Pathfinder connector options for a series. Requires Highcharts Gantt\n         * to be loaded.\n         *\n         * @declare   Highcharts.SeriesConnectorsOptionsObject\n         * @extends   connectors\n         * @since     6.2.0\n         * @excluding enabled, algorithmMargin\n         * @product   gantt\n         * @apioption plotOptions.series.connectors\n         */\n        /**\n         * Connect to a point. This option can be either a string, referring to the ID\n         * of another point, or an object, or an array of either. If the option is an\n         * array, each element defines a connection.\n         *\n         * @sample gantt/pathfinder/demo\n         *         Different connection types\n         *\n         * @declare   Highcharts.XrangePointConnectorsOptionsObject\n         * @type      {string|Array<string|*>|*}\n         * @extends   plotOptions.series.connectors\n         * @since     6.2.0\n         * @excluding enabled\n         * @product   gantt\n         * @requires  highcharts-gantt\n         * @apioption series.xrange.data.connect\n         */\n        /**\n         * The ID of the point to connect to.\n         *\n         * @type      {string}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.xrange.data.connect.to\n         */\n        ''; // Keeps doclets above in JS file\n\n        return connectorsDefaults;\n    });\n    _registerModule(_modules, 'Gantt/PathfinderComposition.js', [_modules['Gantt/ConnectorsDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (ConnectorsDefaults, D, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { defined, error, merge, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get point bounding box using plotX/plotY and shapeArgs. If using\n         * graphic.getBBox() directly, the bbox will be affected by animation.\n         *\n         * @private\n         * @function\n         *\n         * @param {Highcharts.Point} point\n         *        The point to get BB of.\n         *\n         * @return {Highcharts.Dictionary<number>|null}\n         *         Result xMax, xMin, yMax, yMin.\n         */\n        function getPointBB(point) {\n            const shapeArgs = point.shapeArgs;\n            // Prefer using shapeArgs (columns)\n            if (shapeArgs) {\n                return {\n                    xMin: shapeArgs.x || 0,\n                    xMax: (shapeArgs.x || 0) + (shapeArgs.width || 0),\n                    yMin: shapeArgs.y || 0,\n                    yMax: (shapeArgs.y || 0) + (shapeArgs.height || 0)\n                };\n            }\n            // Otherwise use plotX/plotY and bb\n            const bb = point.graphic && point.graphic.getBBox();\n            return bb ? {\n                xMin: point.plotX - bb.width / 2,\n                xMax: point.plotX + bb.width / 2,\n                yMin: point.plotY - bb.height / 2,\n                yMax: point.plotY + bb.height / 2\n            } : null;\n        }\n        /**\n         * Warn if using legacy options. Copy the options over. Note that this will\n         * still break if using the legacy options in chart.update, addSeries etc.\n         * @private\n         */\n        function warnLegacy(chart) {\n            if (chart.options.pathfinder ||\n                chart.series.reduce(function (acc, series) {\n                    if (series.options) {\n                        merge(true, (series.options.connectors = series.options.connectors ||\n                            {}), series.options.pathfinder);\n                    }\n                    return acc || series.options && series.options.pathfinder;\n                }, false)) {\n                merge(true, (chart.options.connectors = chart.options.connectors || {}), chart.options.pathfinder);\n                error('WARNING: Pathfinder options have been renamed. ' +\n                    'Use \"chart.connectors\" or \"series.connectors\" instead.');\n            }\n        }\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ConnectionComposition;\n        (function (ConnectionComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass, PathfinderClass, PointClass) {\n                if (pushUnique(composedMembers, ChartClass)) {\n                    // Initialize Pathfinder for charts\n                    ChartClass.prototype.callbacks.push(function (chart) {\n                        const options = chart.options;\n                        if (options.connectors.enabled !== false) {\n                            warnLegacy(chart);\n                            this.pathfinder = new PathfinderClass(this);\n                            this.pathfinder.update(true); // First draw, defer render\n                        }\n                    });\n                }\n                if (pushUnique(composedMembers, PointClass)) {\n                    const pointProto = PointClass.prototype;\n                    pointProto.getMarkerVector = pointGetMarkerVector;\n                    pointProto.getPathfinderAnchorPoint = pointGetPathfinderAnchorPoint;\n                    pointProto.getRadiansToVector = pointGetRadiansToVector;\n                }\n                if (pushUnique(composedMembers, setOptions)) {\n                    // Set default Pathfinder options\n                    setOptions(ConnectorsDefaults);\n                }\n            }\n            ConnectionComposition.compose = compose;\n            /**\n             * Get coordinates of anchor point for pathfinder connection.\n             *\n             * @private\n             * @function Highcharts.Point#getPathfinderAnchorPoint\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} markerOptions\n             *        Connection options for position on point.\n             *\n             * @return {Highcharts.PositionObject}\n             *         An object with x/y properties for the position. Coordinates are\n             *         in plot values, not relative to point.\n             */\n            function pointGetPathfinderAnchorPoint(markerOptions) {\n                const bb = getPointBB(this);\n                let x, y;\n                switch (markerOptions.align) { // eslint-disable-line default-case\n                    case 'right':\n                        x = 'xMax';\n                        break;\n                    case 'left':\n                        x = 'xMin';\n                }\n                switch (markerOptions.verticalAlign) { // eslint-disable-line default-case\n                    case 'top':\n                        y = 'yMin';\n                        break;\n                    case 'bottom':\n                        y = 'yMax';\n                }\n                return {\n                    x: x ? bb[x] : (bb.xMin + bb.xMax) / 2,\n                    y: y ? bb[y] : (bb.yMin + bb.yMax) / 2\n                };\n            }\n            /**\n             * Utility to get the angle from one point to another.\n             *\n             * @private\n             * @function Highcharts.Point#getRadiansToVector\n             *\n             * @param {Highcharts.PositionObject} v1\n             *        The first vector, as an object with x/y properties.\n             *\n             * @param {Highcharts.PositionObject} v2\n             *        The second vector, as an object with x/y properties.\n             *\n             * @return {number}\n             *         The angle in degrees\n             */\n            function pointGetRadiansToVector(v1, v2) {\n                let box;\n                if (!defined(v2)) {\n                    box = getPointBB(this);\n                    if (box) {\n                        v2 = {\n                            x: (box.xMin + box.xMax) / 2,\n                            y: (box.yMin + box.yMax) / 2\n                        };\n                    }\n                }\n                return Math.atan2(v2.y - v1.y, v1.x - v2.x);\n            }\n            /**\n             * Utility to get the position of the marker, based on the path angle and\n             * the marker's radius.\n             *\n             * @private\n             * @function Highcharts.Point#getMarkerVector\n             *\n             * @param {number} radians\n             *        The angle in radians from the point center to another vector.\n             *\n             * @param {number} markerRadius\n             *        The radius of the marker, to calculate the additional distance to\n             *        the center of the marker.\n             *\n             * @param {Object} anchor\n             *        The anchor point of the path and marker as an object with x/y\n             *        properties.\n             *\n             * @return {Object}\n             *         The marker vector as an object with x/y properties.\n             */\n            function pointGetMarkerVector(radians, markerRadius, anchor) {\n                const twoPI = Math.PI * 2.0, bb = getPointBB(this), rectWidth = bb.xMax - bb.xMin, rectHeight = bb.yMax - bb.yMin, rAtan = Math.atan2(rectHeight, rectWidth), rectHalfWidth = rectWidth / 2.0, rectHalfHeight = rectHeight / 2.0, rectHorizontalCenter = bb.xMin + rectHalfWidth, rectVerticalCenter = bb.yMin + rectHalfHeight, edgePoint = {\n                    x: rectHorizontalCenter,\n                    y: rectVerticalCenter\n                };\n                let theta = radians, tanTheta = 1, leftOrRightRegion = false, xFactor = 1, yFactor = 1;\n                while (theta < -Math.PI) {\n                    theta += twoPI;\n                }\n                while (theta > Math.PI) {\n                    theta -= twoPI;\n                }\n                tanTheta = Math.tan(theta);\n                if ((theta > -rAtan) && (theta <= rAtan)) {\n                    // Right side\n                    yFactor = -1;\n                    leftOrRightRegion = true;\n                }\n                else if (theta > rAtan && theta <= (Math.PI - rAtan)) {\n                    // Top side\n                    yFactor = -1;\n                }\n                else if (theta > (Math.PI - rAtan) || theta <= -(Math.PI - rAtan)) {\n                    // Left side\n                    xFactor = -1;\n                    leftOrRightRegion = true;\n                }\n                else {\n                    // Bottom side\n                    xFactor = -1;\n                }\n                // Correct the edgePoint according to the placement of the marker\n                if (leftOrRightRegion) {\n                    edgePoint.x += xFactor * (rectHalfWidth);\n                    edgePoint.y += yFactor * (rectHalfWidth) * tanTheta;\n                }\n                else {\n                    edgePoint.x += xFactor * (rectHeight / (2.0 * tanTheta));\n                    edgePoint.y += yFactor * (rectHalfHeight);\n                }\n                if (anchor.x !== rectHorizontalCenter) {\n                    edgePoint.x = anchor.x;\n                }\n                if (anchor.y !== rectVerticalCenter) {\n                    edgePoint.y = anchor.y;\n                }\n                return {\n                    x: edgePoint.x + (markerRadius * Math.cos(theta)),\n                    y: edgePoint.y - (markerRadius * Math.sin(theta))\n                };\n            }\n        })(ConnectionComposition || (ConnectionComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ConnectionComposition;\n    });\n    _registerModule(_modules, 'Gantt/Pathfinder.js', [_modules['Gantt/Connection.js'], _modules['Gantt/PathfinderAlgorithms.js'], _modules['Gantt/PathfinderComposition.js'], _modules['Core/Series/Point.js'], _modules['Core/Utilities.js']], function (Connection, PathfinderAlgorithms, PathfinderComposition, Point, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Ã˜ystein Moseng, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, pick, splat } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const max = Math.max, min = Math.min;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get point bounding box using plotX/plotY and shapeArgs. If using\n         * graphic.getBBox() directly, the bbox will be affected by animation.\n         *\n         * @private\n         * @function\n         *\n         * @param {Highcharts.Point} point\n         *        The point to get BB of.\n         *\n         * @return {Highcharts.Dictionary<number>|null}\n         *         Result xMax, xMin, yMax, yMin.\n         */\n        function getPointBB(point) {\n            const shapeArgs = point.shapeArgs;\n            // Prefer using shapeArgs (columns)\n            if (shapeArgs) {\n                return {\n                    xMin: shapeArgs.x || 0,\n                    xMax: (shapeArgs.x || 0) + (shapeArgs.width || 0),\n                    yMin: shapeArgs.y || 0,\n                    yMax: (shapeArgs.y || 0) + (shapeArgs.height || 0)\n                };\n            }\n            // Otherwise use plotX/plotY and bb\n            const bb = point.graphic && point.graphic.getBBox();\n            return bb ? {\n                xMin: point.plotX - bb.width / 2,\n                xMax: point.plotX + bb.width / 2,\n                yMin: point.plotY - bb.height / 2,\n                yMax: point.plotY + bb.height / 2\n            } : null;\n        }\n        /**\n         * Compute smallest distance between two rectangles.\n         * @private\n         */\n        function calculateObstacleDistance(a, b, bbMargin) {\n            // Count the distance even if we are slightly off\n            const margin = pick(bbMargin, 10), yOverlap = a.yMax + margin > b.yMin - margin &&\n                a.yMin - margin < b.yMax + margin, xOverlap = a.xMax + margin > b.xMin - margin &&\n                a.xMin - margin < b.xMax + margin, xDistance = yOverlap ? (a.xMin > b.xMax ? a.xMin - b.xMax : b.xMin - a.xMax) : Infinity, yDistance = xOverlap ? (a.yMin > b.yMax ? a.yMin - b.yMax : b.yMin - a.yMax) : Infinity;\n            // If the rectangles collide, try recomputing with smaller margin.\n            // If they collide anyway, discard the obstacle.\n            if (xOverlap && yOverlap) {\n                return (margin ?\n                    calculateObstacleDistance(a, b, Math.floor(margin / 2)) :\n                    Infinity);\n            }\n            return min(xDistance, yDistance);\n        }\n        /**\n         * Calculate margin to place around obstacles for the pathfinder in pixels.\n         * Returns a minimum of 1 pixel margin.\n         *\n         * @private\n         * @function\n         *\n         * @param {Array<object>} obstacles\n         *        Obstacles to calculate margin from.\n         *\n         * @return {number}\n         *         The calculated margin in pixels. At least 1.\n         */\n        function calculateObstacleMargin(obstacles) {\n            const len = obstacles.length, distances = [];\n            let onstacleDistance;\n            // Go over all obstacles and compare them to the others.\n            for (let i = 0; i < len; ++i) {\n                // Compare to all obstacles ahead. We will already have compared this\n                // obstacle to the ones before.\n                for (let j = i + 1; j < len; ++j) {\n                    onstacleDistance =\n                        calculateObstacleDistance(obstacles[i], obstacles[j]);\n                    // TODO: Magic number 80\n                    if (onstacleDistance < 80) { // Ignore large distances\n                        distances.push(onstacleDistance);\n                    }\n                }\n            }\n            // Ensure we always have at least one value, even in very spaceous charts\n            distances.push(80);\n            return max(Math.floor(distances.sort(function (a, b) {\n                return (a - b);\n            })[\n            // Discard first 10% of the relevant distances, and then grab\n            // the smallest one.\n            Math.floor(distances.length / 10)] / 2 - 1 // Divide the distance by 2 and subtract 1.\n            ), 1 // 1 is the minimum margin\n            );\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Pathfinder class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Pathfinder\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart to operate on.\n         */\n        class Pathfinder {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass, PointClass) {\n                PathfinderComposition.compose(ChartClass, Pathfinder, PointClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                /* *\n                 *\n                 * Properties\n                 *\n                 * */\n                this.chart = void 0;\n                this.chartObstacles = void 0;\n                this.chartObstacleMetrics = void 0;\n                this.connections = void 0;\n                this.group = void 0;\n                this.lineObstacles = void 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the Pathfinder object.\n             *\n             * @function Highcharts.Pathfinder#init\n             *\n             * @param {Highcharts.Chart} chart\n             *        The chart context.\n             */\n            init(chart) {\n                // Initialize pathfinder with chart context\n                this.chart = chart;\n                // Init connection reference list\n                this.connections = [];\n                // Recalculate paths/obstacles on chart redraw\n                addEvent(chart, 'redraw', function () {\n                    this.pathfinder.update();\n                });\n            }\n            /**\n             * Update Pathfinder connections from scratch.\n             *\n             * @function Highcharts.Pathfinder#update\n             *\n             * @param {boolean} [deferRender]\n             *        Whether or not to defer rendering of connections until\n             *        series.afterAnimate event has fired. Used on first render.\n             */\n            update(deferRender) {\n                const chart = this.chart, pathfinder = this, oldConnections = pathfinder.connections;\n                // Rebuild pathfinder connections from options\n                pathfinder.connections = [];\n                chart.series.forEach(function (series) {\n                    if (series.visible && !series.options.isInternal) {\n                        series.points.forEach(function (point) {\n                            const ganttPointOptions = point.options;\n                            // For Gantt series the connect could be\n                            // defined as a dependency\n                            if (ganttPointOptions && ganttPointOptions.dependency) {\n                                ganttPointOptions.connect = ganttPointOptions\n                                    .dependency;\n                            }\n                            const connects = (point.options?.connect &&\n                                splat(point.options.connect));\n                            let to;\n                            if (point.visible && point.isInside !== false && connects) {\n                                connects.forEach(function (connect) {\n                                    to = chart.get(typeof connect === 'string' ?\n                                        connect : connect.to);\n                                    if (to instanceof Point &&\n                                        to.series.visible &&\n                                        to.visible &&\n                                        to.isInside !== false) {\n                                        // Add new connection\n                                        pathfinder.connections.push(new Connection(point, // From\n                                        to, typeof connect === 'string' ?\n                                            {} :\n                                            connect));\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n                // Clear connections that should not be updated, and move old info over\n                // to new connections.\n                for (let j = 0, k, found, lenOld = oldConnections.length, lenNew = pathfinder.connections.length; j < lenOld; ++j) {\n                    found = false;\n                    const oldCon = oldConnections[j];\n                    for (k = 0; k < lenNew; ++k) {\n                        const newCon = pathfinder.connections[k];\n                        if ((oldCon.options && oldCon.options.type) ===\n                            (newCon.options && newCon.options.type) &&\n                            oldCon.fromPoint === newCon.fromPoint &&\n                            oldCon.toPoint === newCon.toPoint) {\n                            newCon.graphics = oldCon.graphics;\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        oldCon.destroy();\n                    }\n                }\n                // Clear obstacles to force recalculation. This must be done on every\n                // redraw in case positions have changed. Recalculation is handled in\n                // Connection.getPath on demand.\n                delete this.chartObstacles;\n                delete this.lineObstacles;\n                // Draw the pending connections\n                pathfinder.renderConnections(deferRender);\n            }\n            /**\n             * Draw the chart's connecting paths.\n             *\n             * @function Highcharts.Pathfinder#renderConnections\n             *\n             * @param {boolean} [deferRender]\n             *        Whether or not to defer render until series animation is finished.\n             *        Used on first render.\n             */\n            renderConnections(deferRender) {\n                if (deferRender) {\n                    // Render after series are done animating\n                    this.chart.series.forEach(function (series) {\n                        const render = function () {\n                            // Find pathfinder connections belonging to this series\n                            // that haven't rendered, and render them now.\n                            const pathfinder = series.chart.pathfinder, conns = pathfinder && pathfinder.connections || [];\n                            conns.forEach(function (connection) {\n                                if (connection.fromPoint &&\n                                    connection.fromPoint.series === series) {\n                                    connection.render();\n                                }\n                            });\n                            if (series.pathfinderRemoveRenderEvent) {\n                                series.pathfinderRemoveRenderEvent();\n                                delete series.pathfinderRemoveRenderEvent;\n                            }\n                        };\n                        if (series.options.animation === false) {\n                            render();\n                        }\n                        else {\n                            series.pathfinderRemoveRenderEvent = addEvent(series, 'afterAnimate', render);\n                        }\n                    });\n                }\n                else {\n                    // Go through connections and render them\n                    this.connections.forEach(function (connection) {\n                        connection.render();\n                    });\n                }\n            }\n            /**\n             * Get obstacles for the points in the chart. Does not include connecting\n             * lines from Pathfinder. Applies algorithmMargin to the obstacles.\n             *\n             * @function Highcharts.Pathfinder#getChartObstacles\n             *\n             * @param {Object} options\n             *        Options for the calculation. Currenlty only\n             *        options.algorithmMargin.\n             *\n             * @return {Array<object>}\n             *         An array of calculated obstacles. Each obstacle is defined as an\n             *         object with xMin, xMax, yMin and yMax properties.\n             */\n            getChartObstacles(options) {\n                const series = this.chart.series, margin = pick(options.algorithmMargin, 0);\n                let obstacles = [], calculatedMargin;\n                for (let i = 0, sLen = series.length; i < sLen; ++i) {\n                    if (series[i].visible && !series[i].options.isInternal) {\n                        for (let j = 0, pLen = series[i].points.length, bb, point; j < pLen; ++j) {\n                            point = series[i].points[j];\n                            if (point.visible) {\n                                bb = getPointBB(point);\n                                if (bb) {\n                                    obstacles.push({\n                                        xMin: bb.xMin - margin,\n                                        xMax: bb.xMax + margin,\n                                        yMin: bb.yMin - margin,\n                                        yMax: bb.yMax + margin\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n                // Sort obstacles by xMin for optimization\n                obstacles = obstacles.sort(function (a, b) {\n                    return a.xMin - b.xMin;\n                });\n                // Add auto-calculated margin if the option is not defined\n                if (!defined(options.algorithmMargin)) {\n                    calculatedMargin =\n                        options.algorithmMargin =\n                            calculateObstacleMargin(obstacles);\n                    obstacles.forEach(function (obstacle) {\n                        obstacle.xMin -= calculatedMargin;\n                        obstacle.xMax += calculatedMargin;\n                        obstacle.yMin -= calculatedMargin;\n                        obstacle.yMax += calculatedMargin;\n                    });\n                }\n                return obstacles;\n            }\n            /**\n             * Utility function to get metrics for obstacles:\n             * - Widest obstacle width\n             * - Tallest obstacle height\n             *\n             * @function Highcharts.Pathfinder#getObstacleMetrics\n             *\n             * @param {Array<object>} obstacles\n             *        An array of obstacles to inspect.\n             *\n             * @return {Object}\n             *         The calculated metrics, as an object with maxHeight and maxWidth\n             *         properties.\n             */\n            getObstacleMetrics(obstacles) {\n                let maxWidth = 0, maxHeight = 0, width, height, i = obstacles.length;\n                while (i--) {\n                    width = obstacles[i].xMax - obstacles[i].xMin;\n                    height = obstacles[i].yMax - obstacles[i].yMin;\n                    if (maxWidth < width) {\n                        maxWidth = width;\n                    }\n                    if (maxHeight < height) {\n                        maxHeight = height;\n                    }\n                }\n                return {\n                    maxHeight: maxHeight,\n                    maxWidth: maxWidth\n                };\n            }\n            /**\n             * Utility to get which direction to start the pathfinding algorithm\n             * (X vs Y), calculated from a set of marker options.\n             *\n             * @function Highcharts.Pathfinder#getAlgorithmStartDirection\n             *\n             * @param {Highcharts.ConnectorsMarkerOptions} markerOptions\n             *        Marker options to calculate from.\n             *\n             * @return {boolean}\n             *         Returns true for X, false for Y, and undefined for autocalculate.\n             */\n            getAlgorithmStartDirection(markerOptions) {\n                const xCenter = markerOptions.align !== 'left' &&\n                    markerOptions.align !== 'right', yCenter = markerOptions.verticalAlign !== 'top' &&\n                    markerOptions.verticalAlign !== 'bottom';\n                return xCenter ?\n                    (yCenter ? void 0 : false) : // When x is centered\n                    (yCenter ? true : void 0); // When x is off-center\n            }\n        }\n        /**\n         * @name Highcharts.Pathfinder#algorithms\n         * @type {Highcharts.Dictionary<Function>}\n         */\n        Pathfinder.prototype.algorithms = PathfinderAlgorithms;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The default pathfinder algorithm to use for a chart. It is possible to define\n         * your own algorithms by adding them to the\n         * `Highcharts.Pathfinder.prototype.algorithms`\n         * object before the chart has been created.\n         *\n         * The default algorithms are as follows:\n         *\n         * `straight`:      Draws a straight line between the connecting\n         *                  points. Does not avoid other points when drawing.\n         *\n         * `simpleConnect`: Finds a path between the points using right angles\n         *                  only. Takes only starting/ending points into\n         *                  account, and will not avoid other points.\n         *\n         * `fastAvoid`:     Finds a path between the points using right angles\n         *                  only. Will attempt to avoid other points, but its\n         *                  focus is performance over accuracy. Works well with\n         *                  less dense datasets.\n         *\n         * @typedef {\"fastAvoid\"|\"simpleConnect\"|\"straight\"|string} Highcharts.PathfinderTypeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Pathfinder;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'FÃ©vrier', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'AoÃ»t',\n         *             'Septembre', 'Octobre', 'Novembre', 'DÃ©cembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: 'â†’'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0,\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions, setOptions } = D;\n        const { addEvent, defined, extend, find, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.fixedRange = max - min;\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n            }\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                addEvent(ChartClass, 'afterGetContainer', onChartAfterGetContainer);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'render', onChartRender);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                const chartProto = ChartClass.prototype;\n                chartProto.callbacks.push(onChartCallback);\n            }\n            if (U.pushUnique(composedMembers, setOptions)) {\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function onChartAfterGetContainer() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, axes = chart.axes, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                axes.forEach((axis) => {\n                    axis.updateNames();\n                    axis.setScale();\n                });\n                chart.getAxisMargins();\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            let extremes, legend, alignTo, verticalAlign;\n            const rangeSelector = chart.rangeSelector, redraw = () => {\n                if (rangeSelector) {\n                    extremes = chart.xAxis[0].getExtremes();\n                    legend = chart.legend;\n                    verticalAlign = (rangeSelector &&\n                        rangeSelector.options.verticalAlign);\n                    if (isNumber(extremes.min)) {\n                        rangeSelector.render(extremes.min, extremes.max);\n                    }\n                    // Re-align the legend so that it's below the rangeselector\n                    if (legend.display &&\n                        verticalAlign === 'top' &&\n                        verticalAlign === legend.options.verticalAlign) {\n                        // Create a new alignment box for the legend.\n                        alignTo = merge(chart.spacingBox);\n                        if (legend.options.layout === 'vertical') {\n                            alignTo.y = chart.plotTop;\n                        }\n                        else {\n                            alignTo.y += rangeSelector.getHeight();\n                        }\n                        legend.group.placed = false; // Don't animate the alignment.\n                        legend.align(alignTo);\n                    }\n                }\n            };\n            if (rangeSelector) {\n                const events = find(chartDestroyEvents, (e) => e[0] === chart);\n                if (!events) {\n                    chartDestroyEvents.push([chart, [\n                            // redraw the scroller on setExtremes\n                            addEvent(chart.xAxis[0], 'afterSetExtremes', function (e) {\n                                if (rangeSelector) {\n                                    rangeSelector.render(e.min, e.max);\n                                }\n                            }),\n                            // redraw the scroller chart resize\n                            addEvent(chart, 'redraw', redraw)\n                        ]]);\n                }\n                // do it now\n                redraw();\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector && !rangeSelector.options.floating) {\n                rangeSelector.render();\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.extraBottomMargin = true;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.extraTopMargin = true;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                onChartCallback(this);\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.buttons = void 0;\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.options = void 0;\n                this.chart = chart;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, minSetting, rangeSetting, ctx, ytdExtremes, addOffsetMin = true;\n                // chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                // Set the fixed range before range is altered\n                chart.fixedRange = range;\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instanciated. Temporarily set min and range\n                    // options and remove them on chart load (#4317).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    rangeSetting = baseXAxisOptions.range;\n                    baseXAxisOptions.range = range;\n                    minSetting = baseXAxisOptions.min;\n                    baseXAxisOptions.min = rangeMin;\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        baseXAxisOptions.range = rangeSetting;\n                        baseXAxisOptions.min = minSetting;\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (this.max - this.min !==\n                                chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttons = rangeSelector.buttons;\n                let selectedExists = isNumber(selected);\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, button = buttons[i], offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed in\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    let state = 0, \n                    // Do not select the YTD button if not explicitly told so\n                    isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isAllButAlreadyShowingAll = false, isSameRange = range === actualRange;\n                    // Months and years have a variable range so we check the extremes\n                    if ((type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                        isAllButAlreadyShowingAll = (!isSelected &&\n                            selectedExists &&\n                            isSameRange);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            isAllButAlreadyShowingAll ||\n                            hasNoData));\n                    const select = ((isSelected && isSameRange) ||\n                        (isSameRange && !selectedExists && !isYTDButNotSelected) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        state = 3;\n                    }\n                    else if (select) {\n                        selectedExists = true; // Only one button can be selected\n                        state = 2;\n                    }\n                    // If state has changed, update the button\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = disable;\n                            if (state === 2) {\n                                dropdown.selectedIndex = i + 1;\n                            }\n                        }\n                        // Reset (#9209)\n                        if (state === 0 && selected === i) {\n                            rangeSelector.setSelected();\n                        }\n                    }\n                });\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // these time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes() {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax;\n                    let value = rangeSelector.getInputValue(name);\n                    if (value !== Number(input.getAttribute('data-hc-time-previous')) &&\n                        isNumber(value)) {\n                        input.setAttribute('data-hc-time-previous', value);\n                        // Validate the extremes. If it goes beyound the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and and records\n                // click events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px',\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // update extermes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes();\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes();\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.keyCode === 38 || event.keyCode === 40) {\n                        updateExtremes();\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // set offset only for varticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputsZIndex = pick(chartOptions.chart.style &&\n                    chartOptions.chart.style.zIndex, 0) + 1, inputEnabled = options.inputEnabled, rendered = this.rendered;\n                if (options.enabled === false) {\n                    return;\n                }\n                // create the elements\n                if (!rendered) {\n                    this.group = renderer.g('range-selector-group')\n                        .attr({\n                        zIndex: 7\n                    })\n                        .add();\n                    this.div = createElement('div', void 0, {\n                        position: 'relative',\n                        height: 0,\n                        zIndex: inputsZIndex\n                    });\n                    if (this.buttonOptions.length) {\n                        this.renderButtons();\n                    }\n                    // First create a wrapper outside the container in order to make\n                    // the inputs work and make export correct\n                    if (container.parentNode) {\n                        container.parentNode.insertBefore(this.div, container);\n                    }\n                    if (inputEnabled) {\n                        // Create the group to keep the inputs\n                        this.inputGroup = renderer.g('input-group').add(this.group);\n                        const minElems = this.drawInput('min');\n                        this.minDateBox = minElems.dateBox;\n                        this.minLabel = minElems.label;\n                        this.minInput = minElems.input;\n                        const maxElems = this.drawInput('max');\n                        this.maxDateBox = maxElems.dateBox;\n                        this.maxLabel = maxElems.label;\n                        this.maxInput = maxElems.input;\n                    }\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.rendered = true;\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    width: '1px',\n                    height: '1px',\n                    padding: 0,\n                    border: 0,\n                    top: '-9999em',\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                [\n                    [H.isMS ? 'mouseover' : 'mouseenter'],\n                    [H.isMS ? 'mouseout' : 'mouseleave'],\n                    ['change', 'click']\n                ].forEach(([from, to]) => {\n                    addEvent(dropdown, from, () => {\n                        const button = buttons[this.currentButtonIndex()];\n                        if (button) {\n                            fireEvent(button.element, to || from);\n                        }\n                    });\n                });\n                this.zoomText = renderer\n                    .label((lang && lang.rangeSelectorZoom) || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        this.updateButtonStates();\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup, buttons } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // getBBox for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons(xOffsetForExportButton);\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons(xOffsetForExportButton);\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons(xOffsetForExportButton);\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and put the select element on top.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons(xOffsetForExportButton) {\n                const { buttons, buttonOptions, chart, dropdown, options, zoomText } = this;\n                const userButtonTheme = (chart.userOptions.rangeSelector &&\n                    chart.userOptions.rangeSelector.buttonTheme) || {};\n                const getAttribs = (text) => ({\n                    text: text ? `${text} â–¾` : 'â–¾',\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme.padding, 8)\n                });\n                if (zoomText) {\n                    zoomText.hide();\n                }\n                let hasActiveButton = false;\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    if (button.state !== 2) {\n                        button.hide();\n                    }\n                    else {\n                        button.show();\n                        button.attr(getAttribs(rangeOptions.text));\n                        hasActiveButton = true;\n                    }\n                });\n                if (!hasActiveButton) {\n                    if (dropdown) {\n                        dropdown.selectedIndex = 0;\n                    }\n                    buttons[0].show();\n                    buttons[0].attr(getAttribs(this.zoomText && this.zoomText.textStr));\n                }\n                const { align } = options.buttonPosition;\n                this.positionButtons();\n                if (align === 'right' || align === 'center') {\n                    this.alignButtonGroup(xOffsetForExportButton, buttons[this.currentButtonIndex()].getBBox().width);\n                }\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, buttonOptions, options, zoomText } = this;\n                this.hideDropdown();\n                if (zoomText) {\n                    zoomText.show();\n                }\n                buttonOptions.forEach((rangeOptions, i) => {\n                    const button = buttons[i];\n                    button.show();\n                    button.attr({\n                        text: rangeOptions.text,\n                        width: options.buttonTheme.width || 28,\n                        paddingLeft: pick(options.buttonTheme.paddingLeft, 'unset'),\n                        paddingRight: pick(options.buttonTheme.paddingRight, 'unset')\n                    });\n                    if (button.state < 2) {\n                        button.setState(0);\n                    }\n                });\n                this.positionButtons();\n            }\n            /**\n             * Get the index of the visible button when the buttons are collapsed.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#currentButtonIndex\n             */\n            currentButtonIndex() {\n                const { dropdown } = this;\n                if (dropdown && dropdown.selectedIndex > 0) {\n                    return dropdown.selectedIndex - 1;\n                }\n                return 0;\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, buttons, chart, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, bBox = buttons[this.currentButtonIndex()].getBBox();\n                    css(dropdown, {\n                        left: (chart.plotLeft + translateX) + 'px',\n                        top: (translateY + 0.5) + 'px',\n                        width: bBox.width + 'px',\n                        height: bBox.height + 'px'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    css(dropdown, {\n                        top: '-9999em',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                this.render();\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Extensions/StaticScale.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2021 Torstein Honsi, Lars Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, defined, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /** @private */\n        function compose(AxisClass, ChartClass) {\n            if (pushUnique(composedMembers, AxisClass)) {\n                addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n            }\n            if (pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                chartProto.adjustHeight = chartAdjustHeight;\n                addEvent(ChartClass, 'render', chartProto.adjustHeight);\n            }\n        }\n        /** @private */\n        function onAxisAfterSetOptions() {\n            const chartOptions = this.chart.options.chart;\n            if (!this.horiz &&\n                isNumber(this.options.staticScale) &&\n                (!chartOptions.height ||\n                    (chartOptions.scrollablePlotArea &&\n                        chartOptions.scrollablePlotArea.minHeight))) {\n                this.staticScale = this.options.staticScale;\n            }\n        }\n        /** @private */\n        function chartAdjustHeight() {\n            const chart = this;\n            if (chart.redrawTrigger !== 'adjustHeight') {\n                for (const axis of (chart.axes || [])) {\n                    const chart = axis.chart, animate = !!chart.initiatedScale &&\n                        chart.options.animation, staticScale = axis.options.staticScale;\n                    if (axis.staticScale && defined(axis.min)) {\n                        let height = pick(axis.brokenAxis && axis.brokenAxis.unitLength, axis.max + axis.tickInterval - axis.min) * staticScale;\n                        // Minimum height is 1 x staticScale.\n                        height = Math.max(height, staticScale);\n                        let diff = height - chart.plotHeight;\n                        if (!chart.scrollablePixelsY && Math.abs(diff) >= 1) {\n                            chart.plotHeight = height;\n                            chart.redrawTrigger = 'adjustHeight';\n                            chart.setSize(void 0, chart.chartHeight + diff, animate);\n                        }\n                        // Make sure clip rects have the right height before initial\n                        // animation.\n                        axis.series.forEach(function (series) {\n                            const clipRect = series.sharedClipKey &&\n                                chart.sharedClips[series.sharedClipKey];\n                            if (clipRect) {\n                                clipRect.attr(chart.inverted ? {\n                                    width: chart.plotHeight\n                                } : {\n                                    height: chart.plotHeight\n                                });\n                            }\n                        });\n                    }\n                }\n                this.initiatedScale = true;\n            }\n            this.redrawTrigger = null;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const StaticScale = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * For vertical axes only. Setting the static scale ensures that each tick unit\n         * is translated into a fixed pixel height. For example, setting the static\n         * scale to 24 results in each Y axis category taking up 24 pixels, and the\n         * height of the chart adjusts. Adding or removing items will make the chart\n         * resize.\n         *\n         * @sample gantt/xrange-series/demo/\n         *         X-range series with static scale\n         *\n         * @type      {number}\n         * @default   50\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption yAxis.staticScale\n         */\n        ''; // keeps doclets above in JS file\n\n        return StaticScale;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { correctFloat, isNumber, isObject } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The X-range series displays ranges on the X axis, typically time\n         * intervals with a start and end date.\n         *\n         * @sample {highcharts} highcharts/demo/x-range/\n         *         X-range\n         * @sample {highcharts} highcharts/css/x-range/\n         *         Styled mode X-range\n         * @sample {highcharts} highcharts/chart/inverted-xrange/\n         *         Inverted X-range\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts highstock gantt\n         * @excluding    boostThreshold, crisp, cropThreshold, depth, edgeColor,\n         *               edgeWidth, findNearestPointBy, getExtremesFromAll,\n         *               negativeColor, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, softThreshold,\n         *               stacking, threshold, data, dataSorting, boostBlending\n         * @requires     modules/xrange\n         * @optionparent plotOptions.xrange\n         */\n        const XRangeSeriesDefaults = {\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. The partial fill object can be set either on\n             * series or point level.\n             *\n             * @sample {highcharts} highcharts/demo/x-range\n             *         X-range with partial fill\n             *\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill\n             */\n            /**\n             * The fill color to be used for partial fills. Defaults to a darker\n             * shade of the point color.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill.fill\n             */\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. See [completed](series.gantt.data.completed).\n             *\n             * @sample gantt/demo/progress-indicator\n             *         Gantt with progress indicator\n             *\n             * @product   gantt\n             * @apioption plotOptions.gantt.partialFill\n             */\n            /**\n             * In an X-range series, this option makes all points of the same Y-axis\n             * category the same color.\n             */\n            colorByPoint: true,\n            dataLabels: {\n                formatter: function () {\n                    let point = this.point, amount = point.partialFill;\n                    if (isObject(amount)) {\n                        amount = amount.amount;\n                    }\n                    if (isNumber(amount) && amount > 0) {\n                        return correctFloat(amount * 100) + '%';\n                    }\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.x} - {point.x2}</span><br/>',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.yCategory}</b><br/>'\n            },\n            borderRadius: 3,\n            pointRange: 0\n        };\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * An `xrange` series. If the [type](#series.xrange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.xrange\n         * @excluding boostThreshold, crisp, cropThreshold, depth, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, negativeColor,\n         *            pointInterval, pointIntervalUnit, pointPlacement, pointRange,\n         *            pointStart, softThreshold, stacking, threshold, dataSorting,\n         *            boostBlending\n         * @product   highcharts highstock gantt\n         * @requires  modules/xrange\n         * @apioption series.xrange\n         */\n        /**\n         * An array of data points for the series. For the `xrange` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The objects are point configuration\n         *    objects as seen below.\n         *    ```js\n         *    data: [{\n         *        x: Date.UTC(2017, 0, 1),\n         *        x2: Date.UTC(2017, 0, 3),\n         *        name: \"Test\",\n         *        y: 0,\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: Date.UTC(2017, 0, 4),\n         *        x2: Date.UTC(2017, 0, 5),\n         *        name: \"Deploy\",\n         *        y: 1,\n         *        color: \"#FF0000\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.XrangePointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data\n         */\n        /**\n         * The starting X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x\n         */\n        /**\n         * The ending X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x2\n         */\n        /**\n         * The Y value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.y\n         */\n        /**\n         * A partial fill for each point, typically used to visualize how much of\n         * a task is performed. The partial fill object can be set either on series\n         * or point level.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range with partial fill\n         *\n         * @declare   Highcharts.XrangePointPartialFillOptionsObject\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill\n         */\n        /**\n         * The amount of the X-range point to be filled. Values can be 0-1 and are\n         * converted to percentages in the default data label formatter.\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.amount\n         */\n        /**\n         * The fill color to be used for partial fills. Defaults to a darker shade\n         * of the point color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.fill\n         */\n        (''); // adds doclets above to transpiled file\n\n        return XRangeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class XRangePoint extends ColumnPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = void 0;\n                this.series = void 0;\n            }\n            /**\n             * Return color of a point based on its category.\n             *\n             * @private\n             * @function getColorByCategory\n             *\n             * @param {object} series\n             *        The series which the point belongs to.\n             *\n             * @param {object} point\n             *        The point to calculate its color for.\n             *\n             * @return {object}\n             *         Returns an object containing the properties color and colorIndex.\n             */\n            static getColorByCategory(series, point) {\n                const colors = series.options.colors || series.chart.options.colors, colorCount = colors ?\n                    colors.length :\n                    series.chart.options.chart.colorCount, colorIndex = point.y % colorCount, color = colors && colors[colorIndex];\n                return {\n                    colorIndex: colorIndex,\n                    color: color\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            resolveColor() {\n                const series = this.series;\n                if (series.options.colorByPoint && !this.options.color) {\n                    const colorByPoint = XRangePoint.getColorByCategory(series, this);\n                    if (!series.chart.styledMode) {\n                        this.color = colorByPoint.color;\n                    }\n                    if (!this.options.colorIndex) {\n                        this.colorIndex = colorByPoint.colorIndex;\n                    }\n                }\n                else if (!this.color) {\n                    this.color = series.color;\n                }\n            }\n            /**\n             * Extend init to have y default to 0.\n             *\n             * @private\n             */\n            init() {\n                super.init.apply(this, arguments);\n                if (!this.y) {\n                    this.y = 0;\n                }\n                return this;\n            }\n            /**\n             * @private\n             */\n            setState() {\n                super.setState.apply(this, arguments);\n                this.series.drawPoint(this, this.series.getAnimationVerb());\n            }\n            /**\n             * Add x2 and yCategory to the available properties for tooltip formats.\n             *\n             * @private\n             */\n            getLabelConfig() {\n                const cfg = super.getLabelConfig.call(this), yCats = this.series.yAxis.categories;\n                cfg.x2 = this.x2;\n                cfg.yCategory = this.yCategory = yCats && yCats[this.y];\n                // Use 'category' as 'key' to ensure tooltip datetime formatting.\n                // Use 'name' only when 'category' is undefined.\n                cfg.key = this.category || this.name;\n                return cfg;\n            }\n            /**\n             * @private\n             */\n            isValid() {\n                return typeof this.x === 'number' &&\n                    typeof this.x2 === 'number';\n            }\n        }\n        extend(XRangePoint.prototype, {\n            ttBelow: false,\n            tooltipDateKeys: ['x', 'x2']\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The ending X value of the range point.\n         * @name Highcharts.Point#x2\n         * @type {number|undefined}\n         * @requires modules/xrange\n         */\n        /**\n         * Extend applyOptions so that `colorByPoint` for x-range means that one\n         * color is applied per Y axis category.\n         *\n         * @private\n         * @function Highcharts.Point#applyOptions\n         *\n         * @return {Highcharts.Series}\n         */\n        /**\n         * @interface Highcharts.PointOptionsObject in parts/Point.ts\n         */ /**\n        * The ending X value of the range point.\n        * @name Highcharts.PointOptionsObject#x2\n        * @type {number|undefined}\n        * @requires modules/xrange\n        */\n        (''); // keeps doclets above in JS file\n\n        return XRangePoint;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeries.js', [_modules['Core/Globals.js'], _modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/XRange/XRangeSeriesDefaults.js'], _modules['Series/XRange/XRangePoint.js']], function (H, Color, SeriesRegistry, U, XRangeSeriesDefaults, XRangePoint) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { parse: color } = Color;\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, clamp, defined, extend, find, isNumber, isObject, merge, pick, relativeLength } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Max x2 should be considered in xAxis extremes\n         * @private\n         */\n        function onAxisAfterGetSeriesExtremes() {\n            let dataMax, modMax;\n            if (this.isXAxis) {\n                dataMax = pick(this.dataMax, -Number.MAX_VALUE);\n                for (const series of this.series) {\n                    if (series.x2Data) {\n                        for (const val of series.x2Data) {\n                            if (val && val > dataMax) {\n                                dataMax = val;\n                                modMax = true;\n                            }\n                        }\n                    }\n                }\n                if (modMax) {\n                    this.dataMax = dataMax;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.xrange\n         *\n         * @augments Highcharts.Series\n         */\n        class XRangeSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                /*\n                // Override to remove stroke from points. For partial fill.\n                pointAttribs: function () {\n                    let series = this,\n                        retVal = columnType.prototype.pointAttribs\n                            .apply(series, arguments);\n    \n                    //retVal['stroke-width'] = 0;\n                    return retVal;\n                }\n                //*/\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'afterGetSeriesExtremes', onAxisAfterGetSeriesExtremes);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #13161\n            }\n            /**\n             * Borrow the column series metrics, but with swapped axes. This gives\n             * free access to features like groupPadding, grouping, pointWidth etc.\n             * @private\n             */\n            getColumnMetrics() {\n                const swapAxes = () => {\n                    for (const series of this.chart.series) {\n                        const xAxis = series.xAxis;\n                        series.xAxis = series.yAxis;\n                        series.yAxis = xAxis;\n                    }\n                };\n                swapAxes();\n                const metrics = super.getColumnMetrics();\n                swapAxes();\n                return metrics;\n            }\n            /**\n             * Override cropData to show a point where x or x2 is outside visible range,\n             * but one of them is inside.\n             * @private\n             */\n            cropData(xData, yData, min, max) {\n                // Replace xData with x2Data to find the appropriate cropStart\n                const crop = super.cropData(this.x2Data, yData, min, max);\n                // Re-insert the cropped xData\n                crop.xData = xData.slice(crop.start, crop.end);\n                return crop;\n            }\n            /**\n             * Finds the index of an existing point that matches the given point\n             * options.\n             *\n             * @private\n             *\n             * @param {Highcharts.XRangePointOptions} options\n             *        The options of the point.\n             *\n             * @return {number|undefined}\n             *         Returns index of a matching point, or undefined if no match is\n             *         found.\n             */\n            findPointIndex(options) {\n                const { cropStart, points } = this;\n                const { id } = options;\n                let pointIndex;\n                if (id) {\n                    const point = find(points, (point) => point.id === id);\n                    pointIndex = point ? point.index : void 0;\n                }\n                if (typeof pointIndex === 'undefined') {\n                    const point = find(points, (point) => (point.x === options.x &&\n                        point.x2 === options.x2 &&\n                        !point.touched));\n                    pointIndex = point ? point.index : void 0;\n                }\n                // Reduce pointIndex if data is cropped\n                if (this.cropped &&\n                    isNumber(pointIndex) &&\n                    isNumber(cropStart) &&\n                    pointIndex >= cropStart) {\n                    pointIndex -= cropStart;\n                }\n                return pointIndex;\n            }\n            alignDataLabel(point) {\n                const oldPlotX = point.plotX;\n                point.plotX = pick(point.dlBox && point.dlBox.centerX, point.plotX);\n                super.alignDataLabel.apply(this, arguments);\n                point.plotX = oldPlotX;\n            }\n            /**\n             * @private\n             */\n            translatePoint(point) {\n                const xAxis = this.xAxis, yAxis = this.yAxis, metrics = this.columnMetrics, options = this.options, minPointLength = options.minPointLength || 0, oldColWidth = (point.shapeArgs && point.shapeArgs.width || 0) / 2, seriesXOffset = this.pointXOffset = metrics.offset, posX = pick(point.x2, point.x + (point.len || 0)), borderRadius = options.borderRadius, plotTop = this.chart.plotTop, plotLeft = this.chart.plotLeft;\n                let plotX = point.plotX, plotX2 = xAxis.translate(posX, 0, 0, 0, 1);\n                const length = Math.abs(plotX2 - plotX), inverted = this.chart.inverted, borderWidth = pick(options.borderWidth, 1), crisper = borderWidth % 2 / 2;\n                let widthDifference, partialFill, yOffset = metrics.offset, pointHeight = Math.round(metrics.width), dlLeft, dlRight, dlWidth, clipRectWidth;\n                if (minPointLength) {\n                    widthDifference = minPointLength - length;\n                    if (widthDifference < 0) {\n                        widthDifference = 0;\n                    }\n                    plotX -= widthDifference / 2;\n                    plotX2 += widthDifference / 2;\n                }\n                plotX = Math.max(plotX, -10);\n                plotX2 = clamp(plotX2, -10, xAxis.len + 10);\n                // Handle individual pointWidth\n                if (defined(point.options.pointWidth)) {\n                    yOffset -= ((Math.ceil(point.options.pointWidth) - pointHeight) / 2);\n                    pointHeight = Math.ceil(point.options.pointWidth);\n                }\n                // Apply pointPlacement to the Y axis\n                if (options.pointPlacement &&\n                    isNumber(point.plotY) &&\n                    yAxis.categories) {\n                    point.plotY = yAxis.translate(point.y, 0, 1, 0, 1, options.pointPlacement);\n                }\n                const x = Math.floor(Math.min(plotX, plotX2)) + crisper, x2 = Math.floor(Math.max(plotX, plotX2)) + crisper, width = x2 - x;\n                const r = Math.min(relativeLength((typeof borderRadius === 'object' ?\n                    borderRadius.radius :\n                    borderRadius || 0), pointHeight), Math.min(width, pointHeight) / 2);\n                const shapeArgs = {\n                    x,\n                    y: Math.floor(point.plotY + yOffset) + crisper,\n                    width,\n                    height: pointHeight,\n                    r\n                };\n                point.shapeArgs = shapeArgs;\n                // Move tooltip to default position\n                if (!inverted) {\n                    point.tooltipPos[0] -= oldColWidth +\n                        seriesXOffset -\n                        shapeArgs.width / 2;\n                }\n                else {\n                    point.tooltipPos[1] += seriesXOffset +\n                        oldColWidth;\n                }\n                // Align data labels inside the shape and inside the plot area\n                dlLeft = shapeArgs.x;\n                dlRight = dlLeft + shapeArgs.width;\n                if (dlLeft < 0 || dlRight > xAxis.len) {\n                    dlLeft = clamp(dlLeft, 0, xAxis.len);\n                    dlRight = clamp(dlRight, 0, xAxis.len);\n                    dlWidth = dlRight - dlLeft;\n                    point.dlBox = merge(shapeArgs, {\n                        x: dlLeft,\n                        width: dlRight - dlLeft,\n                        centerX: dlWidth ? dlWidth / 2 : null\n                    });\n                }\n                else {\n                    point.dlBox = null;\n                }\n                // Tooltip position\n                const tooltipPos = point.tooltipPos;\n                const xIndex = !inverted ? 0 : 1;\n                const yIndex = !inverted ? 1 : 0;\n                const tooltipYOffset = (this.columnMetrics ?\n                    this.columnMetrics.offset :\n                    -metrics.width / 2);\n                // Centering tooltip position (#14147)\n                if (inverted) {\n                    tooltipPos[xIndex] += shapeArgs.width / 2;\n                }\n                else {\n                    tooltipPos[xIndex] = clamp(tooltipPos[xIndex] +\n                        (xAxis.reversed ? -1 : 0) * shapeArgs.width, xAxis.left - plotLeft, xAxis.left + xAxis.len - plotLeft - 1);\n                }\n                tooltipPos[yIndex] = clamp(tooltipPos[yIndex] + ((inverted ? -1 : 1) * tooltipYOffset), yAxis.top - plotTop, yAxis.top + yAxis.len - plotTop - 1);\n                // Add a partShapeArgs to the point, based on the shapeArgs property\n                partialFill = point.partialFill;\n                if (partialFill) {\n                    // Get the partial fill amount\n                    if (isObject(partialFill)) {\n                        partialFill = partialFill.amount;\n                    }\n                    // If it was not a number, assume 0\n                    if (!isNumber(partialFill)) {\n                        partialFill = 0;\n                    }\n                    point.partShapeArgs = merge(shapeArgs);\n                    clipRectWidth = Math.max(Math.round(length * partialFill + point.plotX -\n                        plotX), 0);\n                    point.clipRectArgs = {\n                        x: xAxis.reversed ? // #10717\n                            shapeArgs.x + length - clipRectWidth :\n                            shapeArgs.x,\n                        y: shapeArgs.y,\n                        width: clipRectWidth,\n                        height: shapeArgs.height\n                    };\n                }\n            }\n            /**\n             * @private\n             */\n            translate() {\n                super.translate.apply(this, arguments);\n                for (const point of this.points) {\n                    this.translatePoint(point);\n                }\n            }\n            /**\n             * Draws a single point in the series. Needed for partial fill.\n             *\n             * This override turns point.graphic into a group containing the\n             * original graphic and an overlay displaying the partial fill.\n             *\n             * @private\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series.\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            drawPoint(point, verb) {\n                const seriesOpts = this.options, renderer = this.chart.renderer, type = point.shapeType, shapeArgs = point.shapeArgs, partShapeArgs = point.partShapeArgs, clipRectArgs = point.clipRectArgs, pointState = point.state, stateOpts = (seriesOpts.states[pointState || 'normal'] ||\n                    {}), pointStateVerb = typeof pointState === 'undefined' ?\n                    'attr' : verb, pointAttr = this.pointAttribs(point, pointState), animation = pick(this.chart.options.chart.animation, stateOpts.animation);\n                let graphic = point.graphic, pfOptions = point.partialFill;\n                if (!point.isNull && point.visible !== false) {\n                    // Original graphic\n                    if (graphic) { // update\n                        graphic.rect[verb](shapeArgs);\n                    }\n                    else {\n                        point.graphic = graphic = renderer.g('point')\n                            .addClass(point.getClassName())\n                            .add(point.group || this.group);\n                        graphic.rect = renderer[type](merge(shapeArgs))\n                            .addClass(point.getClassName())\n                            .addClass('highcharts-partfill-original')\n                            .add(graphic);\n                    }\n                    // Partial fill graphic\n                    if (partShapeArgs) {\n                        if (graphic.partRect) {\n                            graphic.partRect[verb](merge(partShapeArgs));\n                            graphic.partialClipRect[verb](merge(clipRectArgs));\n                        }\n                        else {\n                            graphic.partialClipRect = renderer.clipRect(clipRectArgs.x, clipRectArgs.y, clipRectArgs.width, clipRectArgs.height);\n                            graphic.partRect =\n                                renderer[type](partShapeArgs)\n                                    .addClass('highcharts-partfill-overlay')\n                                    .add(graphic)\n                                    .clip(graphic.partialClipRect);\n                        }\n                    }\n                    // Presentational\n                    if (!this.chart.styledMode) {\n                        graphic\n                            .rect[verb](pointAttr, animation)\n                            .shadow(seriesOpts.shadow);\n                        if (partShapeArgs) {\n                            // Ensure pfOptions is an object\n                            if (!isObject(pfOptions)) {\n                                pfOptions = {};\n                            }\n                            if (isObject(seriesOpts.partialFill)) {\n                                pfOptions = merge(seriesOpts.partialFill, pfOptions);\n                            }\n                            const fill = (pfOptions.fill ||\n                                color(pointAttr.fill).brighten(-0.3).get() ||\n                                color(point.color || this.color)\n                                    .brighten(-0.3).get());\n                            pointAttr.fill = fill;\n                            graphic\n                                .partRect[pointStateVerb](pointAttr, animation)\n                                .shadow(seriesOpts.shadow);\n                        }\n                    }\n                }\n                else if (graphic) {\n                    point.graphic = graphic.destroy(); // #1269\n                }\n            }\n            /**\n             * @private\n             */\n            drawPoints() {\n                const verb = this.getAnimationVerb();\n                // Draw the columns\n                for (const point of this.points) {\n                    this.drawPoint(point, verb);\n                }\n            }\n            /**\n             * Returns \"animate\", or \"attr\" if the number of points is above the\n             * animation limit.\n             *\n             * @private\n             */\n            getAnimationVerb() {\n                return (this.chart.pointCount < (this.options.animationLimit || 250) ?\n                    'animate' :\n                    'attr');\n            }\n            /**\n             * @private\n             */\n            isPointInside(point) {\n                const shapeArgs = point.shapeArgs, plotX = point.plotX, plotY = point.plotY;\n                if (!shapeArgs) {\n                    return super.isPointInside.apply(this, arguments);\n                }\n                const isInside = typeof plotX !== 'undefined' &&\n                    typeof plotY !== 'undefined' &&\n                    plotY >= 0 &&\n                    plotY <= this.yAxis.len &&\n                    (shapeArgs.x || 0) + (shapeArgs.width || 0) >= 0 &&\n                    plotX <= this.xAxis.len;\n                return isInside;\n            }\n        }\n        XRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, XRangeSeriesDefaults);\n        extend(XRangeSeries.prototype, {\n            pointClass: XRangePoint,\n            pointArrayMap: ['x2', 'y'],\n            getExtremesFromAll: true,\n            parallelArrays: ['x', 'x2', 'y'],\n            requireSorting: false,\n            type: 'xrange',\n            animate: SeriesRegistry.series.prototype.animate,\n            autoIncrement: noop,\n            buildKDTree: noop\n        });\n        SeriesRegistry.registerSeriesType('xrange', XRangeSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return XRangeSeries;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { xrange: { prototype: { pointClass: XRangePoint } } } } = SeriesRegistry;\n        const { pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class GanttPoint extends XRangePoint {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            static setGanttPointAliases(options) {\n                /**\n                 * Add a value to options if the value exists.\n                 * @private\n                 */\n                function addIfExists(prop, val) {\n                    if (typeof val !== 'undefined') {\n                        options[prop] = val;\n                    }\n                }\n                addIfExists('x', pick(options.start, options.x));\n                addIfExists('x2', pick(options.end, options.x2));\n                addIfExists('partialFill', pick(options.completed, options.partialFill));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Applies the options containing the x and y data and possible some\n             * extra properties. This is called on point init or from point.update.\n             *\n             * @private\n             * @function Highcharts.Point#applyOptions\n             *\n             * @param {Object} options\n             *        The point options\n             *\n             * @param {number} x\n             *        The x value\n             *\n             * @return {Highcharts.Point}\n             *         The Point instance\n             */\n            applyOptions(options, x) {\n                let point = this, ganttPoint;\n                ganttPoint = super.applyOptions.call(point, options, x);\n                GanttPoint.setGanttPointAliases(ganttPoint);\n                return ganttPoint;\n            }\n            isValid() {\n                return ((typeof this.start === 'number' ||\n                    typeof this.x === 'number') &&\n                    (typeof this.end === 'number' ||\n                        typeof this.x2 === 'number' ||\n                        this.milestone));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttPoint;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                }\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than usin Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are substracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { dateFormats } = H;\n        const { addEvent, defined, erase, find, isArray, isNumber, merge, pick, timeUnits, wrap } = U;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            const options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetOffset', onAfterGetOffset);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n            }\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n            }\n            if (U.pushUnique(composedMembers, TickClass)) {\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            const dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                const tick = ticks[pos];\n                let labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.options.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                const treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function onAfterGetOffset() {\n            const { grid } = this;\n            (grid && grid.columns || []).forEach(function (column) {\n                column.getOffset();\n            });\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            const axis = this;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // compute anchor points for each of the title align options\n                const { axisTitle, height: axisHeight, horiz, left: axisLeft, offset, opposite, options, top: axisTop, width: axisWidth } = axis;\n                const tickSize = axis.tickSize();\n                const titleWidth = axisTitle && axisTitle.getBBox().width;\n                const xOption = options.title.x;\n                const yOption = options.title.y;\n                const titleMargin = pick(options.title.margin, horiz ? 5 : 10);\n                const titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                const crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                const offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // so does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            const axis = this;\n            const { chart, options: { grid: gridOptions = {} }, userOptions } = axis;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                const columns = axis.grid.columns = [];\n                let columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    const columnOptions = merge(userOptions, gridOptions.columns[gridOptions.columns.length - columnIndex - 1], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Force to behave like category axis\n                        type: 'category',\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    });\n                    delete columnOptions.grid.columns; // Prevent recursion\n                    const column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            const axis = this, grid = axis.grid, options = axis.options, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                const min = axis.min || 0, max = axis.max || 0;\n                // @todo acutual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    const lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        const linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = (tickLength - 1) * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            const upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach((column) => column.render());\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar))) {\n                    const tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n                    let label, tickMark;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show firts tick label.\n                    label = axis.ticks[firstTick].label;\n                    if (label) {\n                        if (min - firstTick > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    const mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            const axis = this;\n            const tickInfo = axis.tickPositions && axis.tickPositions.info;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            const userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach((series) => {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.options.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            let gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes presedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouln't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond',\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            const parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                const units = (gridAxisOptions.units || []);\n                                let unitIdx, count = 1, unitName = 'year';\n                                for (let i = 0; i < units.length; i++) {\n                                    const unit = units[i];\n                                    if (unit && unit[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                const unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    const counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // unitName is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                const unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange, count, unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            const axis = this;\n            const userOptions = e.userOptions;\n            const gridOptions = userOptions && userOptions.grid || {};\n            const columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column\n            // options set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[columns.length - 1]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            const axis = this;\n            (axis.grid.columns || []).forEach((column) => column.setScale());\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            const { horiz, maxLabelDimensions, options: { grid: gridOptions = {} } } = this;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                const labelPadding = this.options.labels.distance * 2;\n                const distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach((axis) => {\n                (axis.grid && axis.grid.columns || []).forEach((column) => {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            const { grid } = this;\n            (grid.columns || []).forEach((column) => column.destroy(e.keepEvents));\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            const axis = this;\n            const userOptions = e.userOptions || {};\n            const gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            const tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // verticalAlign is currently not supported for axis.labels.\n            verticalAlign = 'middle', // labelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                let bottom, top, left, right;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top + ((bottom - top) / 2) // default to middle\n                );\n                if (label) {\n                    const lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        const lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            const { axis, value } = ctx;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                const tickPos = axis.tickPositions;\n                const series = (axis.linkedParent || axis).series[0];\n                const isFirst = value === tickPos[0];\n                const isLast = value === tickPos[tickPos.length - 1];\n                const point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                let pointCopy;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            const axis = this;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            const categoryAxis = axis.categories;\n            const tickPositions = axis.tickPositions;\n            const firstPos = tickPositions[0];\n            const lastPos = tickPositions[tickPositions.length - 1];\n            const linkedMin = axis.linkedParent && axis.linkedParent.min;\n            const linkedMax = axis.linkedParent && axis.linkedParent.max;\n            const min = linkedMin || axis.min;\n            const max = linkedMax || axis.max;\n            const tickInterval = axis.tickInterval;\n            const endMoreThanMin = (firstPos < min &&\n                firstPos + tickInterval > min);\n            const startLessThanMax = (lastPos > max &&\n                lastPos - tickInterval < max);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.horiz || axis.isLinked)) {\n                if (endMoreThanMin && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if (startLessThanMax && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            const axis = this;\n            const { options: { grid: gridOptions = {} } } = axis;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        class GridAxisAdditions {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            isOuterAxis() {\n                const axis = this.axis;\n                const chart = axis.chart;\n                const columnIndex = axis.grid.columnIndex;\n                const columns = (axis.linkedParent && axis.linkedParent.grid.columns ||\n                    axis.grid.columns);\n                const parentAxis = columnIndex ? axis.linkedParent : axis;\n                let thisIndex = -1, lastIndex = 0;\n                (chart[axis.coll] || []).forEach((otherAxis, index) => {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            }\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            renderBorder(path) {\n                const axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisBorder);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            const time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            const firstDay = (this.get('Day', d) + 6) % 7;\n            const thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            const firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GridAxis = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'Gantt/Tree.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an object map from parent id to childrens index.\n         *\n         * @private\n         * @function Highcharts.Tree#getListOfParents\n         *\n         * @param {Array<*>} data\n         *        List of points set in options. `Array.parent` is parent id of point.\n         *\n         * @param {Array<string>} ids\n         *        List of all point ids.\n         *\n         * @return {Highcharts.Dictionary<Array<*>>}\n         * Map from parent id to children index in data\n         */\n        function getListOfParents(data) {\n            const listOfParents = data.reduce((prev, curr) => {\n                const parent = pick(curr.parent, '');\n                if (typeof prev[parent] === 'undefined') {\n                    prev[parent] = [];\n                }\n                prev[parent].push(curr);\n                return prev;\n            }, {});\n            // parents = Object.keys(listOfParents);\n            // If parent does not exist, hoist parent to root of tree.\n            // parents.forEach((parent, list): void => {\n            //     const children = listOfParents[parent];\n            //     if ((parent !== '') && (ids.indexOf(parent) === -1)) {\n            //         for (const child of children) {\n            //             (list as any)[''].push(child);\n            //         }\n            //         delete (list as any)[parent];\n            //     }\n            // });\n            return listOfParents;\n        }\n        /** @private */\n        function getNode(id, parent, level, data, mapOfIdToChildren, options) {\n            const after = options && options.after, before = options && options.before, node = {\n                data,\n                depth: level - 1,\n                id,\n                level,\n                parent: (parent || '')\n            };\n            let descendants = 0, height = 0, start, end;\n            // Allow custom logic before the children has been created.\n            if (typeof before === 'function') {\n                before(node, options);\n            }\n            // Call getNode recursively on the children. Calulate the height of the\n            // node, and the number of descendants.\n            const children = ((mapOfIdToChildren[id] || [])).map((child) => {\n                const node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n                    childStart :\n                    child.end ||\n                        NaN);\n                // Start should be the lowest child.start.\n                start = ((!isNumber(start) || childStart < start) ?\n                    childStart :\n                    start);\n                // End should be the largest child.end.\n                // If child is milestone, then use start as end.\n                end = ((!isNumber(end) || childEnd > end) ?\n                    childEnd :\n                    end);\n                descendants = descendants + 1 + node.descendants;\n                height = Math.max(node.height + 1, height);\n                return node;\n            });\n            // Calculate start and end for point if it is not already explicitly set.\n            if (data) {\n                data.start = pick(data.start, start);\n                data.end = pick(data.end, end);\n            }\n            extend(node, {\n                children: children,\n                descendants: descendants,\n                height: height\n            });\n            // Allow custom logic after the children has been created.\n            if (typeof after === 'function') {\n                after(node, options);\n            }\n            return node;\n        }\n        /** @private */\n        function getTree(data, options) {\n            const mapOfIdToChildren = getListOfParents(data);\n            return getNode('', null, 1, null, mapOfIdToChildren, options);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Tree = {\n            getNode,\n            getTree\n        };\n\n        return Tree;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridTick.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, isObject, isNumber, pick, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onTickInit() {\n            const tick = this;\n            if (!tick.treeGrid) {\n                tick.treeGrid = new TreeGridTickAdditions(tick);\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHover(label) {\n            label.addClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({\n                    textDecoration: 'underline'\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHoverExit(label, options) {\n            const css = isObject(options.style) ? options.style : {};\n            label.removeClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({ textDecoration: css.textDecoration });\n            }\n        }\n        /**\n         * @private\n         */\n        function renderLabelIcon(tick, params) {\n            const treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, iconCenter = {\n                x: labelBox.x - (width / 2) - (options.padding || 0),\n                y: labelBox.y - (height / 2)\n            }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && isNumber(iconCenter.y);\n            let icon = treeGrid.labelIcon;\n            if (!icon) {\n                treeGrid.labelIcon = icon = renderer\n                    .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n                    .addClass('highcharts-label-icon')\n                    .add(params.group);\n            }\n            // Set the new position, and show or hide\n            icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n            // Presentational attributes\n            if (!renderer.styledMode) {\n                icon\n                    .attr({\n                    cursor: 'pointer',\n                    'fill': pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n                    'stroke-width': 1,\n                    stroke: options.lineColor,\n                    strokeWidth: options.lineWidth || 0\n                });\n            }\n            // Update the icon positions\n            icon[isNew ? 'attr' : 'animate']({\n                translateX: iconCenter.x,\n                translateY: iconCenter.y,\n                rotation: rotation\n            });\n        }\n        /**\n         * @private\n         */\n        function wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n            const tick = this, lbOptions = pick(tick.options && tick.options.labels, labelOptions), pos = tick.pos, axis = tick.axis, options = axis.options, isTreeGrid = options.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n            let symbolOptions, indentation, mapOfPosToGridNode, node, level;\n            if (isTreeGrid) {\n                symbolOptions = (lbOptions && isObject(lbOptions.symbol, true) ?\n                    lbOptions.symbol :\n                    {});\n                indentation = (lbOptions && isNumber(lbOptions.indentation) ?\n                    lbOptions.indentation :\n                    0);\n                mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n                node = mapOfPosToGridNode && mapOfPosToGridNode[pos];\n                level = (node && node.depth) || 1;\n                result.x += (\n                // Add space for symbols\n                ((symbolOptions.width || 0) +\n                    ((symbolOptions.padding || 0) * 2)) +\n                    // Apply indentation\n                    ((level - 1) * indentation));\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function wrapRenderLabel(proceed) {\n            const tick = this, pos = tick.pos, axis = tick.axis, label = tick.label, mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode, options = axis.options, labelOptions = pick(tick.options && tick.options.labels, options && options.labels), symbolOptions = (labelOptions && isObject(labelOptions.symbol, true) ?\n                labelOptions.symbol :\n                {}), node = mapOfPosToGridNode && mapOfPosToGridNode[pos], level = node && node.depth, isTreeGrid = options.type === 'treegrid', shouldRender = axis.tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', styledMode = axis.chart.styledMode;\n            let collapsed, addClassName, removeClassName;\n            if (isTreeGrid && node) {\n                // Add class name for hierarchical styling.\n                if (label &&\n                    label.element) {\n                    label.addClass(prefixClassName + 'level-' + level);\n                }\n            }\n            proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n            if (isTreeGrid &&\n                label &&\n                label.element &&\n                node &&\n                node.descendants &&\n                node.descendants > 0) {\n                collapsed = axis.treeGrid.isCollapsed(node);\n                renderLabelIcon(tick, {\n                    color: (!styledMode &&\n                        label.styles &&\n                        label.styles.color ||\n                        ''),\n                    collapsed: collapsed,\n                    group: label.parentGroup,\n                    options: symbolOptions,\n                    renderer: label.renderer,\n                    show: shouldRender,\n                    xy: label.xy\n                });\n                // Add class name for the node.\n                addClassName = prefixClassName +\n                    (collapsed ? 'collapsed' : 'expanded');\n                removeClassName = prefixClassName +\n                    (collapsed ? 'expanded' : 'collapsed');\n                label\n                    .addClass(addClassName)\n                    .removeClass(removeClassName);\n                if (!styledMode) {\n                    label.css({\n                        cursor: 'pointer'\n                    });\n                }\n                // Add events to both label text and icon\n                [label, tick.treeGrid.labelIcon].forEach((object) => {\n                    if (object && !object.attachedTreeGridEvents) {\n                        // On hover\n                        addEvent(object.element, 'mouseover', function () {\n                            onTickHover(label);\n                        });\n                        // On hover out\n                        addEvent(object.element, 'mouseout', function () {\n                            onTickHoverExit(label, labelOptions);\n                        });\n                        addEvent(object.element, 'click', function () {\n                            tick.treeGrid.toggleCollapse();\n                        });\n                        object.attachedTreeGridEvents = true;\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridTickAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(TickClass) {\n                if (U.pushUnique(composedMembers, TickClass)) {\n                    addEvent(TickClass, 'init', onTickInit);\n                    wrap(TickClass.prototype, 'getLabelPosition', wrapGetLabelPosition);\n                    wrap(TickClass.prototype, 'renderLabel', wrapRenderLabel);\n                    // backwards compatibility\n                    TickClass.prototype.collapse = function (redraw) {\n                        this.treeGrid.collapse(redraw);\n                    };\n                    TickClass.prototype.expand = function (redraw) {\n                        this.treeGrid.expand(redraw);\n                    };\n                    TickClass.prototype.toggleCollapse = function (redraw) {\n                        this.treeGrid.toggleCollapse(redraw);\n                    };\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(tick) {\n                this.tick = tick;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Collapse the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#collapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            collapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Destroy remaining labelIcon if exist.\n             *\n             * @private\n             * @function Highcharts.Tick#destroy\n             */\n            destroy() {\n                if (this.labelIcon) {\n                    this.labelIcon.destroy();\n                }\n            }\n            /**\n             * Expand the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#expand\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            expand(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.expand(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Toggle the collapse/expand state of the grid cell. Used when axis is\n             * of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#toggleCollapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            toggleCollapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridTickAdditions;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            let result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridAxis.js', [_modules['Core/Axis/BrokenAxis.js'], _modules['Core/Axis/GridAxis.js'], _modules['Gantt/Tree.js'], _modules['Core/Axis/TreeGrid/TreeGridTick.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (BrokenAxis, GridAxis, Tree, TreeGridTick, TU, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getLevelOptions } = TU;\n        const { addEvent, find, fireEvent, isArray, isObject, isString, merge, pick, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let TickConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBreakFromNode(node, max) {\n            const to = node.collapseEnd || 0;\n            let from = node.collapseStart || 0;\n            // In broken-axis, the axis.max is minimized until it is not within a\n            // break. Therefore, if break.to is larger than axis.max, the axis.to\n            // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n            // larger than axis.max.\n            // TODO consider simplifying broken-axis and this might solve itself\n            if (to >= max) {\n                from -= 0.5;\n            }\n            return {\n                from: from,\n                to: to,\n                showPoints: false\n            };\n        }\n        /**\n         * Creates a tree structure of the data, and the treegrid. Calculates\n         * categories, and y-values of points based on the tree.\n         *\n         * @private\n         * @function getTreeGridFromData\n         *\n         * @param {Array<Highcharts.GanttPointOptions>} data\n         * All the data points to display in the axis.\n         *\n         * @param {boolean} uniqueNames\n         * Whether or not the data node with the same name should share grid cell. If\n         * true they do share cell. False by default.\n         *\n         * @param {number} numberOfSeries\n         *\n         * @return {Object}\n         * Returns an object containing categories, mapOfIdToNode,\n         * mapOfPosToGridNode, and tree.\n         *\n         * @todo There should be only one point per line.\n         * @todo It should be optional to have one category per point, or merge\n         *       cells\n         * @todo Add unit-tests.\n         */\n        function getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n            const categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = typeof uniqueNames === 'boolean' ?\n                uniqueNames : false;\n            let mapOfPosToGridNode = {}, posIterator = -1;\n            // Build the tree from the series data.\n            const treeParams = {\n                // After the children has been created.\n                after: function (node) {\n                    const gridNode = mapOfPosToGridNode[node.pos];\n                    let height = 0, descendants = 0;\n                    gridNode.children.forEach(function (child) {\n                        descendants += (child.descendants || 0) + 1;\n                        height = Math.max((child.height || 0) + 1, height);\n                    });\n                    gridNode.descendants = descendants;\n                    gridNode.height = height;\n                    if (gridNode.collapsed) {\n                        collapsedNodes.push(gridNode);\n                    }\n                },\n                // Before the children has been created.\n                before: function (node) {\n                    const data = isObject(node.data, true) ?\n                        node.data :\n                        {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (isObject(parentNode, true) ?\n                        mapOfPosToGridNode[parentNode.pos] :\n                        null), hasSameName = function (x) {\n                        return x.name === name;\n                    };\n                    let gridNode, pos;\n                    // If not unique names, look for sibling node with the same name\n                    if (uniqueNamesEnabled &&\n                        isObject(parentGridNode, true) &&\n                        !!(gridNode = find(parentGridNode.children, hasSameName))) {\n                        // If there is a gridNode with the same name, reuse position\n                        pos = gridNode.pos;\n                        // Add data node to list of nodes in the grid node.\n                        gridNode.nodes.push(node);\n                    }\n                    else {\n                        // If it is a new grid node, increment position.\n                        pos = posIterator++;\n                    }\n                    // Add new grid node to map.\n                    if (!mapOfPosToGridNode[pos]) {\n                        mapOfPosToGridNode[pos] = gridNode = {\n                            depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                            name: name,\n                            id: data.id,\n                            nodes: [node],\n                            children: [],\n                            pos: pos\n                        };\n                        // If not root, then add name to categories.\n                        if (pos !== -1) {\n                            categories.push(name);\n                        }\n                        // Add name to list of children.\n                        if (isObject(parentGridNode, true)) {\n                            parentGridNode.children.push(gridNode);\n                        }\n                    }\n                    // Add data node to map\n                    if (isString(node.id)) {\n                        mapOfIdToNode[node.id] = node;\n                    }\n                    // If one of the points are collapsed, then start the grid node\n                    // in collapsed state.\n                    if (gridNode &&\n                        data.collapsed === true) {\n                        gridNode.collapsed = true;\n                    }\n                    // Assign pos to data node\n                    node.pos = pos;\n                }\n            };\n            const updateYValuesAndTickPos = function (map, numberOfSeries) {\n                const setValues = function (gridNode, start, result) {\n                    const nodes = gridNode.nodes, padding = 0.5;\n                    let end = start + (start === -1 ? 0 : numberOfSeries - 1);\n                    const diff = (end - start) / 2, pos = start + diff;\n                    nodes.forEach(function (node) {\n                        const data = node.data;\n                        if (isObject(data, true)) {\n                            // Update point\n                            data.y = start + (data.seriesIndex || 0);\n                            // Remove the property once used\n                            delete data.seriesIndex;\n                        }\n                        node.pos = pos;\n                    });\n                    result[pos] = gridNode;\n                    gridNode.pos = pos;\n                    gridNode.tickmarkOffset = diff + padding;\n                    gridNode.collapseStart = end + padding;\n                    gridNode.children.forEach(function (child) {\n                        setValues(child, end + 1, result);\n                        end = (child.collapseEnd || 0) - padding;\n                    });\n                    // Set collapseEnd to the end of the last child node.\n                    gridNode.collapseEnd = end + padding;\n                    return result;\n                };\n                return setValues(map['-1'], -1, {});\n            };\n            // Create tree from data\n            const tree = Tree.getTree(data, treeParams);\n            // Update y values of data, and set calculate tick positions.\n            mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n            // Return the resulting data.\n            return {\n                categories: categories,\n                mapOfIdToNode: mapOfIdToNode,\n                mapOfPosToGridNode: mapOfPosToGridNode,\n                collapsedNodes: collapsedNodes,\n                tree: tree\n            };\n        }\n        /**\n         * Builds the tree of categories and calculates its positions.\n         * @private\n         * @param {Object} e Event object\n         * @param {Object} e.target The chart instance which the event was fired on.\n         * @param {object[]} e.target.axes The axes of the chart.\n         */\n        function onBeforeRender(e) {\n            const chart = e.target, axes = chart.axes;\n            axes.filter(function (axis) {\n                return axis.options.type === 'treegrid';\n            }).forEach(function (axis) {\n                const options = axis.options || {}, labelOptions = options.labels, uniqueNames = options.uniqueNames, max = options.max, \n                // Check whether any of series is rendering for the first\n                // time, visibility has changed, or its data is dirty, and\n                // only then update. #10570, #10580. Also check if\n                // mapOfPosToGridNode exists. #10887\n                isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n                    axis.series.some(function (series) {\n                        return !series.hasRendered ||\n                            series.isDirtyData ||\n                            series.isDirty;\n                    }));\n                let numberOfSeries = 0, data, treeGrid;\n                if (isDirty) {\n                    // Concatenate data from all series assigned to this axis.\n                    data = axis.series.reduce(function (arr, s) {\n                        if (s.visible) {\n                            // Push all data to array\n                            (s.options.data || []).forEach(function (data) {\n                                // For using keys - rebuild the data structure\n                                if (s.options.keys && s.options.keys.length) {\n                                    data = s.pointClass.prototype\n                                        .optionsToObject\n                                        .call({ series: s }, data);\n                                    s.pointClass.setGanttPointAliases(data);\n                                }\n                                if (isObject(data, true)) {\n                                    // Set series index on data. Removed again\n                                    // after use.\n                                    data.seriesIndex = (numberOfSeries);\n                                    arr.push(data);\n                                }\n                            });\n                            // Increment series index\n                            if (uniqueNames === true) {\n                                numberOfSeries++;\n                            }\n                        }\n                        return arr;\n                    }, []);\n                    // If max is higher than set data - add a\n                    // dummy data to render categories #10779\n                    if (max && data.length < max) {\n                        for (let i = data.length; i <= max; i++) {\n                            data.push({\n                                // Use the zero-width character\n                                // to avoid conflict with uniqueNames\n                                name: i + '\\u200B'\n                            });\n                        }\n                    }\n                    // setScale is fired after all the series is initialized,\n                    // which is an ideal time to update the axis.categories.\n                    treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n                    // Assign values to the axis.\n                    axis.categories = treeGrid.categories;\n                    axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n                    axis.hasNames = true;\n                    axis.treeGrid.tree = treeGrid.tree;\n                    // Update yData now that we have calculated the y values\n                    axis.series.forEach(function (series) {\n                        const axisData = (series.options.data || []).map(function (d) {\n                            if (isArray(d) &&\n                                series.options.keys &&\n                                series.options.keys.length) {\n                                // Get the axisData from the data array used to\n                                // build the treeGrid where has been modified\n                                data.forEach(function (point) {\n                                    if (d.indexOf(point.x) >= 0 &&\n                                        d.indexOf(point.x2) >= 0) {\n                                        d = point;\n                                    }\n                                });\n                            }\n                            return isObject(d, true) ? merge(d) : d;\n                        });\n                        // Avoid destroying points when series is not visible\n                        if (series.visible) {\n                            series.setData(axisData, false);\n                        }\n                    });\n                    // Calculate the label options for each level in the tree.\n                    axis.treeGrid.mapOptionsToLevel =\n                        getLevelOptions({\n                            defaults: labelOptions,\n                            from: 1,\n                            levels: labelOptions && labelOptions.levels,\n                            to: axis.treeGrid.tree && axis.treeGrid.tree.height\n                        });\n                    // Setting initial collapsed nodes\n                    if (e.type === 'beforeRender') {\n                        axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n                    }\n                }\n            });\n        }\n        /**\n         * Generates a tick for initial positioning.\n         *\n         * @private\n         * @function Highcharts.GridAxis#generateTick\n         *\n         * @param {Function} proceed\n         * The original generateTick function.\n         *\n         * @param {number} pos\n         * The tick position in axis values.\n         */\n        function wrapGenerateTick(proceed, pos) {\n            const axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.options.type === 'treegrid', ticks = axis.ticks;\n            let tick = ticks[pos], levelOptions, options, gridNode;\n            if (isTreeGrid &&\n                axis.treeGrid.mapOfPosToGridNode) {\n                gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n                levelOptions = mapOptionsToLevel[gridNode.depth];\n                if (levelOptions) {\n                    options = {\n                        labels: levelOptions\n                    };\n                }\n                if (!tick &&\n                    TickConstructor) {\n                    ticks[pos] = tick =\n                        new TickConstructor(axis, pos, void 0, void 0, {\n                            category: gridNode.name,\n                            tickmarkOffset: gridNode.tickmarkOffset,\n                            options: options\n                        });\n                }\n                else {\n                    // update labels depending on tick interval\n                    tick.parameters.category = gridNode.name;\n                    tick.options = options;\n                    tick.addLabel();\n                }\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapInit(proceed, chart, userOptions, coll) {\n            const axis = this, isTreeGrid = userOptions.type === 'treegrid';\n            if (!axis.treeGrid) {\n                axis.treeGrid = new TreeGridAxisAdditions(axis);\n            }\n            // Set default and forced options for TreeGrid\n            if (isTreeGrid) {\n                // Add event for updating the categories of a treegrid.\n                // NOTE Preferably these events should be set on the axis.\n                addEvent(chart, 'beforeRender', onBeforeRender);\n                addEvent(chart, 'beforeRedraw', onBeforeRender);\n                // Add new collapsed nodes on addseries\n                addEvent(chart, 'addSeries', function (e) {\n                    if (e.options.data) {\n                        const treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                        axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n                    }\n                });\n                // Collapse all nodes in axis.treegrid.collapsednodes\n                // where collapsed equals true.\n                addEvent(axis, 'foundExtremes', function () {\n                    if (axis.treeGrid.collapsedNodes) {\n                        axis.treeGrid.collapsedNodes.forEach(function (node) {\n                            const breaks = axis.treeGrid.collapse(node);\n                            if (axis.brokenAxis) {\n                                axis.brokenAxis.setBreaks(breaks, false);\n                                // remove the node from the axis collapsedNodes\n                                if (axis.treeGrid.collapsedNodes) {\n                                    axis.treeGrid.collapsedNodes = axis.treeGrid\n                                        .collapsedNodes\n                                        .filter((n) => ((node.collapseStart !==\n                                        n.collapseStart) ||\n                                        node.collapseEnd !== n.collapseEnd));\n                                }\n                            }\n                        });\n                    }\n                });\n                // If staticScale is not defined on the yAxis\n                // and chart height is set, set axis.isDirty\n                // to ensure collapsing works (#12012)\n                addEvent(axis, 'afterBreaks', function () {\n                    if (axis.coll === 'yAxis' &&\n                        !axis.staticScale &&\n                        axis.chart.options.chart.height) {\n                        axis.isDirty = true;\n                    }\n                });\n                userOptions = merge({\n                    // Default options\n                    grid: {\n                        enabled: true\n                    },\n                    // TODO: add support for align in treegrid.\n                    labels: {\n                        align: 'left',\n                        /**\n                        * Set options on specific levels in a tree grid axis. Takes\n                        * precedence over labels options.\n                        *\n                        * @sample {gantt} gantt/treegrid-axis/labels-levels\n                        *         Levels on TreeGrid Labels\n                        *\n                        * @type      {Array<*>}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels\n                        *\n                        * @private\n                        */\n                        levels: [{\n                                /**\n                                * Specify the level which the options within this object\n                                * applies to.\n                                *\n                                * @type      {number}\n                                * @product   gantt\n                                * @apioption yAxis.labels.levels.level\n                                *\n                                * @private\n                                */\n                                level: void 0\n                            }, {\n                                level: 1,\n                                /**\n                                 * @type      {Highcharts.CSSObject}\n                                 * @product   gantt\n                                 * @apioption yAxis.labels.levels.style\n                                 *\n                                 * @private\n                                 */\n                                style: {\n                                    /** @ignore-option */\n                                    fontWeight: 'bold'\n                                }\n                            }],\n                        /**\n                         * The symbol for the collapse and expand icon in a\n                         * treegrid.\n                         *\n                         * @product      gantt\n                         * @optionparent yAxis.labels.symbol\n                         *\n                         * @private\n                         */\n                        symbol: {\n                            /**\n                             * The symbol type. Points to a definition function in\n                             * the `Highcharts.Renderer.symbols` collection.\n                             *\n                             * @type {Highcharts.SymbolKeyValue}\n                             *\n                             * @private\n                             */\n                            type: 'triangle',\n                            x: -5,\n                            y: -5,\n                            height: 10,\n                            width: 10,\n                            padding: 5\n                        }\n                    },\n                    uniqueNames: false\n                }, userOptions, {\n                    // Forced options\n                    reversed: true,\n                    // grid.columns is not supported in treegrid\n                    grid: {\n                        columns: void 0\n                    }\n                });\n            }\n            // Now apply the original function with the original arguments, which are\n            // sliced off this function's arguments\n            proceed.apply(axis, [chart, userOptions, coll]);\n            if (isTreeGrid) {\n                axis.hasNames = true;\n                axis.options.showLastLabel = true;\n            }\n        }\n        /**\n         * Set the tick positions, tickInterval, axis min and max.\n         *\n         * @private\n         * @function Highcharts.GridAxis#setTickInterval\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapSetTickInterval(proceed) {\n            const axis = this, options = axis.options, isTreeGrid = options.type === 'treegrid';\n            if (isTreeGrid) {\n                axis.min = pick(axis.userMin, options.min, axis.dataMin);\n                axis.max = pick(axis.userMax, options.max, axis.dataMax);\n                fireEvent(axis, 'foundExtremes');\n                // setAxisTranslation modifies the min and max according to\n                // axis breaks.\n                axis.setAxisTranslation();\n                axis.tickmarkOffset = 0.5;\n                axis.tickInterval = 1;\n                axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n                    axis.treeGrid.getTickPositions() :\n                    [];\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    if (AxisClass.keepProps.indexOf('treeGrid') === -1) {\n                        AxisClass.keepProps.push('treeGrid');\n                    }\n                    const axisProps = AxisClass.prototype;\n                    wrap(axisProps, 'generateTick', wrapGenerateTick);\n                    wrap(axisProps, 'init', wrapInit);\n                    wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n                    // Make utility functions available for testing.\n                    axisProps.utils = {\n                        getNode: Tree.getNode\n                    };\n                }\n                if (U.pushUnique(composedMembers, TickClass)) {\n                    if (!TickConstructor) {\n                        TickConstructor = TickClass;\n                    }\n                }\n                GridAxis.compose(AxisClass, ChartClass, TickClass);\n                BrokenAxis.compose(AxisClass, SeriesClass);\n                TreeGridTick.compose(TickClass);\n                return AxisClass;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set the collapse status.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             */\n            setCollapsedStatus(node) {\n                const axis = this.axis, chart = axis.chart;\n                axis.series.forEach(function (series) {\n                    const data = series.options.data;\n                    if (node.id && data) {\n                        const point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                        if (point && dataPoint) {\n                            point.collapsed = node.collapsed;\n                            dataPoint.collapsed = node.collapsed;\n                        }\n                    }\n                });\n            }\n            /**\n             * Calculates the new axis breaks to collapse a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            collapse(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                breaks.push(obj);\n                // Change the collapsed flag #13838\n                node.collapsed = true;\n                axis.treeGrid.setCollapsedStatus(node);\n                return breaks;\n            }\n            /**\n             * Calculates the new axis breaks to expand a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to expand.\n             *\n             * @param {number} pos\n             * The tick position to expand.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            expand(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                // Change the collapsed flag #13838\n                node.collapsed = false;\n                axis.treeGrid.setCollapsedStatus(node);\n                // Remove the break from the axis breaks array.\n                return breaks.reduce(function (arr, b) {\n                    if (b.to !== obj.to || b.from !== obj.from) {\n                        arr.push(b);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Creates a list of positions for the ticks on the axis. Filters out\n             * positions that are outside min and max, or is inside an axis break.\n             *\n             * @private\n             *\n             * @return {Array<number>}\n             * List of positions.\n             */\n            getTickPositions() {\n                const axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n                return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n                    const pos = +key;\n                    if (pos >= roundedMin &&\n                        pos <= roundedMax &&\n                        !(axis.brokenAxis && axis.brokenAxis.isInAnyBreak(pos))) {\n                        arr.push(pos);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Check if a node is collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Object} node\n             * The node to check if is collapsed.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {boolean}\n             * Returns true if collapsed, false if expanded.\n             */\n            isCollapsed(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                return breaks.some(function (b) {\n                    return b.from === obj.from && b.to === obj.to;\n                });\n            }\n            /**\n             * Calculates the new axis breaks after toggling the collapse/expand\n             * state of a node. If it is collapsed it will be expanded, and if it is\n             * exapended it will be collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to toggle.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            toggleCollapse(node) {\n                return (this.isCollapsed(node) ?\n                    this.expand(node) :\n                    this.collapse(node));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridAxisAdditions;\n    });\n    _registerModule(_modules, 'Series/Gantt/GanttSeries.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Series/Gantt/GanttPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Axis/Tick.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/TreeGrid/TreeGridAxis.js']], function (Axis, Chart, GanttPoint, SeriesRegistry, Tick, U, TreeGridAxis) {\n        /* *\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: Series, seriesTypes: { xrange: XRangeSeries } } = SeriesRegistry;\n        const { extend, isNumber, merge, splat } = U;\n        TreeGridAxis.compose(Axis, Chart, Series, Tick);\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.gantt\n         *\n         * @augments Highcharts.Series\n         */\n        class GanttSeries extends XRangeSeries {\n            constructor() {\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Draws a single point in the series.\n             *\n             * This override draws the point as a diamond if point.options.milestone\n             * is true, and uses the original drawPoint() if it is false or not set.\n             *\n             * @requires highcharts-gantt\n             *\n             * @private\n             * @function Highcharts.seriesTypes.gantt#drawPoint\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            drawPoint(point, verb) {\n                let series = this, seriesOpts = series.options, renderer = series.chart.renderer, shapeArgs = point.shapeArgs, plotY = point.plotY, graphic = point.graphic, state = point.selected && 'select', cutOff = seriesOpts.stacking && !seriesOpts.borderRadius, diamondShape;\n                if (point.options.milestone) {\n                    if (isNumber(plotY) &&\n                        point.y !== null &&\n                        point.visible !== false) {\n                        diamondShape = renderer.symbols.diamond(shapeArgs.x || 0, shapeArgs.y || 0, shapeArgs.width || 0, shapeArgs.height || 0);\n                        if (graphic) {\n                            graphic[verb]({\n                                d: diamondShape\n                            });\n                        }\n                        else {\n                            point.graphic = graphic = renderer.path(diamondShape)\n                                .addClass(point.getClassName(), true)\n                                .add(point.group || series.group);\n                        }\n                        // Presentational\n                        if (!series.chart.styledMode) {\n                            point.graphic\n                                .attr(series.pointAttribs(point, state))\n                                .shadow(seriesOpts.shadow, null, cutOff);\n                        }\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy(); // #1269\n                    }\n                }\n                else {\n                    XRangeSeries.prototype.drawPoint.call(series, point, verb);\n                }\n            }\n            /**\n             * Handle milestones, as they have no x2.\n             * @private\n             */\n            translatePoint(point) {\n                let series = this, shapeArgs, size;\n                XRangeSeries.prototype.translatePoint.call(series, point);\n                if (point.options.milestone) {\n                    shapeArgs = point.shapeArgs;\n                    size = shapeArgs.height || 0;\n                    point.shapeArgs = {\n                        x: (shapeArgs.x || 0) - (size / 2),\n                        y: shapeArgs.y,\n                        width: size,\n                        height: size\n                    };\n                }\n            }\n        }\n        /**\n         * A `gantt` series. If the [type](#series.gantt.type) option is not specified,\n         * it is inherited from [chart.type](#chart.type).\n         *\n         * @extends      plotOptions.xrange\n         * @product      gantt\n         * @requires     highcharts-gantt\n         * @optionparent plotOptions.gantt\n         */\n        GanttSeries.defaultOptions = merge(XRangeSeries.defaultOptions, {\n            // options - default options merged with parent\n            grouping: false,\n            dataLabels: {\n                enabled: true\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{series.name}</span><br/>',\n                pointFormat: null,\n                pointFormatter: function () {\n                    let point = this, series = point.series, xAxis = series.xAxis, formats = series.tooltipOptions.dateTimeLabelFormats, startOfWeek = xAxis.options.startOfWeek, ttOptions = series.tooltipOptions, format = ttOptions.xDateFormat, start, end, milestone = point.options.milestone, retVal = '<b>' + (point.name || point.yCategory) + '</b>';\n                    if (ttOptions.pointFormat) {\n                        return point.tooltipFormatter(ttOptions.pointFormat);\n                    }\n                    if (!format && isNumber(point.start)) {\n                        format = series.chart.time.getDateFormat(xAxis.closestPointRange, point.start, startOfWeek, formats || {});\n                    }\n                    start = series.chart.time.dateFormat(format, point.start);\n                    end = series.chart.time.dateFormat(format, point.end);\n                    retVal += '<br/>';\n                    if (!milestone) {\n                        retVal += 'Start: ' + start + '<br/>';\n                        retVal += 'End: ' + end + '<br/>';\n                    }\n                    else {\n                        retVal += start + '<br/>';\n                    }\n                    return retVal;\n                }\n            },\n            connectors: {\n                type: 'simpleConnect',\n                /**\n                 * @declare Highcharts.ConnectorsAnimationOptionsObject\n                 */\n                animation: {\n                    reversed: true // Dependencies go from child to parent\n                },\n                radius: 0,\n                startMarker: {\n                    enabled: true,\n                    symbol: 'arrow-filled',\n                    radius: 4,\n                    fill: '#fa0',\n                    align: 'left'\n                },\n                endMarker: {\n                    enabled: false,\n                    align: 'right'\n                }\n            }\n        });\n        extend(GanttSeries.prototype, {\n            pointArrayMap: ['start', 'end', 'y'],\n            pointClass: GanttPoint,\n            setData: Series.prototype.setData\n        });\n        SeriesRegistry.registerSeriesType('gantt', GanttSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `gantt` series.\n         *\n         * @extends   series,plotOptions.gantt\n         * @excluding boostThreshold, dashStyle, findNearestPointBy,\n         *            getExtremesFromAll, marker, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointStart\n         * @product   gantt\n         * @requires  highcharts-gantt\n         * @apioption series.gantt\n         */\n        /**\n         * Data for a Gantt series.\n         *\n         * @declare   Highcharts.GanttPointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.xrange.data\n         * @excluding className, connect, dataLabels, events,\n         *            partialFill, selected, x, x2\n         * @product   gantt\n         * @apioption series.gantt.data\n         */\n        /**\n         * Whether the grid node belonging to this point should start as collapsed. Used\n         * in axes of type treegrid.\n         *\n         * @sample {gantt} gantt/treegrid-axis/collapsed/\n         *         Start as collapsed\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   gantt\n         * @apioption series.gantt.data.collapsed\n         */\n        /**\n         * The start time of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.start\n         */\n        /**\n         * The end time of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.end\n         */\n        /**\n         * The Y value of a task.\n         *\n         * @type      {number}\n         * @product   gantt\n         * @apioption series.gantt.data.y\n         */\n        /**\n         * The name of a task. If a `treegrid` y-axis is used (default in Gantt charts),\n         * this will be picked up automatically, and used to calculate the y-value.\n         *\n         * @type      {string}\n         * @product   gantt\n         * @apioption series.gantt.data.name\n         */\n        /**\n         * Progress indicator, how much of the task completed. If it is a number, the\n         * `fill` will be applied automatically.\n         *\n         * @sample {gantt} gantt/demo/progress-indicator\n         *         Progress indicator\n         *\n         * @type      {number|*}\n         * @extends   series.xrange.data.partialFill\n         * @product   gantt\n         * @apioption series.gantt.data.completed\n         */\n        /**\n         * The amount of the progress indicator, ranging from 0 (not started) to 1\n         * (finished).\n         *\n         * @type      {number}\n         * @default   0\n         * @apioption series.gantt.data.completed.amount\n         */\n        /**\n         * The fill of the progress indicator. Defaults to a darkened variety of the\n         * main color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption series.gantt.data.completed.fill\n         */\n        /**\n         * The ID of the point (task) that this point depends on in Gantt charts.\n         * Aliases [connect](series.xrange.data.connect). Can also be an object,\n         * specifying further connecting [options](series.gantt.connectors) between the\n         * points. Multiple connections can be specified by providing an array.\n         *\n         * @sample gantt/demo/project-management\n         *         Dependencies\n         * @sample gantt/pathfinder/demo\n         *         Different connection types\n         *\n         * @type      {string|Array<string|*>|*}\n         * @extends   series.xrange.data.connect\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.dependency\n         */\n        /**\n         * Whether this point is a milestone. If so, only the `start` option is handled,\n         * while `end` is ignored.\n         *\n         * @sample gantt/gantt/milestones\n         *         Milestones\n         *\n         * @type      {boolean}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.milestone\n         */\n        /**\n         * The ID of the parent point (task) of this point in Gantt charts.\n         *\n         * @sample gantt/demo/subtasks\n         *         Gantt chart with subtasks\n         *\n         * @type      {string}\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption series.gantt.data.parent\n         */\n        /**\n         * @excluding afterAnimate\n         * @apioption series.gantt.events\n         */\n        ''; // adds doclets above to the transpiled file\n\n        return GanttSeries;\n    });\n    _registerModule(_modules, 'Core/Chart/GanttChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (Chart, D, U) {\n        /* *\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getOptions } = D;\n        const { isArray, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Gantt-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/gantt\n         *\n         * @class\n         * @name Highcharts.GanttChart\n         * @extends Highcharts.Chart\n         */\n        class GanttChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.GanttChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.GanttChart#event:init\n             * @emits Highcharts.GanttChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const defaultOptions = getOptions(), xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis;\n                let defaultLinkedTo;\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge(true, {\n                    chart: {\n                        type: 'gantt'\n                    },\n                    title: {\n                        text: ''\n                    },\n                    legend: {\n                        enabled: false\n                    },\n                    navigator: {\n                        series: { type: 'gantt' },\n                        // Bars were clipped, #14060.\n                        yAxis: {\n                            type: 'category'\n                        }\n                    }\n                }, userOptions, // user's options\n                // forced options\n                {\n                    isGantt: true\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // apply X axis options to both single and multi x axes\n                // If user hasn't defined axes as array, make it into an array and add a\n                // second axis by default.\n                options.xAxis = (!isArray(userOptions.xAxis) ?\n                    [userOptions.xAxis || {}, {}] :\n                    userOptions.xAxis).map((xAxisOptions, i) => {\n                    if (i === 1) { // Second xAxis\n                        defaultLinkedTo = 0;\n                    }\n                    return merge(defaultOptions.xAxis, {\n                        grid: {\n                            enabled: true\n                        },\n                        opposite: true,\n                        linkedTo: defaultLinkedTo\n                    }, xAxisOptions, // user options\n                    {\n                        type: 'datetime'\n                    });\n                });\n                // apply Y axis options to both single and multi y axes\n                options.yAxis = (splat(userOptions.yAxis || {})).map((yAxisOptions) => merge(defaultOptions.yAxis, // #3802\n                {\n                    grid: {\n                        enabled: true\n                    },\n                    staticScale: 50,\n                    reversed: true,\n                    // Set default type treegrid, but only if 'categories' is\n                    // undefined\n                    type: yAxisOptions.categories ? yAxisOptions.type : 'treegrid'\n                }, yAxisOptions // user options\n                ));\n                super.init(options, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GanttChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * The factory function for creating new gantt charts. Creates a new {@link\n             * Highcharts.GanttChart|GanttChart} object with different default options\n             * than the basic Chart.\n             *\n             * @example\n             * // Render a chart in to div#container\n             * let chart = Highcharts.ganttChart('container', {\n             *     title: {\n             *         text: 'My chart'\n             *     },\n             *     series: [{\n             *         data: ...\n             *     }]\n             * });\n             *\n             * @function Highcharts.ganttChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} renderTo\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure.\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        Function to run when the chart has loaded and and all external\n             *        images are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.GanttChart}\n             *         Returns the Chart object.\n             */\n            function ganttChart(a, b, c) {\n                return new GanttChart(a, b, c);\n            }\n            GanttChart.ganttChart = ganttChart;\n            /* eslint-enable jsdoc/check-param-names */\n        })(GanttChart || (GanttChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GanttChart;\n    });\n    _registerModule(_modules, 'Extensions/ArrowSymbols.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2017 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an arrow symbol. Like a triangle, except not filled.\n         * ```\n         *                   o\n         *             o\n         *       o\n         * o\n         *       o\n         *             o\n         *                   o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the arrow\n         *\n         * @param {number} y\n         *        y position of the arrow\n         *\n         * @param {number} w\n         *        width of the arrow\n         *\n         * @param {number} h\n         *        height of the arrow\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function arrow(x, y, w, h) {\n            return [\n                ['M', x, y + h / 2],\n                ['L', x + w, y],\n                ['L', x, y + h / 2],\n                ['L', x + w, y + h]\n            ];\n        }\n        /**\n         * Creates a half-width arrow symbol. Like a triangle, except not filled.\n         * ```\n         *       o\n         *    o\n         * o\n         *    o\n         *       o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the arrow\n         *\n         * @param {number} y\n         *        y position of the arrow\n         *\n         * @param {number} w\n         *        width of the arrow\n         *\n         * @param {number} h\n         *        height of the arrow\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function arrowHalf(x, y, w, h) {\n            return arrow(x, y, w / 2, h);\n        }\n        /**\n         * @private\n         */\n        function compose(SVGRendererClass) {\n            if (U.pushUnique(composedMembers, SVGRendererClass)) {\n                const symbols = SVGRendererClass.prototype.symbols;\n                symbols.arrow = arrow;\n                symbols['arrow-filled'] = triangleLeft;\n                symbols['arrow-filled-half'] = triangleLeftHalf;\n                symbols['arrow-half'] = arrowHalf;\n                symbols['triangle-left'] = triangleLeft;\n                symbols['triangle-left-half'] = triangleLeftHalf;\n            }\n        }\n        /**\n         * Creates a left-oriented triangle.\n         * ```\n         *             o\n         *       ooooooo\n         * ooooooooooooo\n         *       ooooooo\n         *             o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the triangle\n         *\n         * @param {number} y\n         *        y position of the triangle\n         *\n         * @param {number} w\n         *        width of the triangle\n         *\n         * @param {number} h\n         *        height of the triangle\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function triangleLeft(x, y, w, h) {\n            return [\n                ['M', x + w, y],\n                ['L', x, y + h / 2],\n                ['L', x + w, y + h],\n                ['Z']\n            ];\n        }\n        /**\n         * Creates a half-width, left-oriented triangle.\n         * ```\n         *       o\n         *    oooo\n         * ooooooo\n         *    oooo\n         *       o\n         * ```\n         *\n         * @private\n         * @function\n         *\n         * @param {number} x\n         *        x position of the triangle\n         *\n         * @param {number} y\n         *        y position of the triangle\n         *\n         * @param {number} w\n         *        width of the triangle\n         *\n         * @param {number} h\n         *        height of the triangle\n         *\n         * @return {Highcharts.SVGPathArray}\n         *         Path array\n         */\n        function triangleLeftHalf(x, y, w, h) {\n            return triangleLeft(x, y, w / 2, h);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ArrowSymbols = {\n            compose\n        };\n\n        return ArrowSymbols;\n    });\n    _registerModule(_modules, 'Extensions/CurrentDateIndication.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Author: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, merge, wrap } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /**\n         * Show an indicator on the axis for the current date and time. Can be a\n         * boolean or a configuration object similar to\n         * [xAxis.plotLines](#xAxis.plotLines).\n         *\n         * @sample gantt/current-date-indicator/demo\n         *         Current date indicator enabled\n         * @sample gantt/current-date-indicator/object-config\n         *         Current date indicator with custom options\n         *\n         * @declare   Highcharts.CurrentDateIndicatorOptions\n         * @type      {boolean|CurrentDateIndicatorOptions}\n         * @default   true\n         * @extends   xAxis.plotLines\n         * @excluding value\n         * @product   gantt\n         * @apioption xAxis.currentDateIndicator\n         */\n        const defaultOptions = {\n            color: \"#ccd3ff\" /* Palette.highlightColor20 */,\n            width: 2,\n            /**\n             * @declare Highcharts.AxisCurrentDateIndicatorLabelOptions\n             */\n            label: {\n                /**\n                 * Format of the label. This options is passed as the fist argument to\n                 * [dateFormat](/class-reference/Highcharts.Time#dateFormat) function.\n                 *\n                 * @type      {string}\n                 * @default   %a, %b %d %Y, %H:%M\n                 * @product   gantt\n                 * @apioption xAxis.currentDateIndicator.label.format\n                 */\n                format: '%a, %b %d %Y, %H:%M',\n                formatter: function (value, format) {\n                    return this.axis.chart.time.dateFormat(format || '', value);\n                },\n                rotation: 0,\n                /**\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @internal */\n                    fontSize: '0.7em'\n                }\n            }\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, PlotLineOrBandClass) {\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n            }\n            if (U.pushUnique(composedMembers, PlotLineOrBandClass)) {\n                addEvent(PlotLineOrBandClass, 'render', onPlotLineOrBandRender);\n                wrap(PlotLineOrBandClass.prototype, 'getLabelText', wrapPlotLineOrBandGetLabelText);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAxisAfterSetOptions() {\n            const options = this.options, cdiOptions = options.currentDateIndicator;\n            if (cdiOptions) {\n                const plotLineOptions = typeof cdiOptions === 'object' ?\n                    merge(defaultOptions, cdiOptions) :\n                    merge(defaultOptions);\n                plotLineOptions.value = Date.now();\n                plotLineOptions.className = 'highcharts-current-date-indicator';\n                if (!options.plotLines) {\n                    options.plotLines = [];\n                }\n                options.plotLines.push(plotLineOptions);\n            }\n        }\n        /**\n         * @private\n         */\n        function onPlotLineOrBandRender() {\n            // If the label already exists, update its text\n            if (this.label) {\n                this.label.attr({\n                    text: this.getLabelText(this.options.label)\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapPlotLineOrBandGetLabelText(defaultMethod, defaultLabelOptions) {\n            const options = this.options;\n            if (options &&\n                options.className &&\n                options.className.indexOf('highcharts-current-date-indicator') !== -1 &&\n                options.label &&\n                typeof options.label.formatter === 'function') {\n                options.value = Date.now();\n                return options.label.formatter\n                    .call(this, options.value, options.label.format);\n            }\n            return defaultMethod.call(this, defaultLabelOptions);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const CurrentDateIndication = {\n            compose\n        };\n\n        return CurrentDateIndication;\n    });\n    _registerModule(_modules, 'masters/modules/gantt.src.js', [_modules['Core/Globals.js'], _modules['Gantt/Connection.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Gantt/Pathfinder.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Extensions/StaticScale.js'], _modules['Series/XRange/XRangeSeries.js'], _modules['Core/Chart/GanttChart.js'], _modules['Extensions/ArrowSymbols.js'], _modules['Extensions/CurrentDateIndication.js']], function (Highcharts, Connection, Navigator, Pathfinder, Scrollbar, RangeSelector, StaticScale, XRangeSeries, GanttChart, ArrowSymbols, CurrentDateIndication) {\n\n        const G = Highcharts;\n        // Classes\n        G.Connection = Connection;\n        G.GanttChart = GanttChart;\n        G.ganttChart = GanttChart.ganttChart;\n        G.Navigator = Navigator;\n        G.Pathfinder = Pathfinder;\n        G.RangeSelector = RangeSelector;\n        G.Scrollbar = Scrollbar;\n        // Compositions\n        ArrowSymbols.compose(G.SVGRenderer);\n        CurrentDateIndication.compose(G.Axis, G.PlotLineOrBand);\n        Pathfinder.compose(G.Chart, G.Point);\n        Navigator.compose(G.Axis, G.Chart, G.Series);\n        RangeSelector.compose(G.Axis, G.Chart);\n        Scrollbar.compose(G.Axis);\n        XRangeSeries.compose(G.Axis);\n        StaticScale.compose(G.Axis, G.Chart);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","H","U","defined","error","merge","objectEach","deg2rad","max","Math","min","constructor","from","to","options","chart","fromPoint","graphics","pathfinder","toPoint","init","series","renderPath","attribs","animation","styledMode","animate","forExport","anim","pathGraphic","connection","group","renderer","g","addClass","attr","zIndex","add","seriesGroup","translate","plotLeft","plotTop","opacity","d","addMarker","type","markerVector","radians","rotation","box","width","height","pathVector","segment","point","anchor","getPathfinderAnchorPoint","enabled","length","x","y","getRadiansToVector","getMarkerVector","radius","rotationOriginX","rotationOriginY","symbol","colorIndex","fill","color","stroke","lineColor","lineWidth","getPath","algorithm","algorithms","chartObstacles","obstacles","requiresObstacles","getChartObstacles","connectors","algorithmMargin","chartObstacleMetrics","getObstacleMetrics","startMarker","endMarker","lineObstacles","obstacleMetrics","hardBounds","xMin","xMax","plotWidth","yMin","yMax","plotHeight","obstacleOptions","margin","startDirectionX","getAlgorithmStartDirection","render","dashStyle","dashstyle","marker","ceil","pathResult","concat","destroy","val","isTouchDevice","addEvent","correctFloat","isNumber","pick","composedMembers","onAxisInit","axis","navigatorAxis","NavigatorAxisAdditions","onAxisZoom","e","chartOptions","navigator","pinchType","zooming","rangeSelector","zoomType","isXAxis","zoomed","range","previousZoom","newMin","newMax","preventDefault","compose","AxisClass","pushUnique","keepProps","push","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","horiz","fixedRange","halfPointRange","pointRange","dataMin","dataMax","Color","SeriesRegistry","parse","seriesTypes","NavigatorDefaults","maskInside","handles","symbols","backgroundColor","borderColor","maskFill","setOpacity","get","outlineColor","outlineWidth","areaspline","fillOpacity","compare","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","lastAnchor","units","dataLabels","id","className","threshold","xAxis","overscroll","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","style","fontSize","textOutline","crosshair","yAxis","startOnTick","endOnTick","minPadding","maxPadding","title","text","tickWidth","_x","_y","halfWidth","markerPosition","round","D","NavigatorSymbols","RendererRegistry","NavigatorConstructor","defaultOptions","setOptions","getRendererType","extend","onChartAfterAddSeries","setBaseSeries","onChartAfterSetChartSize","legendOptions","legend","scrollbarHeight","scrollButtonSize","inverted","left","opposite","chartWidth","spacing","top","navigatorOptions","chartHeight","scrollbar","extraBottomMargin","getHeight","verticalAlign","layout","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","redraw","onChartBeforeRender","onChartBeforeShowResetZoom","onChartCallback","extremes","getExtremes","onChartUpdate","scrollbarOptions","onSeriesAfterUpdate","isInternal","ChartClass","NavigatorClass","SeriesClass","chartProto","prototype","callbacks","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","Infinity","scrollMax","onAxisAfterGetOffset","index","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","unitedMin","unitedMax","reversed","shouldUpdateExtremes","DOMType","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","destroyObjectProperties","fireEvent","removeEvent","swapXY","forEach","seg","temp","len","i","_events","chartX","chartY","scrollbarButtons","scrollbarGroup","scrollbarLeft","scrollbarRifles","scrollbarStrokeWidth","scrollbarTop","track","userOptions","addEvents","buttonsOrder","buttons","bar","element","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","hasTouch","updatePosition","trigger","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","rect","crisp","r","strokeWidth","arrow","pointer","normalize","mousePosition","initPositions","grabbedCenter","change","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","fromPX","newSize","fullWidth","toPX","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","update","Axis","NavigatorComposition","clamp","erase","find","isArray","splat","numExt","extreme","numbers","filter","call","Navigator","baseSeries","navigatorEnabled","navigatorGroup","navigatorSeries","navigatorSize","outline","shades","zoomedMax","zoomedMin","drawHandle","verb","parseInt","drawOutline","halfOutline","outlineCorrection","navigatorTop","lineTop","lineBtm","verticalMin","drawMasks","navigatorHeight","shade","renderElements","mouseCursor","cursor","visibility","hasMask","css","handlesOptions","scrollbarXAxis","fake","minRange","maxRange","navigatorWidth","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","addMouseEvents","container","eventsToUnbind","onMouseMove","onMouseUp","getPartsEvents","renderTo","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","adaptToUpdatedData","updatedDataHandler","modifyBaseAxisExtremes","scrollbarEnabled","Boolean","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","ordinal","keepOrdinalPadding","zoomEnabled","offsets","alignTicks","data","updateNavigatorSeries","unbindRedraw","value","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","linkedTo","padXAxis","showInLegend","stacking","states","inactive","navSeries","base","indexOf","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","reduce","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","hasSetExtremes","unmutable","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","applyRadius","prevSeg","nextSeg","x1","y1","x2","y2","directionX","directionY","getLinkPath","pathParams","parentVisible","straight","curved","PathUtilities","findLastObstacleBefore","startIx","right","cmp","findObstacleFromPoint","obstacle","pathFromSegments","segments","start","end","limitObstacleToBounds","bounds","simpleConnect","startObstacleIx","endObstacleIx","endSegment","dir","startObstacle","waypoint","useMax","endPoint","copyFromPoint","fromKey","toKey","getMeOut","prevWaypoint","waypoint2","fastAvoid","dirIsX","endSegments","metrics","softMinX","maxWidth","softMaxX","softMinY","maxHeight","softMaxY","extractedEndPoint","forceObstacleBreak","pivotPoint","directionIsX","firstPoint","lastPoint","highestPoint","lowestPoint","searchDirection","getDodgeDirection","softBounds","soft","hard","toPointMax","toPointMin","maxOutOfSoftBounds","minOutOfSoftBounds","maxOutOfHardBounds","minOutOfHardBounds","minDistance","maxDistance","minPivot","maxPivot","extractFromObstacle","goalPoint","clearPathTo","pivot","waypointUseMax","envelopingObstacle","secondEnvelopingObstacle","envelopWaypoint","obstacleMargin","inside","ConnectorsDefaults","ConnectionComposition","getPointBB","shapeArgs","bb","graphic","getBBox","plotX","plotY","pointGetPathfinderAnchorPoint","markerOptions","pointGetRadiansToVector","v1","v2","atan2","pointGetMarkerVector","markerRadius","twoPI","PI","rectWidth","rectHeight","rAtan","rectHalfWidth","rectHalfHeight","rectHorizontalCenter","rectVerticalCenter","edgePoint","theta","tanTheta","leftOrRightRegion","xFactor","yFactor","tan","cos","sin","PathfinderClass","PointClass","acc","pointProto","Connection","PathfinderAlgorithms","PathfinderComposition","Point","Pathfinder","connections","deferRender","oldConnections","points","ganttPointOptions","dependency","connect","connects","isInside","j","k","found","lenOld","lenNew","oldCon","newCon","renderConnections","conns","pathfinderRemoveRenderEvent","calculatedMargin","sLen","pLen","sort","a","b","calculateObstacleMargin","onstacleDistance","distances","calculateObstacleDistance","bbMargin","yOverlap","xOverlap","xDistance","yDistance","xCenter","yCenter","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","time","getTrueRange","count","timeName","date","Date","basePeriod","set","getTime","MIN_VALUE","_offsetMin","onChartAfterGetContainer","deferredYTDClick","clickButton","updateNames","setScale","getAxisMargins","extraTopMargin","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","splice","onChartGetMargins","rangeSelectorHeight","marginBottom","onChartRender","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","RangeSelectorComposition","SVGElement","createElement","discardElement","pad","pInt","RangeSelector","buttonOptions","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","minSetting","rangeSetting","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","setDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","updateButtonStates","actualRange","hasNoData","hasVisibleSeries","day","ytdMin","ytdMax","selectedExists","button","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","state","isYTDButNotSelected","isAllButAlreadyShowingAll","isSameRange","month","year","disable","select","setState","disabled","fixedTimes","millisecond","second","minute","hour","week","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","dateFormat","inputTypeFormats","setInputExtremes","format","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","label","on","focus","preferredInputType","ms","some","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","now","startOfYear","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","alignElements","buttonGroup","isMS","currentButtonIndex","zoomText","paddingLeft","paddingRight","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","hover","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","inputGroupX","alignOptions","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","userButtonTheme","getAttribs","hasActiveButton","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","subtitle","rSelector","key","HTMLElement","onAxisAfterSetOptions","staticScale","scrollablePlotArea","minHeight","chartAdjustHeight","redrawTrigger","initiatedScale","brokenAxis","unitLength","tickInterval","diff","scrollablePixelsY","setSize","clipRect","sharedClipKey","sharedClips","adjustHeight","isObject","colorByPoint","formatter","amount","partialFill","tooltip","headerFormat","pointFormat","borderRadius","column","pointClass","ColumnPoint","XRangePoint","arguments","getColorByCategory","colorCount","resolveColor","drawPoint","getAnimationVerb","getLabelConfig","cfg","yCats","categories","yCategory","category","isValid","ttBelow","tooltipDateKeys","XRangeSeriesDefaults","noop","ColumnSeries","relativeLength","onAxisAfterGetSeriesExtremes","modMax","x2Data","XRangeSeries","getColumnMetrics","swapAxes","cropData","yData","crop","findPointIndex","pointIndex","cropStart","touched","cropped","alignDataLabel","oldPlotX","dlBox","centerX","translatePoint","columnMetrics","minPointLength","oldColWidth","seriesXOffset","pointXOffset","posX","plotX2","borderWidth","crisper","widthDifference","pointHeight","dlLeft","dlRight","dlWidth","clipRectWidth","pointWidth","pointPlacement","tooltipPos","xIndex","yIndex","tooltipYOffset","partShapeArgs","clipRectArgs","seriesOpts","shapeType","pointState","stateOpts","pointStateVerb","pointAttr","pointAttribs","pfOptions","isNull","getClassName","partRect","partialClipRect","clip","shadow","brighten","drawPoints","pointCount","animationLimit","isPointInside","pointArrayMap","getExtremesFromAll","parallelArrays","requireSorting","autoIncrement","buildKDTree","registerSeriesType","xrange","GanttPoint","setGanttPointAliases","addIfExists","completed","applyOptions","ganttPoint","milestone","StackItem","BrokenAxis","setBreaks","hasBreaks","onAxisAfterSetTickPositions","tickPositions","info","newPositions","isInAnyBreak","Additions","onSeriesAfterGeneratePoints","isDirty","connectNulls","nullGap","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","breakArray","breaksOutOfRange","brk","isOut","otherBreak","toUpperCase","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","current","next","gapUnit","basePointRange","xRange","stack","stacks","stackKey","stackLabels","total","getGraphPath","seriesProto","gappedPath","isInBreak","repeat","test","inclusive","lin2Val","nval","val2Lin","findBreakAt","testKeep","inbrk","keep","showPoints","forceRedraw","val2lin","lin2val","eventArguments","axisBreak","setAxisTranslation","breakArrayT","pointRangePadding","inBrk","move","breakSize","transA","minPixelPadding","minPointOffset","GridAxisSide","dateFormats","timeUnits","wrap","getMaxLabelDimensions","ticks","dimensions","pos","tick","labelHeight","labelWidth","textPxLength","treeGrid","mapOfPosToGridNode","treeDepth","indentation","onAfterGetOffset","grid","columns","getOffset","onAfterGetTitlePosition","gridOptions","axisTitle","axisHeight","axisLeft","axisTop","axisWidth","tickSize","titleWidth","xOption","yOption","titleMargin","titleFontSize","fontMetrics","f","crispCorr","offAxis","side","bottom","titlePosition","onAfterInit","applyGridOptions","showLastLabel","labelRotation","minTickInterval","columnIndex","columnOptions","isColumn","onAfterRender","maxLabelDimensions","rightWall","isOuterAxis","axisLine","linePath","getLinePath","startPoint","distance","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","tickmarkOffset","lowerBorderStartPoint","lowerBorderPath","upperBorder","renderBorder","lowerBorder","axisLineExtra","showAxis","hasRendered","linkedParent","tickMark","lastTick","firstTick","hiddenLabels","pop","hiddenMarks","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","dateTimeLabelFormats","unitName","onAfterSetOptions","gridAxisOptions","list","reserveSpace","tickPositioner","parentInfo","unitIdx","unit","counts","unitRange","getTimeTicks","startOfWeek","onAfterSetOptions2","onAfterSetScale","onAfterTickSize","labelPadding","cellHeight","onDestroy","keepEvents","onInit","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","labelOpts","tickPos","nextTickPos","slotWidth","lblMetrics","useHTML","lines","h","onTickLabelFormat","pointCopy","isFirst","p","is","gantt","onTrimTicks","categoryAxis","firstPos","lastPos","linkedMin","linkedMax","isLinked","wrapUnsquish","proceed","Array","parentAxis","thisIndex","lastIndex","otherAxis","extraBorderLine","axisBorder","E","timestamp","charAt","W","unitsToOmit","firstDay","thursday","valueOf","firstThursday","toString","TickClass","getNode","parent","level","mapOfIdToChildren","after","before","node","depth","descendants","children","map","child","childStart","NaN","childEnd","getTree","getListOfParents","listOfParents","prev","curr","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","symbolOptions","lbOptions","isTreeGrid","result","wrapRenderLabel","collapsed","addClassName","removeClassName","shouldRender","prefixClassName","isCollapsed","renderLabelIcon","params","isNew","labelIcon","labelBox","xy","iconCenter","icon","styles","parentGroup","removeClass","object","attachedTreeGridEvents","textDecoration","onTickHoverExit","toggleCollapse","collapse","expand","getColor","colorIndexByPoint","mapOptionsToLevel","parentColor","parentColorIndex","siblings","chartOptionsChart","variateColor","colorVariation","getLevelOptions","defaults","converted","levels","item","levelIsConstant","setTreeValues","tree","idRoot","mapIdToNode","nodeRoot","optionsPoint","childrenTotal","levelDynamic","newOptions","isLeaf","updateRootId","rootId","rootNode","GridAxis","Tree","TreeGridTick","TU","TickConstructor","isString","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentGridNode","nodes","updateYValuesAndTickPos","setValues","seriesIndex","onBeforeRender","target","isDirtyData","arr","optionsToObject","hasNames","axisData","wrapGenerateTick","levelOptions","parameters","addLabel","wrapInit","TreeGridAxisAdditions","n","fontWeight","wrapSetTickInterval","getTickPositions","axisProps","utils","setCollapsedStatus","dataPoint","roundedMin","roundedMax","Chart","Tick","TreeGridAxis","Series","GanttSeries","cutOff","diamondShape","diamond","grouping","pointFormatter","formats","tooltipOptions","ttOptions","xDateFormat","retVal","tooltipFormatter","getDateFormat","closestPointRange","GanttChart","getOptions","callback","defaultLinkedTo","xAxisOptions","yAxisOptions","isGantt","ganttChart","c","w","arrowHalf","triangleLeft","triangleLeftHalf","SVGRendererClass","cdiOptions","currentDateIndicator","plotLineOptions","plotLines","onPlotLineOrBandRender","getLabelText","wrapPlotLineOrBandGetLabelText","defaultMethod","defaultLabelOptions","PlotLineOrBandClass","StaticScale","ArrowSymbols","CurrentDateIndication","G","SVGRenderer","PlotLineOrBand"],"mappings":"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"}