{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * Highcharts funnel module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/funnel', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/Funnel/FunnelSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts funnel module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Funnel charts are a type of chart often used to visualize stages in a\n         * sales project, where the top are the initial stages with the most\n         * clients. It requires that the modules/funnel.js file is loaded.\n         *\n         * @sample highcharts/demo/funnel/\n         *         Funnel demo\n         *\n         * @extends      plotOptions.pie\n         * @excluding    innerSize,size,dataSorting\n         * @product      highcharts\n         * @requires     modules/funnel\n         * @optionparent plotOptions.funnel\n         */\n        const FunnelSeriesDefaults = {\n            /**\n             * Initial animation is by default disabled for the funnel chart.\n             */\n            animation: false,\n            /**\n             * The corner radius of the border surrounding all points or series. A\n             * number signifies pixels. A percentage string, like for example `50%`,\n             * signifies a size relative to the series width.\n             *\n             * @sample highcharts/plotoptions/funnel-border-radius\n             *         Funnel and pyramid with rounded border\n             */\n            borderRadius: 0,\n            /**\n             * The center of the series. By default, it is centered in the middle\n             * of the plot area, so it fills the plot area height.\n             *\n             * @type    {Array<number|string>}\n             * @default [\"50%\", \"50%\"]\n             * @since   3.0\n             */\n            center: ['50%', '50%'],\n            /**\n             * The width of the funnel compared to the width of the plot area,\n             * or the pixel width if it is a number.\n             *\n             * @type  {number|string}\n             * @since 3.0\n             */\n            width: '90%',\n            /**\n             * The width of the neck, the lower part of the funnel. A number defines\n             * pixel width, a percentage string defines a percentage of the plot\n             * area width.\n             *\n             * @sample {highcharts} highcharts/demo/funnel/\n             *         Funnel demo\n             *\n             * @type  {number|string}\n             * @since 3.0\n             */\n            neckWidth: '30%',\n            /**\n             * The height of the funnel or pyramid. If it is a number it defines\n             * the pixel height, if it is a percentage string it is the percentage\n             * of the plot area height.\n             *\n             * @sample {highcharts} highcharts/demo/funnel/\n             *         Funnel demo\n             *\n             * @type  {number|string}\n             * @since 3.0\n             */\n            height: '100%',\n            /**\n             * The height of the neck, the lower part of the funnel. A number\n             * defines pixel width, a percentage string defines a percentage of the\n             * plot area height.\n             *\n             * @type {number|string}\n             */\n            neckHeight: '25%',\n            /**\n             * A reversed funnel has the widest area down. A reversed funnel with\n             * no neck width and neck height is a pyramid.\n             *\n             * @since 3.0.10\n             */\n            reversed: false,\n            /**\n             * To avoid adapting the data label size in Pie.drawDataLabels.\n             * @ignore-option\n             */\n            size: true,\n            dataLabels: {\n                connectorWidth: 1,\n                verticalAlign: 'middle'\n            },\n            /**\n             * Options for the series states.\n             */\n            states: {\n                /**\n                 * @excluding halo, marker, lineWidth, lineWidthPlus\n                 * @apioption plotOptions.funnel.states.hover\n                 */\n                /**\n                 * Options for a selected funnel item.\n                 *\n                 * @excluding halo, marker, lineWidth, lineWidthPlus\n                 */\n                select: {\n                    /**\n                     * A specific color for the selected point.\n                     *\n                     * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    color: \"#cccccc\" /* Palette.neutralColor20 */,\n                    /**\n                     * A specific border color for the selected point.\n                     *\n                     * @type {Highcharts.ColorString}\n                     */\n                    borderColor: \"#000000\" /* Palette.neutralColor100 */\n                }\n            }\n        };\n        /**\n         * A `funnel` series. If the [type](#series.funnel.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.funnel\n         * @excluding dataParser, dataURL, stack, xAxis, yAxis, dataSorting,\n         *            boostBlending, boostThreshold\n         * @product   highcharts\n         * @requires  modules/funnel\n         * @apioption series.funnel\n         */\n        /**\n         * An array of data points for the series. For the `funnel` series type,\n         * points can be given in the following ways:\n         *\n         * 1.  An array of numerical values. In this case, the numerical values\n         * will be interpreted as `y` options. Example:\n         *\n         *  ```js\n         *  data: [0, 5, 3, 5]\n         *  ```\n         *\n         * 2.  An array of objects with named values. The following snippet shows only a\n         * few settings, see the complete options set below. If the total number of data\n         * points exceeds the series' [turboThreshold](#series.funnel.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         y: 3,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         y: 1,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *  ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.pie.data\n         * @excluding sliced\n         * @product   highcharts\n         * @apioption series.funnel.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FunnelSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Funnel/FunnelSeries.js', [_modules['Series/Funnel/FunnelSeriesDefaults.js'], _modules['Core/Globals.js'], _modules['Extensions/BorderRadius.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (FunnelSeriesDefaults, H, BorderRadius, SeriesRegistry, U) {\n        /* *\n         *\n         *  Highcharts funnel module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { column: ColumnSeries, pie: PieSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, extend, fireEvent, isArray, merge, pick, pushUnique, relativeLength, splat } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const baseAlignDataLabel = SeriesRegistry.series.prototype.alignDataLabel;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get positions - either an integer or a percentage string must be\n         * given.\n         * @private\n         * @param {number|string|undefined} length\n         *        Length\n         * @param {number} relativeTo\n         *        Relative factor\n         * @return {number}\n         *         Relative position\n         */\n        function getLength(length, relativeTo) {\n            return (/%$/).test(length) ?\n                relativeTo * parseInt(length, 10) / 100 :\n                parseInt(length, 10);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.funnel\n         *\n         * @augments Highcharts.Series\n         */\n        class FunnelSeries extends PieSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            alignDataLabel(point, dataLabel, options, alignTo, isNew) {\n                const series = point.series, reversed = series.options.reversed, dlBox = point.dlBox || point.shapeArgs, align = options.align, verticalAlign = options.verticalAlign, inside = ((series.options || {}).dataLabels || {}).inside, centerY = series.center[1], pointPlotY = (reversed ?\n                    2 * centerY - point.plotY :\n                    point.plotY), widthAtLabel = series.getWidthAt(pointPlotY - dlBox.height / 2 +\n                    dataLabel.height), offset = verticalAlign === 'middle' ?\n                    (dlBox.topWidth - dlBox.bottomWidth) / 4 :\n                    (widthAtLabel - dlBox.bottomWidth) / 2;\n                let y = dlBox.y, x = dlBox.x;\n                // #16176: Only SVGLabel has height set\n                const dataLabelHeight = pick(dataLabel.height, dataLabel.getBBox().height);\n                if (verticalAlign === 'middle') {\n                    y = dlBox.y - dlBox.height / 2 + dataLabelHeight / 2;\n                }\n                else if (verticalAlign === 'top') {\n                    y = dlBox.y - dlBox.height + dataLabelHeight +\n                        (options.padding || 0);\n                }\n                if (verticalAlign === 'top' && !reversed ||\n                    verticalAlign === 'bottom' && reversed ||\n                    verticalAlign === 'middle') {\n                    if (align === 'right') {\n                        x = dlBox.x - options.padding + offset;\n                    }\n                    else if (align === 'left') {\n                        x = dlBox.x + options.padding - offset;\n                    }\n                }\n                alignTo = {\n                    x: x,\n                    y: reversed ? y - dlBox.height : y,\n                    width: dlBox.bottomWidth,\n                    height: dlBox.height\n                };\n                options.verticalAlign = 'bottom';\n                // Call the parent method\n                if (!inside || point.visible) {\n                    baseAlignDataLabel.call(series, point, dataLabel, options, alignTo, isNew);\n                }\n                if (inside) {\n                    if (!point.visible && point.dataLabel) {\n                        // Avoid animation from top\n                        point.dataLabel.placed = false;\n                    }\n                    // If label is inside and we have contrast, set it:\n                    if (point.contrastColor) {\n                        dataLabel.css({\n                            color: point.contrastColor\n                        });\n                    }\n                }\n            }\n            /**\n             * Extend the data label method.\n             * @private\n             */\n            drawDataLabels() {\n                (splat(this.options.dataLabels)[0].inside ?\n                    ColumnSeries :\n                    PieSeries).prototype.drawDataLabels.call(this);\n            }\n            /** @private */\n            getDataLabelPosition(point, distance) {\n                const y = point.plotY || 0, sign = point.half ? 1 : -1, x = this.getX(y, !!point.half, point);\n                return {\n                    distance,\n                    // Initial position of the data label - it's utilized for finding\n                    // the final position for the label\n                    natural: {\n                        x: 0,\n                        y\n                    },\n                    computed: {\n                    // Used for generating connector path - initialized later in\n                    // drawDataLabels function x: undefined, y: undefined\n                    },\n                    // Left - funnel on the left side of the data label\n                    // Right - funnel on the right side of the data label\n                    alignment: point.half ? 'right' : 'left',\n                    connectorPosition: {\n                        breakAt: {\n                            x: x + (distance - 5) * sign,\n                            y\n                        },\n                        touchingSliceAt: {\n                            x: x + distance * sign,\n                            y\n                        }\n                    }\n                };\n            }\n            /**\n             * Overrides the pie translate method.\n             * @private\n             */\n            translate() {\n                const series = this, chart = series.chart, options = series.options, reversed = options.reversed, ignoreHiddenPoint = options.ignoreHiddenPoint, borderRadiusObject = BorderRadius.optionsToObject(options.borderRadius), plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, center = options.center, centerX = getLength(center[0], plotWidth), centerY = getLength(center[1], plotHeight), width = getLength(options.width, plotWidth), height = getLength(options.height, plotHeight), neckWidth = getLength(options.neckWidth, plotWidth), neckHeight = getLength(options.neckHeight, plotHeight), neckY = (centerY - height / 2) + height - neckHeight, data = series.data, borderRadius = relativeLength(borderRadiusObject.radius, width), radiusScope = borderRadiusObject.scope, half = (options.dataLabels.position === 'left' ?\n                    1 :\n                    0), roundingFactors = (angle) => {\n                    const tan = Math.tan(angle / 2), cosA = Math.cos(alpha), sinA = Math.sin(alpha);\n                    let r = borderRadius, t = r / tan, k = Math.tan((Math.PI - angle) / 3.2104);\n                    if (t > maxT) {\n                        t = maxT;\n                        r = t * tan;\n                    }\n                    k *= r;\n                    return {\n                        dx: [t * cosA, (t - k) * cosA, t - k, t],\n                        dy: [t * sinA, (t - k) * sinA, t - k, t]\n                            .map((i) => (reversed ? -i : i))\n                    };\n                };\n                let sum = 0, cumulative = 0, // start at top\n                tempWidth, path, fraction, alpha, // the angle between top and left point's edges\n                maxT, x1, y1, x2, x3, y3, x4, y5;\n                series.getWidthAt = function (y) {\n                    const top = (centerY - height / 2);\n                    return (y > neckY || height === neckHeight) ?\n                        neckWidth :\n                        neckWidth + (width - neckWidth) *\n                            (1 - (y - top) / (height - neckHeight));\n                };\n                series.getX = function (y, half, point) {\n                    return centerX + (half ? -1 : 1) *\n                        ((series.getWidthAt(reversed ? 2 * centerY - y : y) / 2) +\n                            (point.dataLabel?.dataLabelPosition?.distance ??\n                                relativeLength(this.options.dataLabels?.distance || 0, width)));\n                };\n                // Expose\n                series.center = [centerX, centerY, height];\n                series.centerX = centerX;\n                /*\n                Individual point coordinate naming:\n\n                x1,y1 _________________ x2,y1\n                    \\                         /\n                    \\                       /\n                    \\                     /\n                    \\                   /\n                        \\                 /\n                    x3,y3 _________ x4,y3\n\n                Additional for the base of the neck:\n\n                        |               |\n                        |               |\n                        |               |\n                    x3,y5 _________ x4,y5\n\n                */\n                // get the total sum\n                for (const point of data) {\n                    if (point.y && point.isValid() &&\n                        (!ignoreHiddenPoint || point.visible !== false)) {\n                        sum += point.y;\n                    }\n                }\n                for (const point of data) {\n                    // set start and end positions\n                    y5 = null;\n                    fraction = sum ? point.y / sum : 0;\n                    y1 = centerY - height / 2 + cumulative * height;\n                    y3 = y1 + fraction * height;\n                    tempWidth = series.getWidthAt(y1);\n                    x1 = centerX - tempWidth / 2;\n                    x2 = x1 + tempWidth;\n                    tempWidth = series.getWidthAt(y3);\n                    x3 = centerX - tempWidth / 2;\n                    x4 = x3 + tempWidth;\n                    // the entire point is within the neck\n                    if (y1 > neckY) {\n                        x1 = x3 = centerX - neckWidth / 2;\n                        x2 = x4 = centerX + neckWidth / 2;\n                        // the base of the neck\n                    }\n                    else if (y3 > neckY) {\n                        y5 = y3;\n                        tempWidth = series.getWidthAt(neckY);\n                        x3 = centerX - tempWidth / 2;\n                        x4 = x3 + tempWidth;\n                        y3 = neckY;\n                    }\n                    if (reversed) {\n                        y1 = 2 * centerY - y1;\n                        y3 = 2 * centerY - y3;\n                        if (y5 !== null) {\n                            y5 = 2 * centerY - y5;\n                        }\n                    }\n                    if (borderRadius && (radiusScope === 'point' ||\n                        point.index === 0 ||\n                        point.index === data.length - 1 ||\n                        y5 !== null)) {\n                        // Creating the path of funnel points with rounded corners\n                        // (#18839)\n                        const h = Math.abs(y3 - y1), xSide = x2 - x4, lBase = x4 - x3, lSide = Math.sqrt(xSide * xSide + h * h);\n                        alpha = Math.atan(h / xSide);\n                        maxT = lSide / 2;\n                        if (y5 !== null) {\n                            maxT = Math.min(maxT, Math.abs(y5 - y3) / 2);\n                        }\n                        if (lBase >= 1) {\n                            maxT = Math.min(maxT, lBase / 2);\n                        }\n                        // Creating a point base\n                        let f = roundingFactors(alpha);\n                        if (radiusScope === 'stack' && point.index !== 0) {\n                            path = [\n                                ['M', x1, y1],\n                                ['L', x2, y1]\n                            ];\n                        }\n                        else {\n                            path = [\n                                ['M', x1 + f.dx[0], y1 + f.dy[0]],\n                                ['C',\n                                    x1 + f.dx[1], y1 + f.dy[1],\n                                    x1 + f.dx[2], y1,\n                                    x1 + f.dx[3], y1\n                                ],\n                                ['L', x2 - f.dx[3], y1],\n                                ['C',\n                                    x2 - f.dx[2], y1,\n                                    x2 - f.dx[1], y1 + f.dy[1],\n                                    x2 - f.dx[0], y1 + f.dy[0]\n                                ]\n                            ];\n                        }\n                        if (y5 !== null) {\n                            // Closure of point with extension\n                            const fr = roundingFactors(Math.PI / 2);\n                            f = roundingFactors(Math.PI / 2 + alpha);\n                            path.push(['L', x4 + f.dx[0], y3 - f.dy[0]], ['C',\n                                x4 + f.dx[1], y3 - f.dy[1],\n                                x4, y3 + f.dy[2],\n                                x4, y3 + f.dy[3]\n                            ]);\n                            if (radiusScope === 'stack' &&\n                                point.index !== data.length - 1) {\n                                path.push(['L', x4, y5], ['L', x3, y5]);\n                            }\n                            else {\n                                path.push(['L', x4, y5 - fr.dy[3]], ['C',\n                                    x4, y5 - fr.dy[2],\n                                    x4 - fr.dx[2], y5,\n                                    x4 - fr.dx[3], y5\n                                ], ['L', x3 + fr.dx[3], y5], ['C',\n                                    x3 + fr.dx[2], y5,\n                                    x3, y5 - fr.dy[2],\n                                    x3, y5 - fr.dy[3]\n                                ]);\n                            }\n                            path.push(['L', x3, y3 + f.dy[3]], ['C',\n                                x3, y3 + f.dy[2],\n                                x3 - f.dx[1], y3 - f.dy[1],\n                                x3 - f.dx[0], y3 - f.dy[0]\n                            ]);\n                        }\n                        else if (lBase >= 1) {\n                            // Closure of point without extension\n                            f = roundingFactors(Math.PI - alpha);\n                            if (radiusScope === 'stack' && point.index === 0) {\n                                path.push(['L', x4, y3], ['L', x3, y3]);\n                            }\n                            else {\n                                path.push(['L', x4 + f.dx[0], y3 - f.dy[0]], ['C',\n                                    x4 + f.dx[1], y3 - f.dy[1],\n                                    x4 - f.dx[2], y3,\n                                    x4 - f.dx[3], y3\n                                ], ['L', x3 + f.dx[3], y3], ['C',\n                                    x3 + f.dx[2], y3,\n                                    x3 - f.dx[1], y3 - f.dy[1],\n                                    x3 - f.dx[0], y3 - f.dy[0]\n                                ]);\n                            }\n                        }\n                        else {\n                            // Creating a rounded tip of the \"pyramid\"\n                            f = roundingFactors(Math.PI - alpha * 2);\n                            path.push(['L', x3 + f.dx[0], y3 - f.dy[0]], ['C',\n                                x3 + f.dx[1], y3 - f.dy[1],\n                                x3 - f.dx[1], y3 - f.dy[1],\n                                x3 - f.dx[0], y3 - f.dy[0]\n                            ]);\n                        }\n                    }\n                    else {\n                        // Creating the path of funnel points without rounded corners\n                        path = [\n                            ['M', x1, y1],\n                            ['L', x2, y1],\n                            ['L', x4, y3]\n                        ];\n                        if (y5 !== null) {\n                            path.push(['L', x4, y5], ['L', x3, y5]);\n                        }\n                        path.push(['L', x3, y3]);\n                    }\n                    path.push(['Z']);\n                    // prepare for using shared dr\n                    point.shapeType = 'path';\n                    point.shapeArgs = { d: path };\n                    // for tooltips and data labels\n                    point.percentage = fraction * 100;\n                    point.plotX = centerX;\n                    point.plotY = (y1 + (y5 || y3)) / 2;\n                    // Placement of tooltips and data labels\n                    point.tooltipPos = [\n                        centerX,\n                        point.plotY\n                    ];\n                    point.dlBox = {\n                        x: x3,\n                        y: y1,\n                        topWidth: x2 - x1,\n                        bottomWidth: x4 - x3,\n                        height: Math.abs(pick(y5, y3) - y1),\n                        width: NaN\n                    };\n                    // Slice is a noop on funnel points\n                    point.slice = noop;\n                    // Mimicking pie data label placement logic\n                    point.half = half;\n                    if (point.isValid() &&\n                        (!ignoreHiddenPoint || point.visible !== false)) {\n                        cumulative += fraction;\n                    }\n                }\n                fireEvent(series, 'afterTranslate');\n            }\n            /**\n             * Funnel items don't have angles (#2289).\n             * @private\n             */\n            sortByAngle(points) {\n                points.sort((a, b) => (a.plotY - b.plotY));\n            }\n        }\n        FunnelSeries.defaultOptions = merge(PieSeries.defaultOptions, FunnelSeriesDefaults);\n        extend(FunnelSeries.prototype, {\n            animate: noop\n        });\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (FunnelSeries) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass) {\n                if (pushUnique(composedMembers, ChartClass)) {\n                    addEvent(ChartClass, 'afterHideAllOverlappingLabels', onChartAfterHideAllOverlappingLabels);\n                }\n            }\n            FunnelSeries.compose = compose;\n            /** @private */\n            function onChartAfterHideAllOverlappingLabels() {\n                for (const series of this.series) {\n                    let dataLabelsOptions = series.options && series.options.dataLabels;\n                    if (isArray(dataLabelsOptions)) {\n                        dataLabelsOptions = dataLabelsOptions[0];\n                    }\n                    if (series.is('pie') &&\n                        series.placeDataLabels &&\n                        dataLabelsOptions &&\n                        !dataLabelsOptions.inside) {\n                        series.placeDataLabels();\n                    }\n                }\n            }\n        })(FunnelSeries || (FunnelSeries = {}));\n        SeriesRegistry.registerSeriesType('funnel', FunnelSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FunnelSeries;\n    });\n    _registerModule(_modules, 'Series/Pyramid/PyramidSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts funnel module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const PyramidSeriesDefaults = {\n            /**\n             * The pyramid neck width is zero by default, as opposed to the funnel,\n             * which shares the same layout logic.\n             *\n             * @since 3.0.10\n             */\n            neckWidth: '0%',\n            /**\n             * The pyramid neck width is zero by default, as opposed to the funnel,\n             * which shares the same layout logic.\n             *\n             * @since 3.0.10\n             */\n            neckHeight: '0%',\n            /**\n             * The pyramid is reversed by default, as opposed to the funnel, which\n             * shares the layout engine, and is not reversed.\n             *\n             * @since 3.0.10\n             */\n            reversed: true\n        };\n        /**\n         * A `pyramid` series. If the [type](#series.pyramid.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.pyramid\n         * @excluding dataParser, dataURL, stack, xAxis, yAxis, dataSorting,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  modules/funnel\n         * @apioption series.pyramid\n         */\n        /**\n         * An array of data points for the series. For the `pyramid` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.pyramid.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.pie.data\n         * @excluding sliced\n         * @product   highcharts\n         * @apioption series.pyramid.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PyramidSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Pyramid/PyramidSeries.js', [_modules['Series/Funnel/FunnelSeries.js'], _modules['Series/Pyramid/PyramidSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (FunnelSeries, PyramidSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  Highcharts funnel module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Pyramid series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pyramid\n         *\n         * @augments Highcharts.Series\n         */\n        class PyramidSeries extends FunnelSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n        }\n        /**\n         * A pyramid series is a special type of funnel, without neck and reversed\n         * by default.\n         *\n         * @sample highcharts/demo/pyramid/\n         *         Pyramid chart\n         *\n         * @extends      plotOptions.funnel\n         * @product      highcharts\n         * @requires     modules/funnel\n         * @optionparent plotOptions.pyramid\n         */\n        PyramidSeries.defaultOptions = merge(FunnelSeries.defaultOptions, PyramidSeriesDefaults);\n        SeriesRegistry.registerSeriesType('pyramid', PyramidSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PyramidSeries;\n    });\n    _registerModule(_modules, 'masters/modules/funnel.src.js', [_modules['Core/Globals.js'], _modules['Series/Funnel/FunnelSeries.js']], function (Highcharts, FunnelSeries) {\n\n        const G = Highcharts;\n        FunnelSeries.compose(G.Chart);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","animation","borderRadius","center","width","neckWidth","height","neckHeight","reversed","size","dataLabels","connectorWidth","verticalAlign","states","select","color","borderColor","FunnelSeriesDefaults","H","BorderRadius","SeriesRegistry","U","noop","column","ColumnSeries","pie","PieSeries","seriesTypes","addEvent","extend","fireEvent","isArray","merge","pick","pushUnique","relativeLength","splat","baseAlignDataLabel","series","prototype","alignDataLabel","getLength","length","relativeTo","test","parseInt","FunnelSeries","constructor","arguments","data","options","points","point","dataLabel","alignTo","isNew","dlBox","shapeArgs","align","inside","centerY","pointPlotY","plotY","widthAtLabel","getWidthAt","offset","topWidth","bottomWidth","y","x","dataLabelHeight","getBBox","padding","visible","call","placed","contrastColor","css","drawDataLabels","getDataLabelPosition","distance","sign","half","getX","natural","computed","alignment","connectorPosition","breakAt","touchingSliceAt","translate","chart","ignoreHiddenPoint","borderRadiusObject","optionsToObject","plotWidth","plotHeight","centerX","neckY","radius","radiusScope","scope","position","roundingFactors","angle","tan","Math","cosA","cos","alpha","sinA","sin","r","t","k","PI","maxT","dx","dy","map","i","sum","cumulative","tempWidth","fraction","x1","y1","x2","x3","y3","x4","y5","top","dataLabelPosition","isValid","index","h","abs","xSide","lBase","lSide","sqrt","atan","min","f","fr","push","shapeType","d","percentage","plotX","tooltipPos","NaN","slice","sortByAngle","sort","a","b","defaultOptions","animate","composedMembers","onChartAfterHideAllOverlappingLabels","dataLabelsOptions","is","placeDataLabels","compose","ChartClass","registerSeriesType","PyramidSeriesDefaults","PyramidSeries","G","Chart"],"mappings":"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"}