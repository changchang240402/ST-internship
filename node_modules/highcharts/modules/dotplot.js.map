{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * Dot plot series type for Highcharts\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/dotplot', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DotPlot/DotPlotSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  Dot plot series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DotPlotSeriesDefaults = {\n            itemPadding: 0.2,\n            marker: {\n                symbol: 'circle',\n                states: {\n                    hover: {},\n                    select: {}\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DotPlotSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/DotPlot/DotPlotSeries.js', [_modules['Series/DotPlot/DotPlotSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DotPlotSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  Dot plot series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * @private\n         * @todo\n         * - Check update, remove etc.\n         * - Custom icons like persons, carts etc. Either as images, font icons or\n         *   Highcharts symbols.\n         */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dotplot\n         *\n         * @augments Highcharts.Series\n         */\n        class DotPlotSeries extends ColumnSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            drawPoints() {\n                const series = this, options = series.options, renderer = series.chart.renderer, seriesMarkerOptions = options.marker, itemPaddingTranslated = series.yAxis.transA *\n                    options.itemPadding, borderWidth = series.borderWidth, crisp = borderWidth % 2 ? 0.5 : 1;\n                for (const point of series.points) {\n                    const pointMarkerOptions = point.marker || {}, symbol = (pointMarkerOptions.symbol ||\n                        seriesMarkerOptions.symbol), radius = pick(pointMarkerOptions.radius, seriesMarkerOptions.radius), isSquare = symbol !== 'rect';\n                    let yPos, attr, graphics, size, yTop, x, y;\n                    point.graphics = graphics = point.graphics || [];\n                    const pointAttr = point.pointAttr ?\n                        (point.pointAttr[point.selected ? 'selected' : ''] ||\n                            series.pointAttr['']) :\n                        series.pointAttribs(point, point.selected && 'select');\n                    delete pointAttr.r;\n                    if (series.chart.styledMode) {\n                        delete pointAttr.stroke;\n                        delete pointAttr['stroke-width'];\n                    }\n                    if (point.y !== null) {\n                        if (!point.graphic) {\n                            point.graphic = renderer.g('point').add(series.group);\n                        }\n                        yTop = pick(point.stackY, point.y);\n                        size = Math.min(point.pointWidth, series.yAxis.transA - itemPaddingTranslated);\n                        let i = Math.floor(yTop);\n                        for (yPos = yTop; yPos > yTop - point.y; yPos--, i--) {\n                            x = point.barX + (isSquare ?\n                                point.pointWidth / 2 - size / 2 :\n                                0);\n                            y = series.yAxis.toPixels(yPos, true) +\n                                itemPaddingTranslated / 2;\n                            if (series.options.crisp) {\n                                x = Math.round(x) - crisp;\n                                y = Math.round(y) + crisp;\n                            }\n                            attr = {\n                                x: x,\n                                y: y,\n                                width: Math.round(isSquare ? size : point.pointWidth),\n                                height: Math.round(size),\n                                r: radius\n                            };\n                            let graphic = graphics[i];\n                            if (graphic) {\n                                graphic.animate(attr);\n                            }\n                            else {\n                                graphic = renderer.symbol(symbol)\n                                    .attr(extend(attr, pointAttr))\n                                    .add(point.graphic);\n                            }\n                            graphic.isActive = true;\n                            graphics[i] = graphic;\n                        }\n                    }\n                    let i = -1;\n                    for (const graphic of graphics) {\n                        ++i;\n                        if (graphic) {\n                            if (!graphic.isActive) {\n                                graphic.destroy();\n                                graphics.splice(i, 1);\n                            }\n                            else {\n                                graphic.isActive = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        DotPlotSeries.defaultOptions = merge(ColumnSeries.defaultOptions, DotPlotSeriesDefaults);\n        extend(DotPlotSeries.prototype, {\n            markerAttribs: void 0\n        });\n        SeriesRegistry.registerSeriesType('dotplot', DotPlotSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DotPlotSeries;\n    });\n    _registerModule(_modules, 'masters/modules/dotplot.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","itemPadding","marker","symbol","states","hover","select","DotPlotSeriesDefaults","SeriesRegistry","U","column","ColumnSeries","seriesTypes","extend","merge","pick","DotPlotSeries","constructor","arguments","data","options","points","drawPoints","series","renderer","chart","seriesMarkerOptions","itemPaddingTranslated","yAxis","transA","borderWidth","crisp","point","yPos","attr","graphics","size","yTop","x","y","pointMarkerOptions","radius","isSquare","pointAttr","selected","pointAttribs","r","styledMode","stroke","graphic","g","add","group","stackY","Math","min","pointWidth","i","floor","barX","toPixels","round","width","height","animate","isActive","destroy","splice","defaultOptions","prototype","markerAttribs","registerSeriesType"],"mappings":"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"}