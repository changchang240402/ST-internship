{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n * Treegraph chart series type\n *\n *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/treegraph', ['highcharts', 'highcharts/modules/treemap'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/PathUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const getLinkPath = {\n            'default': getDefaultPath,\n            straight: getStraightPath,\n            curved: getCurvedPath\n        };\n        function getDefaultPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, radius, parentVisible } = pathParams;\n            const path = [\n                ['M', x1, y1],\n                ['L', x1, y1],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2]\n            ];\n            return parentVisible ?\n                applyRadius([\n                    ['M', x1, y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y2],\n                    ['L', x2, y2]\n                ], radius) :\n                path;\n        }\n        function getStraightPath(pathParams) {\n            const { x1, y1, x2, y2, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ? [\n                ['M', x1, y1],\n                ['L', x1 + width * (inverted ? -1 : 1), y2],\n                ['L', x2, y2]\n            ] : [\n                ['M', x1, y1],\n                ['L', x1, y2],\n                ['L', x1, y2]\n            ];\n        }\n        function getCurvedPath(pathParams) {\n            const { x1, y1, x2, y2, offset = 0, width = 0, inverted = false, parentVisible } = pathParams;\n            return parentVisible ?\n                [\n                    ['M', x1, y1],\n                    [\n                        'C',\n                        x1 + offset,\n                        y1,\n                        x1 - offset + width * (inverted ? -1 : 1),\n                        y2,\n                        x1 + width * (inverted ? -1 : 1),\n                        y2\n                    ],\n                    ['L', x2, y2]\n                ] :\n                [\n                    ['M', x1, y1],\n                    ['C', x1, y1, x1, y2, x1, y2],\n                    ['L', x2, y2]\n                ];\n        }\n        /**\n         * General function to apply corner radius to a path\n         * @private\n         */\n        function applyRadius(path, r) {\n            const d = [];\n            for (let i = 0; i < path.length; i++) {\n                const x = path[i][1];\n                const y = path[i][2];\n                if (typeof x === 'number' && typeof y === 'number') {\n                    // moveTo\n                    if (i === 0) {\n                        d.push(['M', x, y]);\n                    }\n                    else if (i === path.length - 1) {\n                        d.push(['L', x, y]);\n                        // curveTo\n                    }\n                    else if (r) {\n                        const prevSeg = path[i - 1];\n                        const nextSeg = path[i + 1];\n                        if (prevSeg && nextSeg) {\n                            const x1 = prevSeg[1], y1 = prevSeg[2], x2 = nextSeg[1], y2 = nextSeg[2];\n                            // Only apply to breaks\n                            if (typeof x1 === 'number' &&\n                                typeof x2 === 'number' &&\n                                typeof y1 === 'number' &&\n                                typeof y2 === 'number' &&\n                                x1 !== x2 &&\n                                y1 !== y2) {\n                                const directionX = x1 < x2 ? 1 : -1, directionY = y1 < y2 ? 1 : -1;\n                                d.push([\n                                    'L',\n                                    x - directionX * Math.min(Math.abs(x - x1), r),\n                                    y - directionY * Math.min(Math.abs(y - y1), r)\n                                ], [\n                                    'C',\n                                    x,\n                                    y,\n                                    x,\n                                    y,\n                                    x + directionX * Math.min(Math.abs(x - x2), r),\n                                    y + directionY * Math.min(Math.abs(y - y2), r)\n                                ]);\n                            }\n                        }\n                        // lineTo\n                    }\n                    else {\n                        d.push(['L', x, y]);\n                    }\n                }\n            }\n            return d;\n        }\n        const PathUtilities = {\n            applyRadius,\n            getLinkPath\n        };\n\n        return PathUtilities;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphNode.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { treemap: { prototype: { NodeClass: TreemapNode } } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreegraphNode extends TreemapNode {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.mod = 0;\n                this.shift = 0;\n                this.change = 0;\n                this.children = [];\n                this.preX = 0;\n                this.hidden = false;\n                this.wasVisited = false;\n                this.collapsed = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Get the next left node which is either first child or thread.\n             *\n             * @return {TreegraphNode|undefined}\n             *         Next left node child or thread.\n             */\n            nextLeft() {\n                return this.getLeftMostChild() || this.thread;\n            }\n            /**\n             * Get the next right node which is either last child or thread.\n             *\n             * @return {TreegraphNode|undefined}\n             *         Next right node child or thread.\n             */\n            nextRight() {\n                return this.getRightMostChild() || this.thread;\n            }\n            /**\n             * Return the left one of the greatest uncommon ancestors of a\n             * leftInternal node and it's right neighbor.\n             *\n             * @param {TreegraphNode} leftIntNode\n             * @param {TreegraphNode} defaultAncestor\n             * @return {TreegraphNode}\n             *         Left one of the greatest uncommon ancestors of a leftInternal\n             *         node and it's right neighbor.\n             *\n             */\n            getAncestor(leftIntNode, defaultAncestor) {\n                const leftAnc = leftIntNode.ancestor;\n                if (leftAnc.children[0] === this.children[0]) {\n                    return leftIntNode.ancestor;\n                }\n                return defaultAncestor;\n            }\n            /**\n             * Get node's first sibling, which is not hidden.\n             *\n             * @return {TreegraphNode|undefined}\n             *         First sibling of the node which is not hidden or undefined, if it\n             *         does not exists.\n             */\n            getLeftMostSibling() {\n                const parent = this.getParent();\n                if (parent) {\n                    for (const child of parent.children) {\n                        if (child && child.point.visible) {\n                            return child;\n                        }\n                    }\n                }\n            }\n            /**\n             * Check if the node is a leaf (if it has any children).\n             *\n             * @return {boolean}\n             *         If the node has no visible children return true.\n             */\n            hasChildren() {\n                const children = this.children;\n                for (let i = 0; i < children.length; i++) {\n                    if (children[i].point.visible) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            /**\n             * Get node's left sibling (if it exists).\n             *\n             * @return {TreegraphNode|undefined}\n             *         Left sibling of the node\n             */\n            getLeftSibling() {\n                const parent = this.getParent();\n                if (parent) {\n                    const children = parent.children;\n                    for (let i = this.relativeXPosition - 1; i >= 0; i--) {\n                        if (children[i] && children[i].point.visible) {\n                            return children[i];\n                        }\n                    }\n                }\n            }\n            /**\n             * Get the node's first child (if it exists).\n             *\n             * @return {TreegraphNode|undefined}\n             *         Node's first child which isn't hidden.\n             */\n            getLeftMostChild() {\n                const children = this.children;\n                for (let i = 0; i < children.length; i++) {\n                    if (children[i].point.visible) {\n                        return children[i];\n                    }\n                }\n            }\n            /**\n             * Get the node's last child (if it exists).\n             *\n             * @return {TreegraphNode|undefined}\n             *         Node's last child which isn't hidden.\n             */\n            getRightMostChild() {\n                const children = this.children;\n                for (let i = children.length - 1; i >= 0; i--) {\n                    if (children[i].point.visible) {\n                        return children[i];\n                    }\n                }\n            }\n            /**\n             * Get the parent of current node or return undefined for root of the\n             * tree.\n             *\n             * @return {TreegraphNode|undefined}\n             *         Node's parent or undefined for root.\n             */\n            getParent() {\n                return this.parentNode;\n            }\n            /**\n             * Get node's first child which is not hidden.\n             *\n             * @return {TreegraphNode|undefined}\n             *         First child.\n             */\n            getFirstChild() {\n                const children = this.children;\n                for (let i = 0; i < children.length; i++) {\n                    if (children[i].point.visible) {\n                        return children[i];\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreegraphNode;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphPoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { treemap: { prototype: { pointClass: TreemapPoint } } } } = SeriesRegistry;\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreegraphPoint extends TreemapPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.isLink = false;\n                this.series = void 0;\n                this.node = void 0;\n                this.setState = Point.prototype.setState;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            draw() {\n                super.draw.apply(this, arguments);\n                // run animation of hiding/showing of the point.\n                let graphic = this.graphic;\n                if (graphic) {\n                    graphic.animate({\n                        visibility: this.visible ? 'inherit' : 'hidden'\n                    });\n                }\n                this.renderCollapseButton();\n            }\n            renderCollapseButton() {\n                const point = this, series = point.series, parentGroup = point.graphic && point.graphic.parentGroup, levelOptions = series.mapOptionsToLevel[point.node.level || 0] || {}, btnOptions = merge(series.options.collapseButton, levelOptions.collapseButton, point.options.collapseButton), { width, height, shape, style } = btnOptions, padding = 2, chart = this.series.chart, calculatedOpacity = (point.visible &&\n                    (point.collapsed ||\n                        !btnOptions.onlyOnHover ||\n                        point.state === 'hover')) ? 1 : 0;\n                if (!point.shapeArgs) {\n                    return;\n                }\n                this.collapseButtonOptions = btnOptions;\n                if (!point.collapseButton) {\n                    if (!point.node.children.length || !btnOptions.enabled) {\n                        return;\n                    }\n                    const { x, y } = this.getCollapseBtnPosition(btnOptions), fill = (btnOptions.fillColor ||\n                        point.color ||\n                        \"#cccccc\" /* Palette.neutralColor20 */);\n                    point.collapseButton = chart.renderer\n                        .label(point.collapsed ? '+' : '-', x, y, shape)\n                        .attr({\n                        height: height - 2 * padding,\n                        width: width - 2 * padding,\n                        padding: padding,\n                        fill,\n                        rotation: chart.inverted ? 90 : 0,\n                        rotationOriginX: width / 2,\n                        rotationOriginY: height / 2,\n                        stroke: btnOptions.lineColor || \"#ffffff\" /* Palette.backgroundColor */,\n                        'stroke-width': btnOptions.lineWidth,\n                        'text-align': 'center',\n                        align: 'center',\n                        zIndex: 1,\n                        opacity: calculatedOpacity,\n                        visibility: point.visible ? 'inherit' : 'hidden'\n                    })\n                        .addClass('highcharts-tracker')\n                        .addClass('highcharts-collapse-button')\n                        .removeClass('highcharts-no-tooltip')\n                        .css(merge({\n                        color: typeof fill === 'string' ?\n                            chart.renderer.getContrast(fill) :\n                            \"#333333\" /* Palette.neutralColor80 */\n                    }, style))\n                        .add(parentGroup);\n                    point.collapseButton.element.point = point;\n                }\n                else {\n                    if (!point.node.children.length || !btnOptions.enabled) {\n                        point.collapseButton.destroy();\n                        delete point.collapseButton;\n                    }\n                    else {\n                        const { x, y } = this.getCollapseBtnPosition(btnOptions);\n                        point.collapseButton\n                            .attr({\n                            text: point.collapsed ? '+' : '-',\n                            rotation: chart.inverted ? 90 : 0,\n                            rotationOriginX: width / 2,\n                            rotationOriginY: height / 2,\n                            visibility: point.visible ? 'inherit' : 'hidden'\n                        })\n                            .animate({\n                            x,\n                            y,\n                            opacity: calculatedOpacity\n                        });\n                    }\n                }\n            }\n            toggleCollapse(state) {\n                this.collapsed = pick(state, !this.collapsed);\n                fireEvent(this.series, 'toggleCollapse');\n                this.series.redraw();\n            }\n            destroy() {\n                if (this.collapseButton) {\n                    this.collapseButton.destroy();\n                    delete this.collapseButton;\n                    this.collapseButton = void 0;\n                }\n                if (this.linkToParent) {\n                    this.linkToParent.destroy();\n                    delete this.linkToParent;\n                }\n                super.destroy.apply(this, arguments);\n            }\n            getCollapseBtnPosition(btnOptions) {\n                const point = this, chart = point.series.chart, inverted = chart.inverted, btnWidth = btnOptions.width, btnHeight = btnOptions.height, { x = 0, y = 0, width = 0, height = 0 } = point.shapeArgs || {};\n                return {\n                    x: x +\n                        btnOptions.x +\n                        (inverted ? -btnHeight * 0.3 : width + btnWidth * -0.3),\n                    y: y + height / 2 - btnHeight / 2 + btnOptions.y\n                };\n            }\n        }\n        addEvent(TreegraphPoint, 'mouseOut', function () {\n            const btn = this.collapseButton, btnOptions = this.collapseButtonOptions;\n            if (btn && btnOptions && btnOptions.onlyOnHover && !this.collapsed) {\n                btn.animate({ opacity: 0 });\n            }\n        });\n        addEvent(TreegraphPoint, 'mouseOver', function () {\n            if (this.collapseButton && this.visible) {\n                this.collapseButton.animate({ opacity: 1 }, this.series.options.states &&\n                    this.series.options.states.hover &&\n                    this.series.options.states.hover.animation);\n            }\n        });\n        // Handle showing and hiding of the points\n        addEvent(TreegraphPoint, 'click', function () {\n            this.toggleCollapse();\n        });\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n\n        return TreegraphPoint;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphLink.js', [_modules['Core/Series/Point.js'], _modules['Core/Utilities.js'], _modules['Core/Series/SeriesRegistry.js']], function (Point, U, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pick, extend } = U;\n        const { seriesTypes: { column: { prototype: { pointClass: ColumnPoint } } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class LinkPoint extends ColumnPoint {\n            constructor() {\n                super(...arguments);\n                /* *\n                *\n                *  Class properties\n                *\n                * */\n                this.isLink = true;\n                this.node = {};\n                this.formatPrefix = 'link';\n                this.dataLabelOnNull = true;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init(series, options, x, point) {\n                const link = super.init.apply(this, arguments);\n                this.formatPrefix = 'link';\n                this.dataLabelOnNull = true;\n                if (point) {\n                    link.fromNode = point.node.parentNode.point;\n                    link.visible = point.visible;\n                    link.toNode = point;\n                    this.id = link.toNode.id + '-' + link.fromNode.id;\n                }\n                return link;\n            }\n            update(options, redraw, animation, runEvent) {\n                const oldOptions = {\n                    id: this.id,\n                    formatPrefix: this.formatPrefix\n                };\n                Point.prototype.update.call(this, options, this.isLink ? false : redraw, // Hold the redraw for nodes\n                animation, runEvent);\n                this.visible = this.toNode.visible;\n                extend(this, oldOptions);\n                if (pick(redraw, true)) {\n                    this.series.chart.redraw(animation);\n                }\n            }\n        }\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n\n        return LinkPoint;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphLayout.js', [_modules['Series/Treegraph/TreegraphNode.js']], function (TreegraphNode) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreegraphLayout {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create dummy node, which allows to manually set the level of the node.\n             *\n             * @param {TreegraphNode} parent\n             *        Parent node, to which the dummyNode should be connected.\n             * @param {TreegraphNode} child\n             *        Child node, which should be connected to dummyNode.\n             * @param {number} gapSize\n             *        Remainig gap size.\n             * @param {number} index\n             *        The index of the link.\n             *\n             * @return {TreegraphNode}\n             *         DummyNode as a parent of nodes, which column changes.\n             */\n            static createDummyNode(parent, child, gapSize, index) {\n                // Initialise dummy node.\n                const dummyNode = new TreegraphNode();\n                dummyNode.id = parent.id + '-' + gapSize;\n                dummyNode.ancestor = parent;\n                // Add connection from new node to the previous points.\n                // First connection to itself.\n                dummyNode.children.push(child);\n                dummyNode.parent = parent.id;\n                dummyNode.parentNode = parent;\n                dummyNode.point = child.point;\n                dummyNode.level = child.level - gapSize;\n                dummyNode.relativeXPosition = child.relativeXPosition;\n                dummyNode.visible = child.visible;\n                // Then connection from parent to dummyNode.\n                parent.children[child.relativeXPosition] = dummyNode;\n                child.oldParentNode = parent;\n                child.relativeXPosition = 0;\n                // Then connection from child to dummyNode.\n                child.parentNode = dummyNode;\n                child.parent = dummyNode.id;\n                return dummyNode;\n            }\n            /**\n             * Walker algorithm of positioning the nodes in the treegraph improved by\n             * Buchheim to run in the linear time. Basic algorithm consists of post\n             * order traversal, which starts from going bottom up (first walk), and then\n             * pre order traversal top to bottom (second walk) where adding all of the\n             * modifiers is performed.\n             * link to the paper: http://dirk.jivas.de/papers/buchheim02improving.pdf\n             *\n             * @param {TreegraphSeries} series the Treegraph series\n             */\n            calculatePositions(series) {\n                const treeLayout = this;\n                const nodes = series.nodeList;\n                this.resetValues(nodes);\n                const root = series.tree;\n                if (root) {\n                    treeLayout.calculateRelativeX(root, 0);\n                    treeLayout.beforeLayout(nodes);\n                    treeLayout.firstWalk(root);\n                    treeLayout.secondWalk(root, -root.preX);\n                    treeLayout.afterLayout(nodes);\n                }\n            }\n            /**\n             * Create dummyNodes as parents for nodes, which column is changed.\n             *\n             * @param {Array<TreegraphNode>} nodes\n             *        All of the nodes.\n             */\n            beforeLayout(nodes) {\n                for (const node of nodes) {\n                    let index = 0;\n                    for (let child of node.children) {\n                        // Support for children placed in distant columns.\n                        if (child && child.level - node.level > 1) {\n                            // For further columns treat the nodes as a\n                            // single parent-child pairs till the column is achieved.\n                            let gapSize = child.level - node.level - 1;\n                            // parent -> dummyNode -> child\n                            while (gapSize > 0) {\n                                child = TreegraphLayout.createDummyNode(node, child, gapSize, index);\n                                gapSize--;\n                            }\n                        }\n                        ++index;\n                    }\n                }\n            }\n            /**\n             * Reset the caluclated values from the previous run.\n             * @param {TreegraphNode[]} nodes all of the nodes.\n             */\n            resetValues(nodes) {\n                for (const node of nodes) {\n                    node.mod = 0;\n                    node.ancestor = node;\n                    node.shift = 0;\n                    node.thread = void 0;\n                    node.change = 0;\n                    node.preX = 0;\n                }\n            }\n            /**\n             * Assigns the value to each node, which indicates, what is his sibling\n             * number.\n             *\n             * @param {TreegraphNode} node\n             *        Root node\n             * @param {number} index\n             *        Index to which the nodes position should be set\n             */\n            calculateRelativeX(node, index) {\n                const treeLayout = this, children = node.children;\n                for (let i = 0, iEnd = children.length; i < iEnd; ++i) {\n                    treeLayout.calculateRelativeX(children[i], i);\n                }\n                node.relativeXPosition = index;\n            }\n            /**\n             * Recursive post order traversal of the tree, where the initial position\n             * of the nodes is calculated.\n             *\n             * @param {TreegraphNode} node\n             *        The node for which the position should be calculated.\n             */\n            firstWalk(node) {\n                const treeLayout = this, \n                // Arbitrary value used to position nodes in respect to each other.\n                siblingDistance = 1;\n                let leftSibling;\n                // If the node is a leaf, set it's position based on the left siblings.\n                if (!node.hasChildren()) {\n                    leftSibling = node.getLeftSibling();\n                    if (leftSibling) {\n                        node.preX = leftSibling.preX + siblingDistance;\n                        node.mod = node.preX;\n                    }\n                    else {\n                        node.preX = 0;\n                    }\n                }\n                else {\n                    // If the node has children, perform the recursive first walk for\n                    // its children, and then calculate its shift in the apportion\n                    // function (most crucial part part of the algorythm).\n                    let defaultAncestor = node.getLeftMostChild();\n                    for (const child of node.children) {\n                        treeLayout.firstWalk(child);\n                        defaultAncestor = treeLayout.apportion(child, defaultAncestor);\n                    }\n                    treeLayout.executeShifts(node);\n                    const leftChild = node.getLeftMostChild(), rightChild = node.getRightMostChild(), \n                    // Set the position of the parent as a middle point of its\n                    // children and move it by the value of the leftSibling (if it\n                    // exists).\n                    midPoint = (leftChild.preX + rightChild.preX) / 2;\n                    leftSibling = node.getLeftSibling();\n                    if (leftSibling) {\n                        node.preX = leftSibling.preX + siblingDistance;\n                        node.mod = node.preX - midPoint;\n                    }\n                    else {\n                        node.preX = midPoint;\n                    }\n                }\n            }\n            /**\n             * Pre order traversal of the tree, which sets the final xPosition of the\n             * node as its preX value and sum of all if it's parents' modifiers.\n             *\n             * @param {TreegraphNode} node\n             *        The node, for which the final position should be calculated.\n             * @param {number} modSum\n             *        The sum of modifiers of all of the parents.\n             */\n            secondWalk(node, modSum) {\n                const treeLayout = this;\n                // When the chart is not inverted we want the tree to be positioned from\n                // left to right with root node close to the chart border, this is why\n                // x and y positions are switched.\n                node.yPosition = node.preX + modSum;\n                node.xPosition = node.level;\n                for (const child of node.children) {\n                    treeLayout.secondWalk(child, modSum + node.mod);\n                }\n            }\n            /**\n             *  Shift all children of the current node from right to left.\n             *\n             * @param {TreegraphNode} node\n             *        The parent node.\n             */\n            executeShifts(node) {\n                let shift = 0, change = 0;\n                for (let i = node.children.length - 1; i >= 0; i--) {\n                    const childNode = node.children[i];\n                    childNode.preX += shift;\n                    childNode.mod += shift;\n                    change += childNode.change;\n                    shift += childNode.shift + change;\n                }\n            }\n            /**\n             * The core of the algorithm. The new subtree is combined with the previous\n             * subtrees. Threads are used to traverse the inside and outside contours of\n             * the left and right subtree up to the highest common level. The vertecies\n             * are left(right)Int(Out)node where Int means internal and Out means\n             * outernal. For summing up the modifiers along the contour we use the\n             * `left(right)Int(Out)mod` variable. Whenever two nodes of the inside\n             * contours are in conflict we comute the left one of the greatest uncommon\n             * ancestors using the getAncestor function and we call the moveSubtree\n             * method to shift the subtree and prepare the shifts of smaller subrtees.\n             * Finally we add a new thread (if necessary) and we adjust ancestor of\n             * right outernal node or defaultAncestor.\n             *\n             * @param {TreegraphNode} node\n             * @param {TreegraphNode} defaultAncestor\n             *        The default ancestor of the passed node.\n             */\n            apportion(node, defaultAncestor) {\n                const treeLayout = this, leftSibling = node.getLeftSibling();\n                if (leftSibling) {\n                    let rightIntNode = node, rightOutNode = node, leftIntNode = leftSibling, leftOutNode = rightIntNode.getLeftMostSibling(), rightIntMod = rightIntNode.mod, rightOutMod = rightOutNode.mod, leftIntMod = leftIntNode.mod, leftOutMod = leftOutNode.mod;\n                    while (leftIntNode &&\n                        leftIntNode.nextRight() &&\n                        rightIntNode &&\n                        rightIntNode.nextLeft()) {\n                        leftIntNode = leftIntNode.nextRight();\n                        leftOutNode = leftOutNode.nextLeft();\n                        rightIntNode = rightIntNode.nextLeft();\n                        rightOutNode = rightOutNode.nextRight();\n                        rightOutNode.ancestor = node;\n                        const siblingDistance = 1, shift = leftIntNode.preX +\n                            leftIntMod -\n                            (rightIntNode.preX + rightIntMod) +\n                            siblingDistance;\n                        if (shift > 0) {\n                            treeLayout.moveSubtree(node.getAncestor(leftIntNode, defaultAncestor), node, shift);\n                            rightIntMod += shift;\n                            rightOutMod += shift;\n                        }\n                        leftIntMod += leftIntNode.mod;\n                        rightIntMod += rightIntNode.mod;\n                        leftOutMod += leftOutNode.mod;\n                        rightOutMod += rightOutNode.mod;\n                    }\n                    if (leftIntNode &&\n                        leftIntNode.nextRight() &&\n                        !rightOutNode.nextRight()) {\n                        rightOutNode.thread = leftIntNode.nextRight();\n                        rightOutNode.mod += leftIntMod - rightOutMod;\n                    }\n                    if (rightIntNode &&\n                        rightIntNode.nextLeft() &&\n                        !leftOutNode.nextLeft()) {\n                        leftOutNode.thread = rightIntNode.nextLeft();\n                        leftOutNode.mod += rightIntMod - leftOutMod;\n                    }\n                    defaultAncestor = node;\n                }\n                return defaultAncestor;\n            }\n            /**\n             * Shifts the subtree from leftNode to rightNode.\n             *\n             * @param {TreegraphNode} leftNode\n             * @param {TreegraphNode} rightNode\n             * @param {number} shift\n             *        The value, by which the subtree should be moved.\n             */\n            moveSubtree(leftNode, rightNode, shift) {\n                const subtrees = rightNode.relativeXPosition - leftNode.relativeXPosition;\n                rightNode.change -= shift / subtrees;\n                rightNode.shift += shift;\n                rightNode.preX += shift;\n                rightNode.mod += shift;\n                leftNode.change += shift / subtrees;\n            }\n            /**\n             * Clear values created in a beforeLayout.\n             *\n             * @param {TreegraphNode[]} nodes\n             *        All of the nodes of the Treegraph Series.\n             */\n            afterLayout(nodes) {\n                for (const node of nodes) {\n                    if (node.oldParentNode) {\n                        // Restore default connections\n                        node.relativeXPosition = node.parentNode.relativeXPosition;\n                        node.parent = node.oldParentNode.parent;\n                        node.parentNode = node.oldParentNode;\n                        // Delete dummyNode\n                        delete node.oldParentNode.children[node.relativeXPosition];\n                        node.oldParentNode.children[node.relativeXPosition] = node;\n                        node.oldParentNode = void 0;\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreegraphLayout;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A treegraph series is a diagram, which shows a relation between ancestors\n         * and descendants with a clear parent - child relation.\n         * The best examples of the dataStructures, which best reflect this chart\n         * are e.g. genealogy tree or directory structure.\n         *\n         * TODO change back the demo path\n         * @sample highcharts/demo/treegraph-chart\n         *         Treegraph Chart\n         *\n         * @extends      plotOptions.treemap\n         * @excluding    layoutAlgorithm, dashStyle, linecap, lineWidth,\n         *               negativeColor, threshold, zones, zoneAxis, colorAxis,\n         *               colorKey, compare, dataGrouping, endAgle, gapSize, gapUnit,\n         *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n         *               minSize, navigatorOptions, pointRange, allowTraversingTree,\n         *               alternateStartingDirection, borderRadius, breadcrumbs,\n         *               interactByLeaf, layoutStartingDirection, levelIsConstant,\n         *               lineWidth, negativeColor, nodes, sortIndex, zoneAxis,\n         *               zones\n         *\n         * @product      highcharts\n         * @since 10.3.0\n         * @requires     modules/treemap.js\n         * @requires     modules/treegraph.js\n         * @optionparent plotOptions.treegraph\n         */\n        const TreegraphSeriesDefaults = {\n            /**\n             * Flips the positions of the nodes of a treegraph along the\n             * horizontal axis (vertical if chart is inverted).\n             *\n             * @sample highcharts/series-treegraph/reversed-nodes\n             *         Treegraph series with reversed nodes.\n             *\n             * @type    {boolean}\n             * @default false\n             * @product highcharts\n             * @since 10.3.0\n             */\n            reversed: false,\n            /**\n             * @extends   plotOptions.series.marker\n             * @excluding enabled, enabledThreshold\n             */\n            marker: {\n                radius: 10,\n                lineWidth: 0,\n                symbol: 'circle',\n                fillOpacity: 1,\n                states: {}\n            },\n            link: {\n                /**\n                 * Modifier of the shape of the curved link. Works best for\n                 * values between 0 and 1, where 0 is a straight line, and 1 is\n                 * a shape close to the default one.\n                 *\n                 * @type      {number}\n                 * @default   0.5\n                 * @product   highcharts\n                 * @since 10.3.0\n                 * @apioption series.treegraph.link.curveFactor\n                 */\n                /**\n                 * The color of the links between nodes.\n                 *\n                 * @type {Highcharts.ColorString}\n                 * @private\n                 */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The line width of the links connecting nodes, in pixels.\n                 * @type {number}\n                 *\n                 * @private\n                 */\n                lineWidth: 1,\n                /**\n                 * Radius for the rounded corners of the links between nodes.\n                 * Works for `default` link type.\n                 *\n                 * @private\n                 */\n                radius: 10,\n                cursor: 'default',\n                /**\n                 * Type of the link shape.\n                 *\n                 * @sample   highcharts/series-treegraph/link-types\n                 *           Different link types\n                 *\n                 * @type {'default' | 'curved' | 'straight'}\n                 * @product highcharts\n                 *\n                 */\n                type: 'curved'\n            },\n            /**\n             * Options applied to collapse Button. The collape button is the\n             * small button which indicates, that the node is collapsable.\n             */\n            collapseButton: {\n                /**\n                 * Whether the button should be visible only when the node is\n                 * hovered. When set to true, the button is hidden for nodes,\n                 * which are not collapsed, and shown for the collapsed ones.\n                 */\n                onlyOnHover: true,\n                /**\n                 * Whether the button should be visible.\n                 */\n                enabled: true,\n                /**\n                 * The line width of the button in pixels\n                 */\n                lineWidth: 1,\n                /**\n                 * Offset of the button in the x direction.\n                 */\n                x: 0,\n                /**\n                 * Offset of the button in the y direction.\n                 */\n                y: 0,\n                /**\n                 * Height of the button.\n                 */\n                height: 18,\n                /**\n                 * Width of the button.\n                 */\n                width: 18,\n                /**\n                 * The symbol of the collapse button.\n                 */\n                shape: 'circle',\n                /**\n                 * CSS styles for the collapse button.\n                 *\n                 * In styled mode, the collapse button style is given in the\n                 * `.highcharts-collapse-button` class.\n                 */\n                style: {\n                    cursor: 'pointer',\n                    fontWeight: 'bold',\n                    fontSize: '1em'\n                }\n            },\n            /**\n             * Whether the treegraph series should fill the entire plot area in the X\n             * axis direction, even when there are collapsed points.\n             *\n             * @sample  highcharts/series-treegraph/fillspace\n             *          Fill space demonstrated\n             *\n             * @product highcharts\n             */\n            fillSpace: false,\n            /**\n             * @extends plotOptions.series.tooltip\n             */\n            tooltip: {\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are\n                 * enclosed by curly brackets. Available variables are\n                 * `point.id`,  `point.fromNode.id`, `point.toNode.id`,\n                 * `series.name`, `series.color` and other properties on the\n                 * same form. Furthermore, This can also be overridden for each\n                 * series, which makes it a good hook for displaying units. In\n                 * styled mode, the dot is colored by a class name rather than\n                 * the point color.\n                 *\n                 * @type {string}\n                 * @since 10.3.0\n                 * @product highcharts\n                 */\n                linkFormat: '{point.fromNode.id} \\u2192 {point.toNode.id}',\n                pointFormat: '{point.id}'\n                /**\n                 * A callback function for formatting the HTML output for a\n                 * single link in the tooltip. Like the `linkFormat` string,\n                 * but with more flexibility.\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction.<Highcharts.Point>}\n                 * @apioption series.treegraph.tooltip.linkFormatter\n                 *\n                 */\n            },\n            /**\n             * Options for the data labels appearing on top of the nodes and\n             * links. For treegraph charts, data labels are visible for the\n             * nodes by default, but hidden for links. This is controlled by\n             * modifying the `nodeFormat`, and the `format` that applies to\n             * links and is an empty string by default.\n             *\n             * @declare Highcharts.SeriesTreegraphDataLabelsOptionsObject\n             */\n            dataLabels: {\n                defer: true,\n                /**\n                 * Options for a _link_ label text which should follow link\n                 * connection. Border and background are disabled for a label\n                 * that follows a path.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option.\n                 * Setting `useHTML` to true will disable this option.\n                 *\n                 * @sample highcharts/series-treegraph/link-text-path\n                 *         Treegraph series with link text path dataLabels.\n                 *\n                 * @extends plotOptions.treegraph.dataLabels.textPath\n                 * @since 10.3.0\n                 */\n                linkTextPath: {\n                    attributes: {\n                        startOffset: '50%'\n                    }\n                },\n                enabled: true,\n                linkFormatter: () => '',\n                style: {\n                    textOverflow: 'none'\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreegraphSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphSeries.js', [_modules['Series/PathUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Series/Treegraph/TreegraphNode.js'], _modules['Series/Treegraph/TreegraphPoint.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js'], _modules['Series/Treegraph/TreegraphLink.js'], _modules['Series/Treegraph/TreegraphLayout.js'], _modules['Series/Treegraph/TreegraphSeriesDefaults.js']], function (PU, SeriesRegistry, SVGRenderer, TreegraphNode, TreegraphPoint, TU, U, TreegraphLink, TreegraphLayout, TreegraphSeriesDefaults) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getLinkPath } = PU;\n        const { series: { prototype: seriesProto }, seriesTypes: { treemap: TreemapSeries, column: ColumnSeries } } = SeriesRegistry;\n        const { prototype: { symbols } } = SVGRenderer;\n        const { getLevelOptions } = TU;\n        const { extend, merge, pick, relativeLength, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Treegraph series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treegraph\n         *\n         * @augments Highcharts.Series\n         */\n        class TreegraphSeries extends TreemapSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n                this.layoutModifier = void 0;\n                this.nodeMap = void 0;\n                this.tree = void 0;\n                this.nodeList = [];\n                this.layoutAlgorythm = void 0;\n                this.links = [];\n                this.mapOptionsToLevel = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init() {\n                super.init.apply(this, arguments);\n                this.layoutAlgorythm = new TreegraphLayout();\n            }\n            /**\n             * Calculate `a` and `b` parameters of linear transformation, where\n             * `finalPosition = a * calculatedPosition + b`.\n             *\n             * @return {LayoutModifiers} `a` and `b` parameter for x and y direction.\n             */\n            getLayoutModifiers() {\n                const chart = this.chart, series = this, plotSizeX = chart.plotSizeX, plotSizeY = chart.plotSizeY;\n                let minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity, maxXSize = 0, minXSize = 0, maxYSize = 0, minYSize = 0;\n                this.points.forEach((point) => {\n                    // When fillSpace is on, stop the layout calculation when the hidden\n                    // points are reached. (#19038)\n                    if (this.options.fillSpace && !point.visible) {\n                        return;\n                    }\n                    const node = point.node, level = series.mapOptionsToLevel[point.node.level] || {}, markerOptions = merge(this.options.marker, level.marker, point.options.marker), radius = relativeLength(markerOptions.radius || 0, Math.min(plotSizeX, plotSizeY)), symbol = markerOptions.symbol, nodeSizeY = (symbol === 'circle' || !markerOptions.height) ?\n                        radius * 2 :\n                        relativeLength(markerOptions.height, plotSizeY), nodeSizeX = symbol === 'circle' || !markerOptions.width ?\n                        radius * 2 :\n                        relativeLength(markerOptions.width, plotSizeX);\n                    node.nodeSizeX = nodeSizeX;\n                    node.nodeSizeY = nodeSizeY;\n                    let lineWidth;\n                    if (node.xPosition <= minX) {\n                        minX = node.xPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        minXSize = Math.max(nodeSizeX + lineWidth, minXSize);\n                    }\n                    if (node.xPosition >= maxX) {\n                        maxX = node.xPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        maxXSize = Math.max(nodeSizeX + lineWidth, maxXSize);\n                    }\n                    if (node.yPosition <= minY) {\n                        minY = node.yPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        minYSize = Math.max(nodeSizeY + lineWidth, minYSize);\n                    }\n                    if (node.yPosition >= maxY) {\n                        maxY = node.yPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        maxYSize = Math.max(nodeSizeY + lineWidth, maxYSize);\n                    }\n                });\n                // Calculate the values of linear transformation, which will later be\n                // applied as `nodePosition = a * x + b` for each direction.\n                const ay = maxY === minY ?\n                    1 :\n                    (plotSizeY - (minYSize + maxYSize) / 2) / (maxY - minY), by = maxY === minY ? plotSizeY / 2 : -ay * minY + minYSize / 2, ax = maxX === minX ?\n                    1 :\n                    (plotSizeX - (maxXSize + maxXSize) / 2) / (maxX - minX), bx = maxX === minX ? plotSizeX / 2 : -ax * minX + minXSize / 2;\n                return { ax, bx, ay, by };\n            }\n            getLinks() {\n                const series = this;\n                const links = [];\n                this.data.forEach((point, index) => {\n                    const levelOptions = series.mapOptionsToLevel[point.node.level || 0] || {};\n                    if (point.node.parent) {\n                        const pointOptions = merge(levelOptions, point.options);\n                        if (!point.linkToParent || point.linkToParent.destroyed) {\n                            const link = new series.LinkClass().init(series, pointOptions, void 0, point);\n                            point.linkToParent = link;\n                        }\n                        else {\n                            // #19552\n                            point.collapsed = pick(point.collapsed, (this.mapOptionsToLevel[point.node.level] || {}).collapsed);\n                            point.linkToParent.visible =\n                                point.linkToParent.toNode.visible;\n                        }\n                        point.linkToParent.index = links.push(point.linkToParent) - 1;\n                    }\n                    else {\n                        if (point.linkToParent) {\n                            series.links.splice(point.linkToParent.index);\n                            point.linkToParent.destroy();\n                            delete point.linkToParent;\n                        }\n                    }\n                });\n                return links;\n            }\n            buildTree(id, index, level, list, parent) {\n                const point = this.points[index];\n                level = (point && point.level) || level;\n                return super.buildTree.call(this, id, index, level, list, parent);\n            }\n            markerAttribs() {\n                // The super Series.markerAttribs returns { width: NaN, height: NaN },\n                // so just disable this for now.\n                return {};\n            }\n            setCollapsedStatus(node, visibility) {\n                const point = node.point;\n                if (point) {\n                    // Take the level options into account.\n                    point.collapsed = pick(point.collapsed, (this.mapOptionsToLevel[node.level] || {}).collapsed);\n                    point.visible = visibility;\n                    visibility = visibility === false ? false : !point.collapsed;\n                }\n                node.children.forEach((childNode) => {\n                    this.setCollapsedStatus(childNode, visibility);\n                });\n            }\n            drawTracker() {\n                ColumnSeries.prototype.drawTracker.apply(this, arguments);\n                ColumnSeries.prototype.drawTracker.call(this, this.links);\n            }\n            /**\n             * Run pre-translation by generating the nodeColumns.\n             * @private\n             */\n            translate() {\n                const series = this, options = series.options;\n                // NOTE: updateRootId modifies series.\n                let rootId = TU.updateRootId(series), rootNode;\n                // Call prototype function\n                seriesProto.translate.call(series);\n                const tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' && (!rootNode || !rootNode.children.length)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                this.setCollapsedStatus(tree, true);\n                series.links = series.getLinks();\n                series.setTreeValues(tree);\n                this.layoutAlgorythm.calculatePositions(series);\n                series.layoutModifier = this.getLayoutModifiers();\n                this.points.forEach((point) => {\n                    this.translateNode(point);\n                });\n                this.points.forEach((point) => {\n                    if (point.linkToParent) {\n                        this.translateLink(point.linkToParent);\n                    }\n                });\n                if (!options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n            }\n            translateLink(link) {\n                const fromNode = link.fromNode, toNode = link.toNode, linkWidth = this.options.link.lineWidth, crisp = (Math.round(linkWidth) % 2) / 2, factor = pick(this.options.link.curveFactor, 0.5), type = pick(link.options.link && link.options.link.type, this.options.link.type);\n                if (fromNode.shapeArgs && toNode.shapeArgs) {\n                    const fromNodeWidth = (fromNode.shapeArgs.width || 0), inverted = this.chart.inverted, y1 = Math.floor((fromNode.shapeArgs.y || 0) +\n                        (fromNode.shapeArgs.height || 0) / 2) + crisp, y2 = Math.floor((toNode.shapeArgs.y || 0) +\n                        (toNode.shapeArgs.height || 0) / 2) + crisp;\n                    let x1 = Math.floor((fromNode.shapeArgs.x || 0) + fromNodeWidth) +\n                        crisp, x2 = Math.floor(toNode.shapeArgs.x || 0) + crisp;\n                    if (inverted) {\n                        x1 -= fromNodeWidth;\n                        x2 += (toNode.shapeArgs.width || 0);\n                    }\n                    const diff = toNode.node.xPosition - fromNode.node.xPosition;\n                    link.shapeType = 'path';\n                    const fullWidth = Math.abs(x2 - x1) + fromNodeWidth, width = (fullWidth / diff) - fromNodeWidth, offset = width * factor * (inverted ? -1 : 1);\n                    const xMiddle = Math.floor((x2 + x1) / 2) + crisp;\n                    link.plotX = xMiddle;\n                    link.plotY = y2;\n                    link.shapeArgs = {\n                        d: getLinkPath[type]({\n                            x1,\n                            y1,\n                            x2,\n                            y2,\n                            width,\n                            offset,\n                            inverted,\n                            parentVisible: toNode.visible,\n                            radius: this.options.link.radius\n                        })\n                    };\n                    link.dlBox = {\n                        x: (x1 + x2) / 2,\n                        y: (y1 + y2) / 2,\n                        height: linkWidth,\n                        width: 0\n                    };\n                    link.tooltipPos = inverted ? [\n                        (this.chart.plotSizeY || 0) - link.dlBox.y,\n                        (this.chart.plotSizeX || 0) - link.dlBox.x\n                    ] : [\n                        link.dlBox.x,\n                        link.dlBox.y\n                    ];\n                }\n            }\n            /**\n             * Private method responsible for adjusting the dataLabel options for each\n             * node-point individually.\n             */\n            drawNodeLabels(points) {\n                const series = this, mapOptionsToLevel = series.mapOptionsToLevel;\n                let options, level;\n                for (const point of points) {\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series.hasDataLabels = () => true;\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs &&\n                        !splat(series.options.dataLabels)[0].style.width) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                }\n                seriesProto.drawDataLabels.call(this, points);\n            }\n            /**\n             * Override alignDataLabel so that position is always calculated and the\n             * label is faded in and out instead of hidden/shown when collapsing and\n             * expanding nodes.\n             */\n            alignDataLabel(point, dataLabel) {\n                const visible = point.visible;\n                // Force position calculation and visibility\n                point.visible = true;\n                super.alignDataLabel.apply(this, arguments);\n                // Fade in or out\n                dataLabel.animate({\n                    opacity: visible === false ? 0 : 1\n                }, void 0, function () {\n                    // Hide data labels that belong to hidden points (#18891)\n                    visible || dataLabel.hide();\n                });\n                // Reset\n                point.visible = visible;\n            }\n            /**\n             * Treegraph has two separate collecions of nodes and lines,\n             * render dataLabels for both sets.\n             */\n            drawDataLabels() {\n                if (this.options.dataLabels) {\n                    this.options.dataLabels = splat(this.options.dataLabels);\n                    // Render node labels.\n                    this.drawNodeLabels(this.points);\n                    // Render link labels.\n                    seriesProto.drawDataLabels.call(this, this.links);\n                }\n            }\n            destroy() {\n                // Links must also be destroyed.\n                if (this.links) {\n                    for (const link of this.links) {\n                        link.destroy();\n                    }\n                    this.links.length = 0;\n                }\n                return seriesProto.destroy.apply(this, arguments);\n            }\n            /**\n             * Return the presentational attributes.\n             * @private\n             */\n            pointAttribs(point, state) {\n                const series = this, levelOptions = point &&\n                    series.mapOptionsToLevel[point.node.level || 0] || {}, options = point && point.options, stateOptions = (levelOptions.states &&\n                    levelOptions.states[state]) ||\n                    {};\n                if (point) {\n                    point.options.marker = merge(series.options.marker, levelOptions.marker, point.options.marker);\n                }\n                const linkColor = pick(stateOptions && stateOptions.link && stateOptions.link.color, options && options.link && options.link.color, levelOptions && levelOptions.link && levelOptions.link.color, series.options.link && series.options.link.color), linkLineWidth = pick(stateOptions && stateOptions.link &&\n                    stateOptions.link.lineWidth, options && options.link && options.link.lineWidth, levelOptions && levelOptions.link &&\n                    levelOptions.link.lineWidth, series.options.link && series.options.link.lineWidth), attribs = seriesProto.pointAttribs.call(series, point, state);\n                if (point) {\n                    if (point.isLink) {\n                        attribs.stroke = linkColor;\n                        attribs['stroke-width'] = linkLineWidth;\n                        delete attribs.fill;\n                    }\n                    if (!point.visible) {\n                        attribs.opacity = 0;\n                    }\n                }\n                return attribs;\n            }\n            drawPoints() {\n                TreemapSeries.prototype.drawPoints.apply(this, arguments);\n                ColumnSeries.prototype.drawPoints.call(this, this.links);\n            }\n            /**\n             * Run translation operations for one node.\n             * @private\n             */\n            translateNode(point) {\n                const chart = this.chart, node = point.node, plotSizeY = chart.plotSizeY, plotSizeX = chart.plotSizeX, \n                // Get the layout modifiers which are common for all nodes.\n                { ax, bx, ay, by } = this.layoutModifier, x = ax * node.xPosition + bx, y = ay * node.yPosition + by, level = this.mapOptionsToLevel[node.level] || {}, markerOptions = merge(this.options.marker, level.marker, point.options.marker), symbol = markerOptions.symbol, height = node.nodeSizeY, width = node.nodeSizeX, reversed = this.options.reversed, nodeX = node.x = (chart.inverted ?\n                    plotSizeX - width / 2 - x :\n                    x - width / 2), nodeY = node.y = (!reversed ?\n                    plotSizeY - y - height / 2 :\n                    y - height / 2), borderRadius = pick(point.options.borderRadius, level.borderRadius, this.options.borderRadius), symbolFn = symbols[symbol || 'circle'];\n                if (symbolFn === void 0) {\n                    point.hasImage = true;\n                    point.shapeType = 'image';\n                    point.imageUrl = symbol.match(/^url\\((.*?)\\)$/)[1];\n                }\n                else {\n                    point.shapeType = 'path';\n                }\n                if (!point.visible && point.linkToParent) {\n                    const parentNode = point.linkToParent.fromNode;\n                    if (parentNode) {\n                        const parentShapeArgs = parentNode.shapeArgs || {}, { x = 0, y = 0, width = 0, height = 0 } = parentShapeArgs;\n                        if (!point.shapeArgs) {\n                            point.shapeArgs = {};\n                        }\n                        if (!point.hasImage) {\n                            extend(point.shapeArgs, {\n                                d: symbolFn(x, y, width, height, borderRadius ? { r: borderRadius } : void 0)\n                            });\n                        }\n                        extend(point.shapeArgs, { x, y });\n                        point.plotX = parentNode.plotX;\n                        point.plotY = parentNode.plotY;\n                    }\n                }\n                else {\n                    point.plotX = nodeX;\n                    point.plotY = nodeY;\n                    point.shapeArgs = {\n                        x: nodeX,\n                        y: nodeY,\n                        width,\n                        height,\n                        cursor: !point.node.isLeaf ? 'pointer' : 'default'\n                    };\n                    if (!point.hasImage) {\n                        point.shapeArgs.d = symbolFn(nodeX, nodeY, width, height, borderRadius ? { r: borderRadius } : void 0);\n                    }\n                }\n                // Set the anchor position for tooltip.\n                point.tooltipPos = chart.inverted ?\n                    [plotSizeY - nodeY - height / 2, plotSizeX - nodeX - width / 2] :\n                    [nodeX + width / 2, nodeY];\n            }\n        }\n        TreegraphSeries.defaultOptions = merge(TreemapSeries.defaultOptions, TreegraphSeriesDefaults);\n        extend(TreegraphSeries.prototype, {\n            pointClass: TreegraphPoint,\n            NodeClass: TreegraphNode,\n            LinkClass: TreegraphLink\n        });\n        SeriesRegistry.registerSeriesType('treegraph', TreegraphSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `treegraph` series. If the [type](#series.treegraph.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treegraph\n         * @exclude   allowDrillToNode, boostBlending, boostThreshold, curveFactor,\n         * centerInCategory, connectEnds, connectNulls, colorAxis, colorKey,\n         * dataSorting, dragDrop, findNearestPointBy, getExtremesFromAll, layout,\n         * nodePadding,  pointInterval, pointIntervalUnit, pointPlacement, pointStart,\n         * relativeXValue, softThreshold, stack, stacking, step,\n         * traverseUpButton, xAxis, yAxis, zoneAxis, zones\n         * @product   highcharts\n         * @requires  modules/treemap.js\n         * @requires  modules/treegraph.js\n         * @apioption series.treegraph\n         */\n        /**\n         * @extends   plotOptions.series.marker\n         * @excluding enabled, enabledThreshold\n         * @apioption series.treegraph.marker\n         */\n        /**\n         * @type      {Highcharts.SeriesTreegraphDataLabelsOptionsObject|Array<Highcharts.SeriesTreegraphDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.treegraph.data.dataLabels\n         */\n        /**\n         * @sample highcharts/series-treegraph/level-options\n         *          Treegraph chart with level options applied\n         *\n         * @type      {Array<*>}\n         * @excluding layoutStartingDirection, layoutAlgorithm\n         * @apioption series.treegraph.levels\n         */\n        /**\n         * Set collapsed status for nodes level-wise.\n         * @type {boolean}\n         * @apioption series.treegraph.levels.collapsed\n         */\n        /**\n         * Set marker options for nodes at the level.\n         * @extends   series.treegraph.marker\n         * @apioption series.treegraph.levels.marker\n         */\n        /**\n         * An array of data points for the series. For the `treegraph` series type,\n         * points can be given in the following ways:\n         *\n         * 1. The array of arrays, with `keys` property, which defines how the fields in\n         *     array should be interpretated\n         *    ```js\n         *       keys: ['id', 'parent'],\n         *       data: [\n         *           ['Category1'],\n         *           ['Category1', 'Category2']\n         *       ]\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the\n         *    series' [turboThreshold](#series.area.turboThreshold),\n         *    this option is not available.\n         *    The data of the treegraph series needs to be formatted in such a way, that\n         *    there are no circular dependencies on the nodes\n         *\n         *  ```js\n         *     data: [{\n         *         id: 'Category1'\n         *     }, {\n         *         id: 'Category1',\n         *         parent: 'Category2',\n         *     }]\n         *  ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.treemap.data\n         * @product   highcharts\n         * @excluding outgoing, weight, value\n         * @apioption series.treegraph.data\n         */\n        /**\n         * Options used for button, which toggles the collapse status of the node.\n         *\n         *\n         * @apioption series.treegraph.data.collapseButton\n         */\n        /**\n         * If point's children should be initially hidden\n         *\n         * @sample highcharts/series-treegraph/level-options\n         *          Treegraph chart with initially hidden children\n         *\n         * @type {boolean}\n         * @apioption series.treegraph.data.collapsed\n         */\n        ''; // gets doclets above into transpiled version\n\n        return TreegraphSeries;\n    });\n    _registerModule(_modules, 'masters/modules/treegraph.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","applyRadius","r","d","i","length","x","y","push","prevSeg","nextSeg","x1","y1","x2","y2","directionX","directionY","Math","min","abs","getLinkPath","pathParams","width","inverted","radius","parentVisible","straight","curved","offset","SeriesRegistry","seriesTypes","treemap","prototype","NodeClass","TreemapNode","constructor","arguments","mod","shift","change","children","preX","hidden","wasVisited","collapsed","nextLeft","getLeftMostChild","thread","nextRight","getRightMostChild","getAncestor","leftIntNode","defaultAncestor","leftAnc","ancestor","getLeftMostSibling","parent","getParent","child","point","visible","hasChildren","getLeftSibling","relativeXPosition","parentNode","getFirstChild","Point","U","pointClass","TreemapPoint","addEvent","fireEvent","merge","pick","TreegraphPoint","options","isLink","series","node","setState","draw","graphic","animate","visibility","renderCollapseButton","parentGroup","levelOptions","mapOptionsToLevel","level","btnOptions","collapseButton","height","shape","style","chart","calculatedOpacity","onlyOnHover","state","shapeArgs","collapseButtonOptions","enabled","getCollapseBtnPosition","attr","text","rotation","rotationOriginX","rotationOriginY","opacity","destroy","fill","fillColor","color","renderer","label","padding","stroke","lineColor","lineWidth","align","zIndex","addClass","removeClass","css","getContrast","add","element","toggleCollapse","redraw","linkToParent","btnWidth","btnHeight","btn","states","hover","animation","extend","column","ColumnPoint","formatPrefix","dataLabelOnNull","init","link","fromNode","toNode","id","update","runEvent","oldOptions","call","TreegraphNode","TreegraphLayout","createDummyNode","gapSize","index","dummyNode","oldParentNode","calculatePositions","nodes","nodeList","resetValues","root","tree","treeLayout","calculateRelativeX","beforeLayout","firstWalk","secondWalk","afterLayout","iEnd","leftSibling","apportion","executeShifts","leftChild","rightChild","midPoint","modSum","yPosition","xPosition","childNode","rightIntNode","rightOutNode","leftOutNode","rightIntMod","rightOutMod","leftIntMod","leftOutMod","moveSubtree","leftNode","rightNode","subtrees","reversed","marker","symbol","fillOpacity","cursor","type","fontWeight","fontSize","fillSpace","tooltip","linkFormat","pointFormat","dataLabels","defer","linkTextPath","attributes","startOffset","linkFormatter","textOverflow","PU","SVGRenderer","TU","TreegraphLink","TreegraphSeriesDefaults","seriesProto","TreemapSeries","ColumnSeries","symbols","getLevelOptions","relativeLength","splat","TreegraphSeries","data","points","layoutModifier","nodeMap","layoutAlgorythm","links","getLayoutModifiers","plotSizeX","plotSizeY","minX","Infinity","maxX","minY","maxY","maxXSize","minXSize","maxYSize","minYSize","forEach","markerOptions","nodeSizeY","nodeSizeX","max","ay","by","ax","bx","getLinks","pointOptions","destroyed","LinkClass","splice","buildTree","list","markerAttribs","setCollapsedStatus","drawTracker","translate","rootId","updateRootId","rootNode","getTree","setRootNode","from","levels","to","defaults","levelIsConstant","colorByPoint","setTreeValues","translateNode","translateLink","setColorRecursive","linkWidth","crisp","round","factor","curveFactor","fromNodeWidth","floor","diff","shapeType","fullWidth","xMiddle","plotX","plotY","dlBox","tooltipPos","drawNodeLabels","hasDataLabels","dataLabel","dlOptions","drawDataLabels","alignDataLabel","hide","pointAttribs","stateOptions","linkColor","linkLineWidth","attribs","drawPoints","nodeX","nodeY","borderRadius","symbolFn","hasImage","imageUrl","match","parentShapeArgs","isLeaf","defaultOptions","registerSeriesType"],"mappings":"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"}