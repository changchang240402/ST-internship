{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * Item series type for Highcharts\n *\n * (c) 2019 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/item-series', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/Item/ItemPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2019-2021 Torstein Honsi\n         *\n         *  Item series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: { pointClass: Point } }, seriesTypes: { pie: { prototype: { pointClass: PiePoint } } } } = SeriesRegistry;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class ItemPoint extends PiePoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.options = void 0;\n                this.series = void 0;\n            }\n        }\n        extend(ItemPoint.prototype, {\n            haloPath: Point.prototype.haloPath\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ItemPoint;\n    });\n    _registerModule(_modules, 'Series/Item/ItemSeriesDefaults.js', [_modules['Core/Series/SeriesDefaults.js'], _modules['Core/Utilities.js']], function (SeriesDefaults, U) {\n        /* *\n         *\n         *  (c) 2019-2021 Torstein Honsi\n         *\n         *  Item series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An item chart is an infographic chart where a number of items are laid\n         * out in either a rectangular or circular pattern. It can be used to\n         * visualize counts within a group, or for the circular pattern, typically\n         * a parliament.\n         *\n         * The circular layout has much in common with a pie chart. Many of the item\n         * series options, like `center`, `size` and data label positioning, are\n         * inherited from the pie series and don't apply for rectangular layouts.\n         *\n         * @sample       highcharts/demo/parliament-chart\n         *               Parliament chart (circular item chart)\n         * @sample       highcharts/series-item/rectangular\n         *               Rectangular item chart\n         * @sample       highcharts/series-item/symbols\n         *               Infographic with symbols\n         *\n         * @extends      plotOptions.pie\n         * @since        7.1.0\n         * @product      highcharts\n         * @excluding    borderColor, borderWidth, depth, linecap, shadow,\n         *               slicedOffset\n         * @requires     modules/item-series\n         * @optionparent plotOptions.item\n         */\n        const ItemSeriesDefaults = {\n            /**\n             * In circular view, the end angle of the item layout, in degrees where\n             * 0 is up.\n             *\n             * @sample highcharts/demo/parliament-chart\n             *         Parliament chart\n             * @type {undefined|number}\n             */\n            endAngle: void 0,\n            /**\n             * In circular view, the size of the inner diameter of the circle. Can\n             * be a percentage or pixel value. Percentages are relative to the outer\n             * perimeter. Pixel values are given as integers.\n             *\n             * If the `rows` option is set, it overrides the `innerSize` setting.\n             *\n             * @sample highcharts/demo/parliament-chart\n             *         Parliament chart\n             * @type {string|number}\n             */\n            innerSize: '40%',\n            /**\n             * The padding between the items, given in relative size where the size\n             * of the item is 1.\n             * @type {number}\n             */\n            itemPadding: 0.1,\n            /**\n             * The layout of the items in rectangular view. Can be either\n             * `horizontal` or `vertical`.\n             * @sample highcharts/series-item/symbols\n             *         Horizontal layout\n             * @type {string}\n             */\n            layout: 'vertical',\n            /**\n             * @extends plotOptions.series.marker\n             */\n            marker: merge(SeriesDefaults.marker, {\n                radius: null\n            }),\n            /**\n             * The number of rows to display in the rectangular or circular view. If\n             * the `innerSize` is set, it will be overridden by the `rows` setting.\n             *\n             * @sample highcharts/series-item/rows-columns\n             *         Fixed row count\n             * @type {number}\n             */\n            rows: void 0,\n            crisp: false,\n            showInLegend: true,\n            /**\n             * In circular view, the start angle of the item layout, in degrees\n             * where 0 is up.\n             *\n             * @sample highcharts/demo/parliament-chart\n             *         Parliament chart\n             * @type {undefined|number}\n             */\n            startAngle: void 0\n        };\n        /**\n         * An `item` series. If the [type](#series.item.type) option is not specified,\n         * it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.item\n         * @excluding dataParser, dataURL, stack, xAxis, yAxis, dataSorting,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  modules/item-series\n         * @apioption series.item\n         */\n        /**\n         * An array of data points for the series. For the `item` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.item.turboThreshold),\n         *    this option is not available.\n         *    ```js\n         *    data: [{\n         *        y: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<string,(number|null)>|null|*>}\n         * @extends   series.pie.data\n         * @exclude   sliced\n         * @product   highcharts\n         * @apioption series.item.data\n         */\n        /**\n         * The sequential index of the data point in the legend.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.pie.data.legendIndex\n         */\n        /**\n         * @excluding legendItemClick\n         * @apioption series.item.events\n         */\n        ''; // keeps the doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ItemSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Item/ItemSeries.js', [_modules['Series/Item/ItemPoint.js'], _modules['Series/Item/ItemSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ItemPoint, ItemSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2019-2021 Torstein Honsi\n         *\n         *  Item series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pie: PieSeries } = SeriesRegistry.seriesTypes;\n        const { defined, extend, fireEvent, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        // Inherits pie as the most tested non-cartesian series with individual point\n        // legend, tooltips etc. Only downside is we need to re-enable marker options.\n        /**\n         * The item series type.\n         *\n         * @requires module:modules/item-series\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.item\n         *\n         * @augments Highcharts.seriesTypes.pie\n         */\n        class ItemSeries extends PieSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.data = void 0;\n                this.options = void 0;\n                this.points = void 0;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Fade in the whole chart.\n             * @private\n             */\n            animate(init) {\n                const group = this.group;\n                if (group) {\n                    if (init) {\n                        group.attr({\n                            opacity: 0\n                        });\n                    }\n                    else {\n                        group.animate({\n                            opacity: 1\n                        }, this.options.animation);\n                    }\n                }\n            }\n            drawDataLabels() {\n                if (this.center && this.slots) {\n                    super.drawDataLabels();\n                    // or it's just a dot chart with no natural place to put the data labels\n                }\n                else {\n                    for (const point of this.points) {\n                        point.destroyElements({ dataLabel: 1 });\n                    }\n                }\n            }\n            drawPoints() {\n                const series = this, options = this.options, renderer = series.chart.renderer, seriesMarkerOptions = options.marker, borderWidth = this.borderWidth, crisp = borderWidth % 2 ? 0.5 : 1, rows = this.getRows(), cols = Math.ceil(this.total / rows), cellWidth = this.chart.plotWidth / cols, cellHeight = this.chart.plotHeight / rows, itemSize = this.itemSize || Math.min(cellWidth, cellHeight);\n                let i = 0;\n                /* @todo: remove if not needed\n                this.slots.forEach(slot => {\n                    this.chart.renderer.circle(slot.x, slot.y, 6)\n                        .attr({\n                            fill: 'silver'\n                        })\n                        .add(this.group);\n                });\n                //*/\n                for (const point of series.points) {\n                    const pointMarkerOptions = point.marker || {}, symbol = (pointMarkerOptions.symbol ||\n                        seriesMarkerOptions.symbol), r = pick(pointMarkerOptions.radius, seriesMarkerOptions.radius), size = defined(r) ? 2 * r : itemSize, padding = size * options.itemPadding;\n                    let attr, graphics, pointAttr, x, y, width, height;\n                    point.graphics = graphics = point.graphics || [];\n                    if (!series.chart.styledMode) {\n                        pointAttr = series.pointAttribs(point, point.selected && 'select');\n                    }\n                    if (!point.isNull && point.visible) {\n                        if (!point.graphic) {\n                            point.graphic = renderer.g('point')\n                                .add(series.group);\n                        }\n                        for (let val = 0; val < (point.y || 0); ++val) {\n                            // Semi-circle\n                            if (series.center && series.slots) {\n                                // Fill up the slots from left to right\n                                const slot = series.slots.shift();\n                                x = slot.x - itemSize / 2;\n                                y = slot.y - itemSize / 2;\n                            }\n                            else if (options.layout === 'horizontal') {\n                                x = cellWidth * (i % cols);\n                                y = cellHeight * Math.floor(i / cols);\n                            }\n                            else {\n                                x = cellWidth * Math.floor(i / rows);\n                                y = cellHeight * (i % rows);\n                            }\n                            x += padding;\n                            y += padding;\n                            width = Math.round(size - 2 * padding);\n                            height = width;\n                            if (series.options.crisp) {\n                                x = Math.round(x) - crisp;\n                                y = Math.round(y) + crisp;\n                            }\n                            attr = {\n                                x: x,\n                                y: y,\n                                width: width,\n                                height: height\n                            };\n                            if (typeof r !== 'undefined') {\n                                attr.r = r;\n                            }\n                            // Circles attributes update (#17257)\n                            if (pointAttr) {\n                                extend(attr, pointAttr);\n                            }\n                            let graphic = graphics[val];\n                            if (graphic) {\n                                graphic.animate(attr);\n                            }\n                            else {\n                                graphic = renderer\n                                    .symbol(symbol, void 0, void 0, void 0, void 0, {\n                                    backgroundSize: 'within'\n                                })\n                                    .attr(attr)\n                                    .add(point.graphic);\n                            }\n                            graphic.isActive = true;\n                            graphics[val] = graphic;\n                            ++i;\n                        }\n                    }\n                    for (let j = 0; j < graphics.length; j++) {\n                        const graphic = graphics[j];\n                        if (!graphic) {\n                            return;\n                        }\n                        if (!graphic.isActive) {\n                            graphic.destroy();\n                            graphics.splice(j, 1);\n                            j--; // Need to substract 1 after splice, #19053\n                        }\n                        else {\n                            graphic.isActive = false;\n                        }\n                    }\n                }\n            }\n            getRows() {\n                const chart = this.chart, total = this.total || 0;\n                let rows = this.options.rows, cols, ratio;\n                // Get the row count that gives the most square cells\n                if (!rows) {\n                    ratio = chart.plotWidth / chart.plotHeight;\n                    rows = Math.sqrt(total);\n                    if (ratio > 1) {\n                        rows = Math.ceil(rows);\n                        while (rows > 0) {\n                            cols = total / rows;\n                            if (cols / rows > ratio) {\n                                break;\n                            }\n                            rows--;\n                        }\n                    }\n                    else {\n                        rows = Math.floor(rows);\n                        while (rows < total) {\n                            cols = total / rows;\n                            if (cols / rows < ratio) {\n                                break;\n                            }\n                            rows++;\n                        }\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Get the semi-circular slots.\n             * @private\n             */\n            getSlots() {\n                const series = this, center = series.center, diameter = center[2], slots = series.slots = series.slots || [], fullAngle = (series.endAngleRad - series.startAngleRad), rowsOption = series.options.rows, isCircle = fullAngle % (2 * Math.PI) === 0, total = series.total || 0;\n                let innerSize = center[3], x, y, rowRadius, rowLength, colCount, increment, angle, col, itemSize = 0, rowCount, itemCount = Number.MAX_VALUE, finalItemCount, rows, testRows, \n                // How many rows (arcs) should be used\n                rowFraction = (diameter - innerSize) / diameter;\n                // Increase the itemSize until we find the best fit\n                while (itemCount > total + (rows && isCircle ? rows.length : 0)) {\n                    finalItemCount = itemCount;\n                    // Reset\n                    slots.length = 0;\n                    itemCount = 0;\n                    // Now rows is the last successful run\n                    rows = testRows;\n                    testRows = [];\n                    itemSize++;\n                    // Total number of rows (arcs) from the center to the\n                    // perimeter\n                    rowCount = diameter / itemSize / 2;\n                    if (rowsOption) {\n                        innerSize = ((rowCount - rowsOption) / rowCount) * diameter;\n                        if (innerSize >= 0) {\n                            rowCount = rowsOption;\n                            // If innerSize is negative, we are trying to set too\n                            // many rows in the rows option, so fall back to\n                            // treating it as innerSize 0\n                        }\n                        else {\n                            innerSize = 0;\n                            rowFraction = 1;\n                        }\n                    }\n                    else {\n                        rowCount = Math.floor(rowCount * rowFraction);\n                    }\n                    for (let row = rowCount; row > 0; row--) {\n                        rowRadius = (innerSize + (row / rowCount) *\n                            (diameter - innerSize - itemSize)) / 2;\n                        rowLength = fullAngle * rowRadius;\n                        colCount = Math.ceil(rowLength / itemSize);\n                        testRows.push({\n                            rowRadius: rowRadius,\n                            rowLength: rowLength,\n                            colCount: colCount\n                        });\n                        itemCount += colCount + 1;\n                    }\n                }\n                if (!rows) {\n                    return;\n                }\n                // We now have more slots than we have total items. Loop over\n                // the rows and remove the last slot until the count is correct.\n                // For each iteration we sort the last slot by the angle, and\n                // remove those with the highest angles.\n                let overshoot = finalItemCount - series.total -\n                    (isCircle ? rows.length : 0);\n                /**\n                 * @private\n                 * @param {Highcharts.ItemRowContainerObject} item\n                 * Wrapped object with angle and row\n                 */\n                const cutOffRow = (item) => {\n                    if (overshoot > 0) {\n                        item.row.colCount--;\n                        overshoot--;\n                    }\n                };\n                while (overshoot > 0) {\n                    rows\n                        // Return a simplified representation of the angle of\n                        // the last slot within each row.\n                        .map((row) => ({\n                        angle: row.colCount / row.rowLength,\n                        row: row\n                    }))\n                        // Sort by the angles...\n                        .sort((a, b) => (b.angle - a.angle))\n                        // ...so that we can ignore the items with the lowest\n                        // angles...\n                        .slice(0, Math.min(overshoot, Math.ceil(rows.length / 2)))\n                        // ...and remove the ones with the highest angles\n                        .forEach(cutOffRow);\n                }\n                for (const row of rows) {\n                    const rowRadius = row.rowRadius, colCount = row.colCount;\n                    increment = colCount ? fullAngle / colCount : 0;\n                    for (col = 0; col <= colCount; col += 1) {\n                        angle = series.startAngleRad + col * increment;\n                        x = center[0] + Math.cos(angle) * rowRadius;\n                        y = center[1] + Math.sin(angle) * rowRadius;\n                        slots.push({ x: x, y: y, angle: angle });\n                    }\n                }\n                // Sort by angle\n                slots.sort((a, b) => (a.angle - b.angle));\n                series.itemSize = itemSize;\n                return slots;\n            }\n            translate(positions) {\n                // Initialize chart without setting data, #13379.\n                if (this.total === 0 && // check if that is a (semi-)circle\n                    isNumber(this.options.startAngle) &&\n                    isNumber(this.options.endAngle)) {\n                    this.center = this.getCenter();\n                }\n                if (!this.slots) {\n                    this.slots = [];\n                }\n                if (isNumber(this.options.startAngle) &&\n                    isNumber(this.options.endAngle)) {\n                    super.translate(positions);\n                    this.slots = this.getSlots();\n                }\n                else {\n                    this.generatePoints();\n                    fireEvent(this, 'afterTranslate');\n                }\n            }\n        }\n        ItemSeries.defaultOptions = merge(PieSeries.defaultOptions, ItemSeriesDefaults);\n        extend(ItemSeries.prototype, {\n            markerAttribs: void 0,\n            pointClass: ItemPoint\n        });\n        SeriesRegistry.registerSeriesType('item', ItemSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ItemSeries;\n    });\n    _registerModule(_modules, 'masters/modules/item-series.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","series","prototype","pointClass","Point","seriesTypes","pie","PiePoint","extend","ItemPoint","constructor","arguments","options","haloPath","SeriesDefaults","merge","ItemSeriesDefaults","endAngle","innerSize","itemPadding","layout","marker","radius","rows","crisp","showInLegend","startAngle","PieSeries","defined","fireEvent","isNumber","pick","ItemSeries","data","points","animate","init","group","attr","opacity","animation","drawDataLabels","center","slots","point","destroyElements","dataLabel","drawPoints","renderer","chart","seriesMarkerOptions","borderWidth","getRows","cols","Math","ceil","total","cellWidth","plotWidth","cellHeight","plotHeight","itemSize","min","i","graphics","pointAttr","x","y","width","pointMarkerOptions","symbol","r","size","padding","styledMode","pointAttribs","selected","isNull","visible","graphic","g","add","val","slot","shift","floor","round","height","backgroundSize","isActive","j","length","destroy","splice","ratio","sqrt","getSlots","diameter","fullAngle","endAngleRad","startAngleRad","rowsOption","isCircle","PI","rowRadius","rowLength","colCount","increment","angle","col","rowCount","itemCount","Number","MAX_VALUE","finalItemCount","testRows","rowFraction","row","push","overshoot","cutOffRow","item","map","sort","a","b","slice","forEach","cos","sin","translate","positions","getCenter","generatePoints","defaultOptions","markerAttribs","registerSeriesType"],"mappings":"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"}