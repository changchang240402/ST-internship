{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * (c) 2009-2022\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/tiledwebmap', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Maps/TilesProviders/OpenStreetMap.js', [], function () {\n        /* *\n         * OpenStreetMap provider, used for tile map services\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class OpenStreetMap {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.defaultCredits = ('Map data &copy2023' +\n                    ' <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>');\n                this.initialProjectionName = 'WebMercator';\n                this.subdomains = ['a', 'b', 'c'];\n                this.themes = {\n                    Standard: {\n                        url: 'https://tile.openstreetmap.org/{zoom}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 19\n                    },\n                    Hot: {\n                        url: 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 19\n                    },\n                    OpenTopoMap: {\n                        url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 17,\n                        credits: `Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">\n                        OpenStreetMap</a> contributors, <a href=\"https://viewfinderpanoramas.org\">SRTM</a> \n                        | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> \n                        (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)`\n                    }\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OpenStreetMap;\n    });\n    _registerModule(_modules, 'Maps/TilesProviders/Stamen.js', [], function () {\n        /* *\n         * Stamen provider, used for tile map services\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class Stamen {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.defaultCredits = ('&copy; Map tiles by <a href=\"https://stamen.com\">Stamen Design</a>,' +\n                    ' under <a href=\"https://creativecommons.org/licenses/by/3.0\">CC BY' +\n                    ' 3.0</a>. Data by <a href=\"https://openstreetmap.org\">OpenStreetMap' +\n                    '</a>, under <a href=\"https://www.openstreetmap.org/copyright\">ODbL</a>');\n                this.initialProjectionName = 'WebMercator';\n                this.subdomains = ['a', 'b', 'c', 'd'];\n                this.themes = {\n                    Toner: {\n                        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 20\n                    },\n                    TonerBackground: {\n                        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-background/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 20\n                    },\n                    TonerLite: {\n                        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 20\n                    },\n                    Terrain: {\n                        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 18\n                    },\n                    TerrainBackground: {\n                        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain-background/{z}/{x}/{y}.png',\n                        minZoom: 0,\n                        maxZoom: 18\n                    },\n                    Watercolor: {\n                        url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png',\n                        minZoom: 1,\n                        maxZoom: 16,\n                        credits: ('&copy Map tiles by <a href=\"https://stamen.com\">Stamen' +\n                            ' Design</a>, under <a href=\"https://creativecommons.org/' +\n                            'licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"https://' +\n                            'openstreetmap.org\">OpenStreetMap</a>, under <a href=' +\n                            '\"https://creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>')\n                    }\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Stamen;\n    });\n    _registerModule(_modules, 'Maps/TilesProviders/LimaLabs.js', [], function () {\n        /* *\n         * LimaLabs provider, used for tile map services\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class LimaLabs {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.defaultCredits = ('Map data &copy;2023' +\n                    ' <a href=\"https://maps.lima-labs.com/\">LimaLabs</a>');\n                this.initialProjectionName = 'WebMercator';\n                this.requiresApiKey = true;\n                this.themes = {\n                    Standard: {\n                        url: 'https://cdn.lima-labs.com/{zoom}/{x}/{y}.png?api={apikey}',\n                        minZoom: 0,\n                        maxZoom: 20\n                    }\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return LimaLabs;\n    });\n    _registerModule(_modules, 'Maps/TilesProviders/Thunderforest.js', [], function () {\n        /* *\n         * Thunderforest provider, used for tile map services\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class Thunderforest {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.defaultCredits = ('Maps &copy <a href=\"https://www.thunderforest.com\">Thunderforest</a>' +\n                    ', Data &copy; <a href=\"https://www.openstreetmap.org/copyright\">' +\n                    'OpenStreetMap contributors</a>');\n                this.initialProjectionName = 'WebMercator';\n                this.requiresApiKey = true;\n                this.subdomains = ['a', 'b', 'c'];\n                this.themes = {\n                    OpenCycleMap: {\n                        url: 'https://{s}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    Transport: {\n                        url: 'https://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    TransportDark: {\n                        url: 'https://{s}.tile.thunderforest.com/transport-dark/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    SpinalMap: {\n                        url: 'https://{s}.tile.thunderforest.com/spinal-map/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    Landscape: {\n                        url: 'https://{s}.tile.thunderforest.com/landscape/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    Outdoors: {\n                        url: 'https://{s}.tile.thunderforest.com/outdoors/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    Pioneer: {\n                        url: 'https://{s}.tile.thunderforest.com/pioneer/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    MobileAtlas: {\n                        url: 'https://{s}.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    },\n                    Neighbourhood: {\n                        url: 'https://{s}.tile.thunderforest.com/neighbourhood/{z}/{x}/{y}.png?apikey={apikey}',\n                        minZoom: 0,\n                        maxZoom: 22\n                    }\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Thunderforest;\n    });\n    _registerModule(_modules, 'Maps/TilesProviders/Esri.js', [], function () {\n        /* *\n         * Esri provider, used for tile map services\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class Esri {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.defaultCredits = ('Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, ' +\n                    ' Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong),' +\n                    ' Esri (Thailand), TomTom, 2012');\n                this.initialProjectionName = 'WebMercator';\n                this.themes = {\n                    WorldStreetMap: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 20\n                    },\n                    DeLorme: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/Specialty/DeLorme_World_Base_Map/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 1,\n                        maxZoom: 11,\n                        credits: 'Tiles &copy; Esri &mdash; Copyright: &copy;2012 DeLorme'\n                    },\n                    WorldTopoMap: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 20,\n                        credits: ('Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom,' +\n                            ' Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL,' +\n                            ' Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong),' +\n                            ' and the GIS User Community')\n                    },\n                    WorldImagery: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 20,\n                        credits: ('Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS,' +\n                            ' AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP,' +\n                            ' and the GIS User Community')\n                    },\n                    WorldTerrain: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 13,\n                        credits: ('Tiles &copy; Esri &mdash; Source: USGS, Esri, TANA, DeLorme,' +\n                            ' and NPS')\n                    },\n                    WorldShadedRelief: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 13,\n                        credits: 'Tiles &copy; Esri &mdash; Source: Esri'\n                    },\n                    WorldPhysical: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Physical_Map/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 8,\n                        credits: 'Tiles &copy; Esri &mdash; Source: US National Park Service'\n                    },\n                    NatGeoWorldMap: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 16,\n                        credits: ('Tiles &copy; Esri &mdash; National Geographic, Esri,' +\n                            ' DeLorme, NAVTEQ, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN,' +\n                            ' GEBCO, NOAA, iPC')\n                    },\n                    WorldGrayCanvas: {\n                        url: 'https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 16,\n                        credits: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ'\n                    }\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Esri;\n    });\n    _registerModule(_modules, 'Maps/TilesProviders/USGS.js', [], function () {\n        /* *\n         * USGS provider, used for tile map services\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class USGS {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.defaultCredits = ('Tiles courtesy of the <a href=\"https://usgs.gov/\">U.S. Geological' +\n                    'Survey</a>');\n                this.initialProjectionName = 'WebMercator';\n                this.themes = {\n                    USTopo: {\n                        url: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSTopo/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 20\n                    },\n                    USImagery: {\n                        url: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 20\n                    },\n                    USImageryTopo: {\n                        url: 'https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryTopo/MapServer/tile/{z}/{y}/{x}',\n                        minZoom: 0,\n                        maxZoom: 20\n                    }\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return USGS;\n    });\n    _registerModule(_modules, 'Maps/TilesProviders/TilesProviderRegistry.js', [_modules['Maps/TilesProviders/OpenStreetMap.js'], _modules['Maps/TilesProviders/Stamen.js'], _modules['Maps/TilesProviders/LimaLabs.js'], _modules['Maps/TilesProviders/Thunderforest.js'], _modules['Maps/TilesProviders/Esri.js'], _modules['Maps/TilesProviders/USGS.js']], function (OpenStreetMap, Stamen, LimaLabs, Thunderforest, Esri, USGS) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const tilesProviderRegistry = {\n            Esri,\n            LimaLabs,\n            OpenStreetMap,\n            Stamen,\n            Thunderforest,\n            USGS\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return tilesProviderRegistry;\n    });\n    _registerModule(_modules, 'Series/TiledWebMap/TiledWebMapSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2023 Hubert Kozik, Kamil Musiałowski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A tiledwebmap series allows user to display dynamically joined individual\n         * images (tiles) and join them together to create a map.\n         *\n         * @sample maps/series-tiledwebmap/simple-demo-norway\n         *         Simple demo of data for Norway on TiledWebMap\n         * @sample maps/series-tiledwebmap/only-twm\n         *         OpenStreetMap demo\n         *\n         * @extends      plotOptions.map\n         * @excluding    affectsMapView, allAreas, allowPointSelect, animation,\n         * animationLimit, boostBlending, boostThreshold, borderColor, borderWidth,\n         * clip, color, colorAxis, colorByPoint, colorIndex, colorKey, colors,\n         * cursor, dashStyle, dataLabels, dataParser, dataURL, dragDrop,\n         * enableMouseTracking, findNearestPointBy, joinBy, keys, marker,\n         * negativeColor, nullColor, nullInteraction, onPoint, point,\n         * pointDescriptionFormatter, selected, shadow, showCheckbox,\n         * sonification, stickyTracking, tooltip, type\n         * @product      highmaps\n         * @optionparent plotOptions.tiledwebmap\n         */\n        const TiledWebMapSeriesDefaults = {\n            states: {\n                inactive: {\n                    enabled: false\n                }\n            }\n        };\n        /* *\n         *\n         *  API options\n         *\n         * */\n        /**\n         * A `tiledwebmap` series. The [type](#series.tiledwebmap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @sample maps/series-tiledwebmap/simple-demo-norway\n         *         Simple demo of data for Norway on TiledWebMap\n         * @sample maps/series-tiledwebmap/only-twm\n         *         OpenStreetMap demo\n         *\n         * @extends   series,plotOptions.tiledwebmap\n         * @excluding affectsMapView, allAreas, allowPointSelect, animation,\n         * animationLimit, boostBlending, boostThreshold, borderColor, borderWidth,\n         * clip, color, colorAxis, colorByPoint, colorIndex, colorKey, colors, cursor,\n         * dashStyle, dataLabels, dataParser, dataURL, dragDrop, enableMouseTracking,\n         * findNearestPointBy, joinBy, keys, marker, negativeColor, nullColor,\n         * nullInteraction, onPoint, point, pointDescriptionFormatter, selected, shadow,\n         * showCheckbox, stickyTracking, tooltip, type\n         * @product   highmaps\n         * @apioption series.tiledwebmap\n         */\n        /**\n         * Provider options for the series.\n         *\n         * @sample maps/series-tiledwebmap/human-anatomy\n         *         Human Anatomy Explorer - Custom TiledWebMap Provider\n         *\n         * @since 11.1.0\n         * @product   highmaps\n         * @apioption plotOptions.tiledwebmap.provider\n         */\n        /**\n         * Provider type to pull data (tiles) from.\n         *\n         * @sample maps/series-tiledwebmap/basic-configuration\n         *         Basic configuration for TiledWebMap\n         *\n         * @type      {string}\n         * @since 11.1.0\n         * @product   highmaps\n         * @apioption plotOptions.tiledwebmap.provider.type\n         */\n        /**\n         * Set a tiles theme. Check the [providers documentation](https://www.highcharts.com/docs/maps/tiledwebmap)\n         * for official list of available themes.\n         *\n         * @sample maps/series-tiledwebmap/europe-timezones\n         *         Imagery basemap for Europe\n         * @sample maps/series-tiledwebmap/hiking-trail\n         *         Topo basemap and MapLine\n         *\n         * @type      {string}\n         * @since 11.1.0\n         * @product   highmaps\n         * @apioption plotOptions.tiledwebmap.provider.theme\n         */\n        /**\n         * Subdomain required by each provider. Check the [providers documentation](https://www.highcharts.com/docs/maps/tiledwebmap)\n         * for available subdomains.\n         *\n         * @sample maps/series-tiledwebmap/basic-configuration\n         *         Basic configuration for TiledWebMap\n         *\n         * @type      {string}\n         * @since 11.1.0\n         * @product   highmaps\n         * @apioption plotOptions.tiledwebmap.provider.subdomain\n         */\n        /**\n         * API key for providers that require using one.\n         *\n         * @type      {string}\n         * @since 11.1.0\n         * @product   highmaps\n         * @apioption plotOptions.tiledwebmap.provider.apiKey\n         */\n        /**\n         * Custom URL for providers not specified in [providers type](#series.\n         * tiledwebmap.provider.type). Available variables to use in URL are: `{x}`,\n         * `{y}`, `{z}` or `{zoom}`. Remember to always specify a projection, when\n         * using a custom URL.\n         *\n         * @sample maps/series-tiledwebmap/custom-url\n         *         Custom URL with projection in TiledWebMap configuration\n         *\n         * @type      {string}\n         * @since 11.1.0\n         * @product   highmaps\n         * @apioption plotOptions.tiledwebmap.provider.url\n         */\n        ''; // keeps doclets above detached\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TiledWebMapSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/TiledWebMap/TiledWebMapSeries.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Maps/TilesProviders/TilesProviderRegistry.js'], _modules['Series/TiledWebMap/TiledWebMapSeriesDefaults.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, TilesProvidersRegistry, TiledWebMapSeriesDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2023 Hubert Kozik, Kamil Musiałowski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { map: MapSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined, error, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function onChartBeforeMapViewInit(e) {\n            const twm = (this.options.series || []).filter((s) => s.type === 'tiledwebmap')[0], { geoBounds } = e;\n            if (twm && twm.provider && twm.provider.type && !twm.provider.url) {\n                const ProviderDefinition = TilesProvidersRegistry[twm.provider.type];\n                if (!defined(ProviderDefinition)) {\n                    error('Highcharts warning: Tiles Provider not defined in the ' +\n                        'Provider Registry.', false);\n                }\n                else {\n                    const def = new ProviderDefinition(), { initialProjectionName: providerProjectionName } = def;\n                    if (this.options.mapView) {\n                        if (geoBounds) {\n                            const { x1, y1, x2, y2 } = geoBounds;\n                            this.options.mapView.recommendedMapView = {\n                                projection: {\n                                    name: providerProjectionName,\n                                    parallels: [y1, y2],\n                                    rotation: [-(x1 + x2) / 2]\n                                }\n                            };\n                        }\n                        else {\n                            this.options.mapView.recommendedMapView = {\n                                projection: {\n                                    name: providerProjectionName\n                                },\n                                minZoom: 0\n                            };\n                        }\n                    }\n                    return false;\n                }\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.tiledwebmap\n         *\n         * @augments Highcharts.Series\n         */\n        class TiledWebMapSeries extends MapSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.options = void 0;\n                this.redrawTiles = false;\n                this.isAnimating = false;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass) {\n                if (pushUnique(composedMembers, ChartClass)) {\n                    addEvent(ChartClass, 'beforeMapViewInit', onChartBeforeMapViewInit);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Convert map coordinates in longitude/latitude to tile\n             *\n             * @function Highcharts.MapView#lonLatToTile\n             * @since 11.1.0\n             * @param  {Highcharts.MapLonLatObject} lonLat\n             *         The map coordinates\n             * @return {Highcharts.PositionObject}\n             *         Array of x and y positions of the tile\n             */\n            lonLatToTile(lonLat, zoom) {\n                const { lon, lat } = lonLat, xTile = Math.floor((lon + 180) / 360 * Math.pow(2, zoom)), yTile = Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) +\n                    1 / Math.cos(lat * Math.PI / 180)) / Math.PI) /\n                    2 * Math.pow(2, zoom));\n                return { x: xTile, y: yTile };\n            }\n            /**\n             * Convert tile to map coordinates in longitude/latitude\n             *\n             * @function Highcharts.MapView#tileToLonLat\n             * @since 11.1.0\n             * @param  xTile\n             *         Position x of the tile\n             * @param  yTile\n             *         Position y of the tile\n             * @param  zTile\n             *         Zoom of the tile\n             * @return {Highcharts.MapLonLatObject}\n             *         The map coordinates\n             */\n            tileToLonLat(xTile, yTile, zTile) {\n                const lon = xTile / Math.pow(2, zTile) * 360 - 180, n = Math.PI - 2 * Math.PI * yTile / Math.pow(2, zTile), lat = (180 /\n                    Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n))));\n                return { lon, lat };\n            }\n            drawPoints() {\n                const chart = this.chart, mapView = chart.mapView;\n                if (!mapView) {\n                    return;\n                }\n                const tiles = (this.tiles = this.tiles || {}), transformGroups = (this.transformGroups = this.transformGroups || []), series = this, options = this.options, provider = options.provider, { zoom } = mapView, lambda = pick((mapView.projection.options.rotation &&\n                    mapView.projection.options.rotation[0]), 0), worldSize = 400.979322, tileSize = 256, duration = chart.renderer.forExport ? 0 : 200, animateTiles = (duration) => {\n                    for (const zoomKey of Object.keys(tiles)) {\n                        if ((parseFloat(zoomKey) === (mapView.zoom < 0 ? 0 :\n                            Math.floor(mapView.zoom))) ||\n                            (series.minZoom &&\n                                (mapView.zoom < 0 ? 0 :\n                                    Math.floor(mapView.zoom)) < series.minZoom &&\n                                parseFloat(zoomKey) === series.minZoom) ||\n                            (series.maxZoom &&\n                                (mapView.zoom < 0 ? 0 :\n                                    Math.floor(mapView.zoom)) > series.maxZoom &&\n                                parseFloat(zoomKey) === series.maxZoom)) {\n                            Object\n                                .keys(tiles[zoomKey].tiles)\n                                .forEach((key, i) => {\n                                tiles[zoomKey].tiles[key].animate({\n                                    opacity: 1\n                                }, {\n                                    duration: duration\n                                }, () => {\n                                    if (i === Object.keys(tiles[zoomKey].tiles)\n                                        .length - 1) {\n                                        tiles[zoomKey].isActive = true;\n                                    }\n                                });\n                            });\n                        }\n                        else {\n                            Object\n                                .keys(tiles[zoomKey].tiles)\n                                .forEach((key, i) => {\n                                tiles[zoomKey].tiles[key].animate({\n                                    opacity: 0\n                                }, {\n                                    duration: duration,\n                                    defer: duration / 2\n                                }, () => {\n                                    tiles[zoomKey].tiles[key].destroy();\n                                    delete tiles[zoomKey].tiles[key];\n                                    if (i === Object.keys(tiles[zoomKey].tiles)\n                                        .length - 1) {\n                                        tiles[zoomKey].isActive = false;\n                                        tiles[zoomKey].loaded = false;\n                                    }\n                                });\n                            });\n                        }\n                    }\n                };\n                let zoomFloor = zoom < 0 ? 0 : Math.floor(zoom), maxTile = Math.pow(2, zoomFloor), scale = ((tileSize / worldSize) * Math.pow(2, zoom)) /\n                    ((tileSize / worldSize) * Math.pow(2, zoomFloor)), scaledTileSize = scale * 256;\n                if (provider && (provider.type || provider.url)) {\n                    if (provider.type && !provider.url) {\n                        const ProviderDefinition = TilesProvidersRegistry[provider.type];\n                        if (!defined(ProviderDefinition)) {\n                            error('Highcharts warning: Tiles Provider \\'' +\n                                provider.type + '\\' not defined in the Provider' +\n                                'Registry.', false);\n                            return;\n                        }\n                        const def = new ProviderDefinition(), providerProjection = def.initialProjectionName;\n                        let theme, subdomain = '';\n                        if (provider.theme && defined(def.themes[provider.theme])) {\n                            theme = def.themes[provider.theme];\n                        }\n                        else {\n                            // if nothing set take first theme\n                            const firstTheme = Object.keys(def.themes)[0];\n                            theme = def.themes[firstTheme];\n                            error('Highcharts warning: The Tiles Provider\\'s Theme \\'' +\n                                provider.theme + '\\' is not defined in the Provider ' +\n                                'definition - falling back to \\'' + firstTheme + '\\'.', false);\n                        }\n                        if (provider.subdomain &&\n                            def.subdomains &&\n                            def.subdomains.indexOf(provider.subdomain) !== -1) {\n                            subdomain = provider.subdomain;\n                        }\n                        else if (defined(def.subdomains) &&\n                            // Do not show warning if no subdomain in URL\n                            theme.url.indexOf('{s}') !== -1) {\n                            subdomain = pick(def.subdomains && def.subdomains[0], '');\n                            error('Highcharts warning: The Tiles Provider\\'s Subdomain ' +\n                                '\\'' + provider.subdomain + '\\' is not defined in ' +\n                                'the Provider definition - falling back to \\'' +\n                                subdomain + '\\'.', false);\n                        }\n                        if (def.requiresApiKey) {\n                            if (provider.apiKey) {\n                                theme.url =\n                                    theme.url.replace('{apikey}', provider.apiKey);\n                            }\n                            else {\n                                error('Highcharts warning: The Tiles Provider requires ' +\n                                    'API Key to use tiles, use provider.apiKey to ' +\n                                    'provide a token.', false);\n                                theme.url = theme.url.replace('?apikey={apikey}', '');\n                            }\n                        }\n                        provider.url = theme.url\n                            .replace('{s}', subdomain);\n                        this.minZoom = theme.minZoom;\n                        this.maxZoom = theme.maxZoom;\n                        // Add as credits.text, to prevent changing the default mapText\n                        const creditsText = pick(chart.userOptions.credits && chart.userOptions.credits.text, 'Highcharts.com ' + pick(theme.credits, def.defaultCredits));\n                        if (chart.credits) {\n                            chart.credits.update({\n                                text: creditsText\n                            });\n                        }\n                        else {\n                            chart.addCredits({\n                                text: creditsText,\n                                style: pick(chart.options.credits?.style, {})\n                            });\n                        }\n                        if (mapView.projection.options.name !== providerProjection) {\n                            error('Highcharts warning: The set projection is different ' +\n                                'than supported by Tiles Provider.', false);\n                        }\n                    }\n                    else {\n                        if (!mapView.projection.options.name) {\n                            error('Highcharts warning: The set projection is different ' +\n                                'than supported by Tiles Provider.', false);\n                        }\n                    }\n                    // if zoom is smaller/higher than supported by provider\n                    if (defined(this.minZoom) && zoomFloor < this.minZoom) {\n                        zoomFloor = this.minZoom;\n                        maxTile = Math.pow(2, zoomFloor);\n                        scale = ((tileSize / worldSize) * Math.pow(2, zoom)) /\n                            ((tileSize / worldSize) * Math.pow(2, zoomFloor));\n                        scaledTileSize = scale * 256;\n                    }\n                    else if (defined(this.maxZoom) && zoomFloor > this.maxZoom) {\n                        zoomFloor = this.maxZoom;\n                        maxTile = Math.pow(2, zoomFloor);\n                        scale = ((tileSize / worldSize) * Math.pow(2, zoom)) /\n                            ((tileSize / worldSize) * Math.pow(2, zoomFloor));\n                        scaledTileSize = scale * 256;\n                    }\n                    if (mapView.projection && mapView.projection.def) {\n                        // Always true for tile maps\n                        mapView.projection.hasCoordinates = true;\n                        if (!transformGroups[zoomFloor]) {\n                            transformGroups[zoomFloor] =\n                                chart.renderer.g().add(this.group);\n                        }\n                        const replaceVariables = (url, x, y, zoom) => url\n                            .replace('{x}', x.toString())\n                            .replace('{y}', y.toString())\n                            .replace('{zoom}', zoom.toString())\n                            .replace('{z}', zoom.toString());\n                        const addTile = (x, y, givenZoom, translateX, translateY) => {\n                            const modX = x % maxTile, modY = y % maxTile, tileX = modX < 0 ? modX + maxTile : modX, tileY = modY < 0 ? modY + maxTile : modY;\n                            if (!tiles[`${givenZoom}`].tiles[`${x},${y}`]) {\n                                if (provider.url) {\n                                    const url = replaceVariables(provider.url, tileX, tileY, givenZoom);\n                                    tiles[givenZoom].loaded = false;\n                                    tiles[`${givenZoom}`].tiles[`${x},${y}`] =\n                                        chart.renderer.image(url, (x * scaledTileSize) - translateX, (y * scaledTileSize) - translateY, scaledTileSize, scaledTileSize)\n                                            .attr({\n                                            zIndex: 2,\n                                            opacity: 0\n                                        })\n                                            .on('load', function () {\n                                            if (provider.onload) {\n                                                provider.onload.apply(this);\n                                            }\n                                            if ((givenZoom ===\n                                                (mapView.zoom < 0 ? 0 :\n                                                    Math.floor(mapView.zoom))) ||\n                                                givenZoom === series.minZoom) {\n                                                tiles[`${givenZoom}`]\n                                                    .actualTilesCount++;\n                                                // if last tile\n                                                if (tiles[`${givenZoom}`]\n                                                    .howManyTiles ===\n                                                    tiles[`${givenZoom}`]\n                                                        .actualTilesCount) {\n                                                    tiles[givenZoom].loaded = true;\n                                                    // fade-in new tiles if there is\n                                                    // no other animation\n                                                    if (!series.isAnimating) {\n                                                        series.redrawTiles = false;\n                                                        animateTiles(duration);\n                                                    }\n                                                    else {\n                                                        series.redrawTiles = true;\n                                                    }\n                                                    tiles[`${givenZoom}`]\n                                                        .actualTilesCount = 0;\n                                                }\n                                            }\n                                        })\n                                            .add(transformGroups[givenZoom]);\n                                    tiles[`${givenZoom}`].tiles[`${x},${y}`].posX = x;\n                                    tiles[`${givenZoom}`].tiles[`${x},${y}`].posY = y;\n                                    tiles[`${givenZoom}`].tiles[`${x},${y}`]\n                                        .originalURL = url;\n                                }\n                            }\n                        };\n                        // calculate topLeft and bottomRight corners without normalize\n                        const topLeftUnits = mapView.pixelsToProjectedUnits({\n                            x: 0,\n                            y: 0\n                        }), topLeftArr = mapView.projection.def.inverse([topLeftUnits.x, topLeftUnits.y]), topLeft = {\n                            lon: topLeftArr[0] - lambda,\n                            lat: topLeftArr[1]\n                        }, bottomRightUnits = mapView.pixelsToProjectedUnits({\n                            x: chart.plotWidth,\n                            y: chart.plotHeight\n                        }), bottomRightArr = mapView.projection.def.inverse([bottomRightUnits.x, bottomRightUnits.y]), bottomRight = {\n                            lon: bottomRightArr[0] - lambda,\n                            lat: bottomRightArr[1]\n                        };\n                        // do not support vertical looping\n                        if (topLeft.lat > mapView.projection.maxLatitude ||\n                            bottomRight.lat < -1 * mapView.projection.maxLatitude) {\n                            topLeft.lat = mapView.projection.maxLatitude;\n                            bottomRight.lat = -1 * mapView.projection.maxLatitude;\n                        }\n                        const startPos = this.lonLatToTile(topLeft, zoomFloor), endPos = this.lonLatToTile(bottomRight, zoomFloor);\n                        // calculate group translations based on first loaded tile\n                        const firstTileLonLat = this.tileToLonLat(startPos.x, startPos.y, zoomFloor), units = mapView.projection.def.forward([\n                            firstTileLonLat.lon + lambda,\n                            firstTileLonLat.lat\n                        ]), firstTilePx = mapView.projectedUnitsToPixels({\n                            x: units[0], y: units[1]\n                        }), translateX = (startPos.x * scaledTileSize - firstTilePx.x), translateY = (startPos.y * scaledTileSize - firstTilePx.y);\n                        if (!tiles[`${zoomFloor}`]) {\n                            tiles[`${zoomFloor}`] = {\n                                tiles: {},\n                                isActive: false,\n                                howManyTiles: 0,\n                                actualTilesCount: 0,\n                                loaded: false\n                            };\n                        }\n                        tiles[`${zoomFloor}`].howManyTiles =\n                            (endPos.x - startPos.x + 1) * (endPos.y - startPos.y + 1);\n                        tiles[`${zoomFloor}`].actualTilesCount = 0;\n                        for (let x = startPos.x; x <= endPos.x; x++) {\n                            for (let y = startPos.y; y <= endPos.y; y++) {\n                                addTile(x, y, zoomFloor, translateX, translateY);\n                            }\n                        }\n                    }\n                    for (const zoomKey of Object.keys(tiles)) {\n                        for (const key of Object.keys(tiles[zoomKey].tiles)) {\n                            if (mapView.projection && mapView.projection.def) {\n                                // calculate group translations based on first loaded\n                                // tile\n                                const scale = ((tileSize / worldSize) *\n                                    Math.pow(2, zoom)) / ((tileSize / worldSize) *\n                                    Math.pow(2, parseFloat(zoomKey))), scaledTileSize = scale * 256, firstTile = tiles[zoomKey].tiles[Object.keys(tiles[zoomKey].tiles)[0]], { posX, posY } = tiles[zoomKey].tiles[key];\n                                if (defined(posX) &&\n                                    defined(posY) &&\n                                    defined(firstTile.posX) &&\n                                    defined(firstTile.posY)) {\n                                    const firstTileLonLat = this.tileToLonLat(firstTile.posX, firstTile.posY, parseFloat(zoomKey)), units = mapView.projection.def.forward([\n                                        firstTileLonLat.lon + lambda,\n                                        firstTileLonLat.lat\n                                    ]), firstTilePx = mapView.projectedUnitsToPixels({\n                                        x: units[0], y: units[1]\n                                    }), tilesOffsetX = (firstTile.posX * scaledTileSize) -\n                                        firstTilePx.x, tilesOffsetY = (firstTile.posY * scaledTileSize) -\n                                        firstTilePx.y;\n                                    if (chart.renderer.globalAnimation &&\n                                        chart.hasRendered) {\n                                        const startX = Number(tiles[zoomKey].tiles[key].attr('x')), startY = Number(tiles[zoomKey].tiles[key].attr('y')), startWidth = Number(tiles[zoomKey].tiles[key].attr('width')), startHeight = Number(tiles[zoomKey].tiles[key].attr('height'));\n                                        const step = (now, fx) => {\n                                            tiles[zoomKey].tiles[key].attr({\n                                                x: (startX + (((posX * scaledTileSize) -\n                                                    tilesOffsetX - startX) * fx.pos)),\n                                                y: (startY + (((posY * scaledTileSize) -\n                                                    tilesOffsetY - startY) * fx.pos)),\n                                                width: (startWidth + ((Math.ceil(scaledTileSize) + 1 -\n                                                    startWidth) * fx.pos)),\n                                                height: (startHeight + ((Math.ceil(scaledTileSize) + 1 -\n                                                    startHeight) * fx.pos))\n                                            });\n                                        };\n                                        series.isAnimating = true;\n                                        tiles[zoomKey].tiles[key]\n                                            .attr({ animator: 0 })\n                                            .animate({ animator: 1 }, { step }, function () {\n                                            series.isAnimating = false;\n                                            // if animate ended after loading\n                                            // the tiles\n                                            if (series.redrawTiles) {\n                                                series.redrawTiles = false;\n                                                animateTiles(duration);\n                                            }\n                                        });\n                                        // When dragging or first rendering,\n                                        // animation is off\n                                    }\n                                    else {\n                                        // animate tiles if something broke\n                                        if (series.redrawTiles ||\n                                            parseFloat(zoomKey) !== zoomFloor ||\n                                            ((tiles[zoomKey].isActive ||\n                                                parseFloat(zoomKey) === zoomFloor) &&\n                                                Object.keys(tiles[zoomKey].tiles)\n                                                    .map((key) => tiles[zoomKey].tiles[key])\n                                                    .some((tile) => tile.opacity === 0))) {\n                                            series.redrawTiles = false;\n                                            animateTiles(duration);\n                                        }\n                                        tiles[zoomKey].tiles[key].attr({\n                                            x: (posX * scaledTileSize) - tilesOffsetX,\n                                            y: (posY * scaledTileSize) - tilesOffsetY,\n                                            width: Math.ceil(scaledTileSize) + 1,\n                                            height: Math.ceil(scaledTileSize) + 1\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    error('Highcharts warning: Tiles Provider not defined in the ' +\n                        'Provider Registry.', false);\n                }\n            }\n            update() {\n                const series = this, { transformGroups } = series, chart = this.chart, mapView = chart.mapView, options = arguments[0], { provider } = options;\n                if (transformGroups) {\n                    transformGroups.forEach((group) => {\n                        if (Object.keys(group).length !== 0) {\n                            group.destroy();\n                        }\n                    });\n                    this.transformGroups = [];\n                }\n                if (mapView &&\n                    !defined(mapView.options.projection) &&\n                    provider &&\n                    provider.type) {\n                    const ProviderDefinition = TilesProvidersRegistry[provider.type];\n                    if (ProviderDefinition) {\n                        const def = new ProviderDefinition(), { initialProjectionName: providerProjectionName } = def;\n                        mapView.update({\n                            projection: {\n                                name: providerProjectionName\n                            }\n                        });\n                    }\n                }\n                super.update.apply(series, arguments);\n            }\n        }\n        TiledWebMapSeries.defaultOptions = merge(MapSeries.defaultOptions, TiledWebMapSeriesDefaults);\n        SeriesRegistry.registerSeriesType('tiledwebmap', TiledWebMapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TiledWebMapSeries;\n    });\n    _registerModule(_modules, 'masters/modules/tiledwebmap.src.js', [_modules['Core/Globals.js'], _modules['Series/TiledWebMap/TiledWebMapSeries.js'], _modules['Maps/TilesProviders/TilesProviderRegistry.js']], function (Highcharts, TiledWebMapSeries, TilesProviderRegistry) {\n\n        const G = Highcharts;\n        G.TilesProviderRegistry = TilesProviderRegistry;\n        TiledWebMapSeries.compose(G.Chart);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","constructor","defaultCredits","initialProjectionName","subdomains","themes","Standard","url","minZoom","maxZoom","Hot","OpenTopoMap","credits","Toner","TonerBackground","TonerLite","Terrain","TerrainBackground","Watercolor","requiresApiKey","OpenCycleMap","Transport","TransportDark","SpinalMap","Landscape","Outdoors","Pioneer","MobileAtlas","Neighbourhood","WorldStreetMap","DeLorme","WorldTopoMap","WorldImagery","WorldTerrain","WorldShadedRelief","WorldPhysical","NatGeoWorldMap","WorldGrayCanvas","USTopo","USImagery","USImageryTopo","OpenStreetMap","Stamen","LimaLabs","Thunderforest","Esri","USGS","states","inactive","enabled","SeriesRegistry","TilesProvidersRegistry","TiledWebMapSeriesDefaults","U","map","MapSeries","seriesTypes","addEvent","defined","error","merge","pick","pushUnique","composedMembers","onChartBeforeMapViewInit","e","twm","options","series","filter","s","type","geoBounds","provider","ProviderDefinition","def","providerProjectionName","mapView","x1","y1","x2","y2","recommendedMapView","projection","name","parallels","rotation","TiledWebMapSeries","arguments","redrawTiles","isAnimating","compose","ChartClass","lonLatToTile","lonLat","zoom","lon","lat","x","Math","floor","pow","y","log","tan","PI","cos","tileToLonLat","xTile","yTile","zTile","n","atan","exp","drawPoints","chart","tiles","transformGroups","lambda","duration","renderer","forExport","animateTiles","zoomKey","Object","keys","parseFloat","forEach","key","i","animate","opacity","length","isActive","defer","destroy","loaded","zoomFloor","maxTile","scale","tileSize","scaledTileSize","providerProjection","theme","subdomain","firstTheme","indexOf","apiKey","replace","creditsText","userOptions","text","update","addCredits","style","hasCoordinates","g","add","group","replaceVariables","toString","addTile","givenZoom","translateX","translateY","modX","modY","tileX","tileY","image","attr","zIndex","on","onload","actualTilesCount","howManyTiles","posX","posY","originalURL","topLeftUnits","pixelsToProjectedUnits","topLeftArr","inverse","topLeft","bottomRightUnits","plotWidth","plotHeight","bottomRightArr","bottomRight","maxLatitude","startPos","endPos","firstTileLonLat","units","forward","firstTilePx","projectedUnitsToPixels","firstTile","tilesOffsetX","tilesOffsetY","globalAnimation","hasRendered","startX","Number","startY","startWidth","startHeight","step","now","fx","pos","width","ceil","height","animator","some","tile","defaultOptions","registerSeriesType","TilesProviderRegistry","G","Chart"],"mappings":"AAAA;;;;;;CAMC,GACA,SAAUA,CAAO,EACV,AAAkB,UAAlB,OAAOC,QAAuBA,OAAOC,OAAO,EAC5CF,EAAQ,OAAU,CAAGA,EACrBC,OAAOC,OAAO,CAAGF,GACV,AAAkB,YAAlB,OAAOG,QAAyBA,OAAOC,GAAG,CACjDD,OAAO,iCAAkC,CAAC,aAAa,CAAE,SAAUE,CAAU,EAGzE,OAFAL,EAAQK,GACRL,EAAQK,UAAU,CAAGA,EACdL,CACX,GAEAA,EAAQ,AAAsB,aAAtB,OAAOK,WAA6BA,WAAaC,KAAAA,EAEjE,EAAE,SAAUD,CAAU,EAClB,aACA,IAAIE,EAAWF,EAAaA,EAAWE,QAAQ,CAAG,CAAC,EACnD,SAASC,EAAgBC,CAAG,CAAEC,CAAI,CAAEC,CAAI,CAAEC,CAAE,EACnCH,EAAII,cAAc,CAACH,KACpBD,CAAG,CAACC,EAAK,CAAGE,EAAGE,KAAK,CAAC,KAAMH,GAEA,YAAvB,OAAOI,aACPC,OAAOC,aAAa,CAAC,IAAIF,YACrB,yBACA,CAAEG,OAAQ,CAAER,KAAMA,EAAMT,OAAQQ,CAAG,CAACC,EAAK,AAAC,CAAE,IAI5D,CACAF,EAAgBD,EAAU,uCAAwC,EAAE,CAAE,WAiDlE,OAxCA,MACIY,aAAc,CAMV,IAAI,CAACC,cAAc,CAAI,yFAEvB,IAAI,CAACC,qBAAqB,CAAG,cAC7B,IAAI,CAACC,UAAU,CAAG,CAAC,IAAK,IAAK,IAAI,CACjC,IAAI,CAACC,MAAM,CAAG,CACVC,SAAU,CACNC,IAAK,oDACLC,QAAS,EACTC,QAAS,EACb,EACAC,IAAK,CACDH,IAAK,wDACLC,QAAS,EACTC,QAAS,EACb,EACAE,YAAa,CACTJ,IAAK,mDACLC,QAAS,EACTC,QAAS,GACTG,QAAS,CAAC;;;gGAG8D,CAAC,AAC7E,CACJ,CACJ,CACJ,CAQJ,GACAtB,EAAgBD,EAAU,gCAAiC,EAAE,CAAE,WAmE3D,OA1DA,MACIY,aAAc,CAMV,IAAI,CAACC,cAAc,CAAI,iRAIvB,IAAI,CAACC,qBAAqB,CAAG,cAC7B,IAAI,CAACC,UAAU,CAAG,CAAC,IAAK,IAAK,IAAK,IAAI,CACtC,IAAI,CAACC,MAAM,CAAG,CACVQ,MAAO,CACHN,IAAK,kEACLC,QAAS,EACTC,QAAS,EACb,EACAK,gBAAiB,CACbP,IAAK,6EACLC,QAAS,EACTC,QAAS,EACb,EACAM,UAAW,CACPR,IAAK,uEACLC,QAAS,EACTC,QAAS,EACb,EACAO,QAAS,CACLT,IAAK,oEACLC,QAAS,EACTC,QAAS,EACb,EACAQ,kBAAmB,CACfV,IAAK,+EACLC,QAAS,EACTC,QAAS,EACb,EACAS,WAAY,CACRX,IAAK,uEACLC,QAAS,EACTC,QAAS,GACTG,QAAU,0RAKd,CACJ,CACJ,CACJ,CAQJ,GACAtB,EAAgBD,EAAU,kCAAmC,EAAE,CAAE,WAmC7D,OA1BA,MACIY,aAAc,CAMV,IAAI,CAACC,cAAc,CAAI,yEAEvB,IAAI,CAACC,qBAAqB,CAAG,cAC7B,IAAI,CAACgB,cAAc,CAAG,CAAA,EACtB,IAAI,CAACd,MAAM,CAAG,CACVC,SAAU,CACNC,IAAK,4DACLC,QAAS,EACTC,QAAS,EACb,CACJ,CACJ,CACJ,CAQJ,GACAnB,EAAgBD,EAAU,uCAAwC,EAAE,CAAE,WA6ElE,OApEA,MACIY,aAAc,CAMV,IAAI,CAACC,cAAc,CAAI,qKAGvB,IAAI,CAACC,qBAAqB,CAAG,cAC7B,IAAI,CAACgB,cAAc,CAAG,CAAA,EACtB,IAAI,CAACf,UAAU,CAAG,CAAC,IAAK,IAAK,IAAI,CACjC,IAAI,CAACC,MAAM,CAAG,CACVe,aAAc,CACVb,IAAK,2EACLC,QAAS,EACTC,QAAS,EACb,EACAY,UAAW,CACPd,IAAK,+EACLC,QAAS,EACTC,QAAS,EACb,EACAa,cAAe,CACXf,IAAK,oFACLC,QAAS,EACTC,QAAS,EACb,EACAc,UAAW,CACPhB,IAAK,gFACLC,QAAS,EACTC,QAAS,EACb,EACAe,UAAW,CACPjB,IAAK,+EACLC,QAAS,EACTC,QAAS,EACb,EACAgB,SAAU,CACNlB,IAAK,8EACLC,QAAS,EACTC,QAAS,EACb,EACAiB,QAAS,CACLnB,IAAK,6EACLC,QAAS,EACTC,QAAS,EACb,EACAkB,YAAa,CACTpB,IAAK,kFACLC,QAAS,EACTC,QAAS,EACb,EACAmB,cAAe,CACXrB,IAAK,mFACLC,QAAS,EACTC,QAAS,EACb,CACJ,CACJ,CACJ,CAQJ,GACAnB,EAAgBD,EAAU,8BAA+B,EAAE,CAAE,WA2FzD,OAlFA,MACIY,aAAc,CAMV,IAAI,CAACC,cAAc,CAAI,gKAGvB,IAAI,CAACC,qBAAqB,CAAG,cAC7B,IAAI,CAACE,MAAM,CAAG,CACVwB,eAAgB,CACZtB,IAAK,mGACLC,QAAS,EACTC,QAAS,EACb,EACAqB,QAAS,CACLvB,IAAK,mHACLC,QAAS,EACTC,QAAS,GACTG,QAAS,yDACb,EACAmB,aAAc,CACVxB,IAAK,iGACLC,QAAS,EACTC,QAAS,GACTG,QAAU,4MAId,EACAoB,aAAc,CACVzB,IAAK,gGACLC,QAAS,EACTC,QAAS,GACTG,QAAU,+IAGd,EACAqB,aAAc,CACV1B,IAAK,qGACLC,QAAS,EACTC,QAAS,GACTG,QAAU,sEAEd,EACAsB,kBAAmB,CACf3B,IAAK,sGACLC,QAAS,EACTC,QAAS,GACTG,QAAS,wCACb,EACAuB,cAAe,CACX5B,IAAK,qGACLC,QAAS,EACTC,QAAS,EACTG,QAAS,4DACb,EACAwB,eAAgB,CACZ7B,IAAK,mGACLC,QAAS,EACTC,QAAS,GACTG,QAAU,iIAGd,EACAyB,gBAAiB,CACb9B,IAAK,+GACLC,QAAS,EACTC,QAAS,GACTG,QAAS,iDACb,CACJ,CACJ,CACJ,CAQJ,GACAtB,EAAgBD,EAAU,8BAA+B,EAAE,CAAE,WA4CzD,OAnCA,MACIY,aAAc,CAMV,IAAI,CAACC,cAAc,CAAI,8EAEvB,IAAI,CAACC,qBAAqB,CAAG,cAC7B,IAAI,CAACE,MAAM,CAAG,CACViC,OAAQ,CACJ/B,IAAK,2FACLC,QAAS,EACTC,QAAS,EACb,EACA8B,UAAW,CACPhC,IAAK,kGACLC,QAAS,EACTC,QAAS,EACb,EACA+B,cAAe,CACXjC,IAAK,kGACLC,QAAS,EACTC,QAAS,EACb,CACJ,CACJ,CACJ,CAQJ,GACAnB,EAAgBD,EAAU,+CAAgD,CAACA,CAAQ,CAAC,uCAAuC,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,uCAAuC,CAAEA,CAAQ,CAAC,8BAA8B,CAAEA,CAAQ,CAAC,8BAA8B,CAAC,CAAE,SAAUoD,CAAa,CAAEC,CAAM,CAAEC,CAAQ,CAAEC,CAAa,CAAEC,CAAI,CAAEC,CAAI,EA8B1Z,MAd8B,CAC1BD,KAAAA,EACAF,SAAAA,EACAF,cAAAA,EACAC,OAAAA,EACAE,cAAAA,EACAE,KAAAA,CACJ,CAQJ,GACAxD,EAAgBD,EAAU,kDAAmD,EAAE,CAAE,WAgJ7E,MA5GkC,CAC9B0D,OAAQ,CACJC,SAAU,CACNC,QAAS,CAAA,CACb,CACJ,CACJ,CAuGJ,GACA3D,EAAgBD,EAAU,0CAA2C,CAACA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,+CAA+C,CAAEA,CAAQ,CAAC,kDAAkD,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU6D,CAAc,CAAEC,CAAsB,CAAEC,CAAyB,CAAEC,CAAC,EAUlV,GAAM,CAAEC,IAAKC,CAAS,CAAE,CAAGL,EAAeM,WAAW,CAC/C,CAAEC,SAAAA,CAAQ,CAAEC,QAAAA,CAAO,CAAEC,MAAAA,CAAK,CAAEC,MAAAA,CAAK,CAAEC,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAE,CAAGT,EAMxDU,EAAkB,EAAE,CAO1B,SAASC,EAAyBC,CAAC,EAC/B,IAAMC,EAAM,AAAC,CAAA,IAAI,CAACC,OAAO,CAACC,MAAM,EAAI,EAAE,AAAD,EAAGC,MAAM,CAAC,AAACC,GAAMA,AAAW,gBAAXA,EAAEC,IAAI,CAAmB,CAAC,EAAE,CAAE,CAAEC,UAAAA,CAAS,CAAE,CAAGP,EACpG,GAAIC,GAAOA,EAAIO,QAAQ,EAAIP,EAAIO,QAAQ,CAACF,IAAI,EAAI,CAACL,EAAIO,QAAQ,CAAClE,GAAG,CAAE,CAC/D,IAAMmE,EAAqBvB,CAAsB,CAACe,EAAIO,QAAQ,CAACF,IAAI,CAAC,CACpE,GAAKb,EAAQgB,GAIR,CACD,IAAMC,EAAM,IAAID,EAAsB,CAAEvE,sBAAuByE,CAAsB,CAAE,CAAGD,EAC1F,GAAI,IAAI,CAACR,OAAO,CAACU,OAAO,EACpB,GAAIL,EAAW,CACX,GAAM,CAAEM,GAAAA,CAAE,CAAEC,GAAAA,CAAE,CAAEC,GAAAA,CAAE,CAAEC,GAAAA,CAAE,CAAE,CAAGT,CAC3B,CAAA,IAAI,CAACL,OAAO,CAACU,OAAO,CAACK,kBAAkB,CAAG,CACtCC,WAAY,CACRC,KAAMR,EACNS,UAAW,CAACN,EAAIE,EAAG,CACnBK,SAAU,CAAC,CAAER,CAAAA,EAAKE,CAAC,EAAK,EAAE,AAC9B,CACJ,CACJ,MAEI,IAAI,CAACb,OAAO,CAACU,OAAO,CAACK,kBAAkB,CAAG,CACtCC,WAAY,CACRC,KAAMR,CACV,EACApE,QAAS,CACb,EAGR,MAAO,CAAA,CACX,CA1BImD,EAAM,2EACoB,CAAA,EA0BlC,CACA,MAAO,CAAA,CACX,CAeA,MAAM4B,UAA0BhC,EAC5BtD,aAAc,CAMV,KAAK,IAAIuF,WAMT,IAAI,CAACrB,OAAO,CAAG,KAAK,EACpB,IAAI,CAACsB,WAAW,CAAG,CAAA,EACnB,IAAI,CAACC,WAAW,CAAG,CAAA,CACvB,CAMA,OAAOC,QAAQC,CAAU,CAAE,CACnB9B,EAAWC,EAAiB6B,IAC5BnC,EAASmC,EAAY,oBAAqB5B,EAElD,CAgBA6B,aAAaC,CAAM,CAAEC,CAAI,CAAE,CACvB,GAAM,CAAEC,IAAAA,CAAG,CAAEC,IAAAA,CAAG,CAAE,CAAGH,EAGrB,MAAO,CAAEI,EAH4BC,KAAKC,KAAK,CAAC,AAACJ,CAAAA,EAAM,GAAE,EAAK,IAAMG,KAAKE,GAAG,CAAC,EAAGN,IAG7DO,EAH6EH,KAAKC,KAAK,CAAC,AAAC,CAAA,EAAID,KAAKI,GAAG,CAACJ,KAAKK,GAAG,CAACP,EAAME,KAAKM,EAAE,CAAG,KAC9I,EAAIN,KAAKO,GAAG,CAACT,EAAME,KAAKM,EAAE,CAAG,MAAQN,KAAKM,EAAE,AAAD,EAC3C,EAAIN,KAAKE,GAAG,CAAC,EAAGN,GACQ,CAChC,CAeAY,aAAaC,CAAK,CAAEC,CAAK,CAAEC,CAAK,CAAE,CAC9B,IAAoDC,EAAIZ,KAAKM,EAAE,CAAG,EAAIN,KAAKM,EAAE,CAAGI,EAAQV,KAAKE,GAAG,CAAC,EAAGS,GAEpG,MAAO,CAAEd,IAFGY,EAAQT,KAAKE,GAAG,CAAC,EAAGS,GAAS,IAAM,IAEjCb,IAFqG,IAC/GE,KAAKM,EAAE,CAAGN,KAAKa,IAAI,CAAC,GAAOb,CAAAA,KAAKc,GAAG,CAACF,GAAKZ,KAAKc,GAAG,CAAC,CAACF,EAAC,EACtC,CACtB,CACAG,YAAa,CACT,IAAMC,EAAQ,IAAI,CAACA,KAAK,CAAEtC,EAAUsC,EAAMtC,OAAO,CACjD,GAAI,CAACA,EACD,OAEJ,IAAMuC,EAAS,IAAI,CAACA,KAAK,CAAG,IAAI,CAACA,KAAK,EAAI,CAAC,EAAIC,EAAmB,IAAI,CAACA,eAAe,CAAG,IAAI,CAACA,eAAe,EAAI,EAAE,CAAGjD,EAAS,IAAI,CAAED,EAAU,IAAI,CAACA,OAAO,CAAEM,EAAWN,EAAQM,QAAQ,CAAE,CAAEsB,KAAAA,CAAI,CAAE,CAAGlB,EAASyC,EAASzD,EAAMgB,EAAQM,UAAU,CAAChB,OAAO,CAACmB,QAAQ,EAC5PT,EAAQM,UAAU,CAAChB,OAAO,CAACmB,QAAQ,CAAC,EAAE,CAAG,GAA4CiC,EAAWJ,EAAMK,QAAQ,CAACC,SAAS,CAAG,EAAI,IAAKC,EAAe,AAACH,IACpJ,IAAK,IAAMI,KAAWC,OAAOC,IAAI,CAACT,GAC1B,AAACU,WAAWH,KAAc9C,CAAAA,EAAQkB,IAAI,CAAG,EAAI,EAC7CI,KAAKC,KAAK,CAACvB,EAAQkB,IAAI,CAAA,GACtB3B,EAAO5D,OAAO,EACX,AAACqE,CAAAA,EAAQkB,IAAI,CAAG,EAAI,EAChBI,KAAKC,KAAK,CAACvB,EAAQkB,IAAI,CAAA,EAAK3B,EAAO5D,OAAO,EAC9CsH,WAAWH,KAAavD,EAAO5D,OAAO,EACzC4D,EAAO3D,OAAO,EACX,AAACoE,CAAAA,EAAQkB,IAAI,CAAG,EAAI,EAChBI,KAAKC,KAAK,CAACvB,EAAQkB,IAAI,CAAA,EAAK3B,EAAO3D,OAAO,EAC9CqH,WAAWH,KAAavD,EAAO3D,OAAO,CAC1CmH,OACKC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,EACzBW,OAAO,CAAC,CAACC,EAAKC,KACfb,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAACE,OAAO,CAAC,CAC9BC,QAAS,CACb,EAAG,CACCZ,SAAUA,CACd,EAAG,KACKU,IAAML,OAAOC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,EACrCgB,MAAM,CAAG,GACVhB,CAAAA,CAAK,CAACO,EAAQ,CAACU,QAAQ,CAAG,CAAA,CAAG,CAErC,EACJ,GAGAT,OACKC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,EACzBW,OAAO,CAAC,CAACC,EAAKC,KACfb,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAACE,OAAO,CAAC,CAC9BC,QAAS,CACb,EAAG,CACCZ,SAAUA,EACVe,MAAOf,EAAW,CACtB,EAAG,KACCH,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAACO,OAAO,GACjC,OAAOnB,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAC5BC,IAAML,OAAOC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,EACrCgB,MAAM,CAAG,IACVhB,CAAK,CAACO,EAAQ,CAACU,QAAQ,CAAG,CAAA,EAC1BjB,CAAK,CAACO,EAAQ,CAACa,MAAM,CAAG,CAAA,EAEhC,EACJ,EAGZ,EACIC,EAAY1C,EAAO,EAAI,EAAII,KAAKC,KAAK,CAACL,GAAO2C,EAAUvC,KAAKE,GAAG,CAAC,EAAGoC,GAAYE,EAAQ,AAAEC,iBAAwBzC,KAAKE,GAAG,CAAC,EAAGN,GAC5H,CAAA,AAAC6C,iBAAwBzC,KAAKE,GAAG,CAAC,EAAGoC,EAAS,EAAII,EAAiBF,AAAQ,IAARA,EACxE,GAAIlE,GAAaA,CAAAA,EAASF,IAAI,EAAIE,EAASlE,GAAG,AAAD,EAAI,CAC7C,GAAIkE,EAASF,IAAI,EAAI,CAACE,EAASlE,GAAG,CAAE,CAChC,IAAMmE,EAAqBvB,CAAsB,CAACsB,EAASF,IAAI,CAAC,CAChE,GAAI,CAACb,EAAQgB,GAAqB,CAC9Bf,EAAM,uCACFc,EAASF,IAAI,CADX,yCAEW,CAAA,GACjB,MACJ,CACA,IAAMI,EAAM,IAAID,EAAsBoE,EAAqBnE,EAAIxE,qBAAqB,CAChF4I,EAAOC,EAAY,GACvB,GAAIvE,EAASsE,KAAK,EAAIrF,EAAQiB,EAAItE,MAAM,CAACoE,EAASsE,KAAK,CAAC,EACpDA,EAAQpE,EAAItE,MAAM,CAACoE,EAASsE,KAAK,CAAC,KAEjC,CAED,IAAME,EAAarB,OAAOC,IAAI,CAAClD,EAAItE,MAAM,CAAC,CAAC,EAAE,CAC7C0I,EAAQpE,EAAItE,MAAM,CAAC4I,EAAW,CAC9BtF,EAAM,mDACFc,EAASsE,KAAK,CADZ,kEAEkCE,EAAa,KAAO,CAAA,EAChE,CACIxE,EAASuE,SAAS,EAClBrE,EAAIvE,UAAU,EACduE,AAA+C,KAA/CA,EAAIvE,UAAU,CAAC8I,OAAO,CAACzE,EAASuE,SAAS,EACzCA,EAAYvE,EAASuE,SAAS,CAEzBtF,EAAQiB,EAAIvE,UAAU,GAE3B2I,AAA6B,KAA7BA,EAAMxI,GAAG,CAAC2I,OAAO,CAAC,SAClBF,EAAYnF,EAAKc,EAAIvE,UAAU,EAAIuE,EAAIvE,UAAU,CAAC,EAAE,CAAE,IACtDuD,EAAM,uDACKc,EAASuE,SAAS,CADvB,kEAGFA,EAAY,KAAO,CAAA,IAEvBrE,EAAIxD,cAAc,GACdsD,EAAS0E,MAAM,CACfJ,EAAMxI,GAAG,CACLwI,EAAMxI,GAAG,CAAC6I,OAAO,CAAC,WAAY3E,EAAS0E,MAAM,GAGjDxF,EAAM,gHAEkB,CAAA,GACxBoF,EAAMxI,GAAG,CAAGwI,EAAMxI,GAAG,CAAC6I,OAAO,CAAC,mBAAoB,MAG1D3E,EAASlE,GAAG,CAAGwI,EAAMxI,GAAG,CACnB6I,OAAO,CAAC,MAAOJ,GACpB,IAAI,CAACxI,OAAO,CAAGuI,EAAMvI,OAAO,CAC5B,IAAI,CAACC,OAAO,CAAGsI,EAAMtI,OAAO,CAE5B,IAAM4I,EAAcxF,EAAKsD,EAAMmC,WAAW,CAAC1I,OAAO,EAAIuG,EAAMmC,WAAW,CAAC1I,OAAO,CAAC2I,IAAI,CAAE,kBAAoB1F,EAAKkF,EAAMnI,OAAO,CAAE+D,EAAIzE,cAAc,EAC5IiH,CAAAA,EAAMvG,OAAO,CACbuG,EAAMvG,OAAO,CAAC4I,MAAM,CAAC,CACjBD,KAAMF,CACV,GAGAlC,EAAMsC,UAAU,CAAC,CACbF,KAAMF,EACNK,MAAO7F,EAAKsD,EAAMhD,OAAO,CAACvD,OAAO,EAAE8I,MAAO,CAAC,EAC/C,GAEA7E,EAAQM,UAAU,CAAChB,OAAO,CAACiB,IAAI,GAAK0D,GACpCnF,EAAM,wFACmC,CAAA,EAEjD,MAESkB,EAAQM,UAAU,CAAChB,OAAO,CAACiB,IAAI,EAChCzB,EAAM,wFACmC,CAAA,GAkBjD,GAdID,EAAQ,IAAI,CAAClD,OAAO,GAAKiI,EAAY,IAAI,CAACjI,OAAO,EAEjDkI,EAAUvC,KAAKE,GAAG,CAAC,EADnBoC,EAAY,IAAI,CAACjI,OAAO,EAIxBqI,EAAiBF,AAAQ,IAFzBA,CAAAA,EAAQ,AAAEC,iBAAwBzC,KAAKE,GAAG,CAAC,EAAGN,GACzC,CAAA,AAAC6C,iBAAwBzC,KAAKE,GAAG,CAAC,EAAGoC,EAAS,CAAC,GAG/C/E,EAAQ,IAAI,CAACjD,OAAO,GAAKgI,EAAY,IAAI,CAAChI,OAAO,GAEtDiI,EAAUvC,KAAKE,GAAG,CAAC,EADnBoC,EAAY,IAAI,CAAChI,OAAO,EAIxBoI,EAAiBF,AAAQ,IAFzBA,CAAAA,EAAQ,AAAEC,iBAAwBzC,KAAKE,GAAG,CAAC,EAAGN,GACzC,CAAA,AAAC6C,iBAAwBzC,KAAKE,GAAG,CAAC,EAAGoC,EAAS,CAAC,GAGpD5D,EAAQM,UAAU,EAAIN,EAAQM,UAAU,CAACR,GAAG,CAAE,CAE9CE,EAAQM,UAAU,CAACwE,cAAc,CAAG,CAAA,EAC/BtC,CAAe,CAACoB,EAAU,EAC3BpB,CAAAA,CAAe,CAACoB,EAAU,CACtBtB,EAAMK,QAAQ,CAACoC,CAAC,GAAGC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAA,EAEzC,IAAMC,EAAmB,CAACxJ,EAAK2F,EAAGI,EAAGP,IAASxF,EACzC6I,OAAO,CAAC,MAAOlD,EAAE8D,QAAQ,IACzBZ,OAAO,CAAC,MAAO9C,EAAE0D,QAAQ,IACzBZ,OAAO,CAAC,SAAUrD,EAAKiE,QAAQ,IAC/BZ,OAAO,CAAC,MAAOrD,EAAKiE,QAAQ,IAC3BC,EAAU,CAAC/D,EAAGI,EAAG4D,EAAWC,EAAYC,KAC1C,IAAMC,EAAOnE,EAAIwC,EAAS4B,EAAOhE,EAAIoC,EAAS6B,EAAQF,EAAO,EAAIA,EAAO3B,EAAU2B,EAAMG,EAAQF,EAAO,EAAIA,EAAO5B,EAAU4B,EAC5H,GAAI,CAAClD,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAAC9C,KAAK,CAAC,CAAC,EAAElB,EAAE,CAAC,EAAEI,EAAE,CAAC,CAAC,EACrC7B,EAASlE,GAAG,CAAE,CACd,IAAMA,EAAMwJ,EAAiBtF,EAASlE,GAAG,CAAEgK,EAAOC,EAAON,EACzD9C,CAAAA,CAAK,CAAC8C,EAAU,CAAC1B,MAAM,CAAG,CAAA,EAC1BpB,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAAC9C,KAAK,CAAC,CAAC,EAAElB,EAAE,CAAC,EAAEI,EAAE,CAAC,CAAC,CACpCa,EAAMK,QAAQ,CAACiD,KAAK,CAAClK,EAAK,AAAC2F,EAAI2C,EAAkBsB,EAAY,AAAC7D,EAAIuC,EAAkBuB,EAAYvB,EAAgBA,GAC3G6B,IAAI,CAAC,CACNC,OAAQ,EACRxC,QAAS,CACb,GACKyC,EAAE,CAAC,OAAQ,WACRnG,EAASoG,MAAM,EACfpG,EAASoG,MAAM,CAACjL,KAAK,CAAC,IAAI,EAE1B,CAAA,AAACsK,IACArF,CAAAA,EAAQkB,IAAI,CAAG,EAAI,EAChBI,KAAKC,KAAK,CAACvB,EAAQkB,IAAI,CAAA,GAC3BmE,IAAc9F,EAAO5D,OAAO,AAAD,IAC3B4G,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAChBY,gBAAgB,GAEjB1D,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CACpBa,YAAY,GACb3D,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAChBY,gBAAgB,GACrB1D,CAAK,CAAC8C,EAAU,CAAC1B,MAAM,CAAG,CAAA,EAGrBpE,EAAOsB,WAAW,CAKnBtB,EAAOqB,WAAW,CAAG,CAAA,GAJrBrB,EAAOqB,WAAW,CAAG,CAAA,EACrBiC,EAAaH,IAKjBH,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAChBY,gBAAgB,CAAG,GAGpC,GACKjB,GAAG,CAACxC,CAAe,CAAC6C,EAAU,EACvC9C,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAAC9C,KAAK,CAAC,CAAC,EAAElB,EAAE,CAAC,EAAEI,EAAE,CAAC,CAAC,CAAC0E,IAAI,CAAG9E,EAChDkB,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAAC9C,KAAK,CAAC,CAAC,EAAElB,EAAE,CAAC,EAAEI,EAAE,CAAC,CAAC,CAAC2E,IAAI,CAAG3E,EAChDc,CAAK,CAAC,CAAC,EAAE8C,EAAU,CAAC,CAAC,CAAC9C,KAAK,CAAC,CAAC,EAAElB,EAAE,CAAC,EAAEI,EAAE,CAAC,CAAC,CACnC4E,WAAW,CAAG3K,CACvB,CAER,EAEM4K,EAAetG,EAAQuG,sBAAsB,CAAC,CAChDlF,EAAG,EACHI,EAAG,CACP,GAAI+E,EAAaxG,EAAQM,UAAU,CAACR,GAAG,CAAC2G,OAAO,CAAC,CAACH,EAAajF,CAAC,CAAEiF,EAAa7E,CAAC,CAAC,EAAGiF,EAAU,CACzFvF,IAAKqF,CAAU,CAAC,EAAE,CAAG/D,EACrBrB,IAAKoF,CAAU,CAAC,EAAE,AACtB,EAAGG,EAAmB3G,EAAQuG,sBAAsB,CAAC,CACjDlF,EAAGiB,EAAMsE,SAAS,CAClBnF,EAAGa,EAAMuE,UAAU,AACvB,GAAIC,EAAiB9G,EAAQM,UAAU,CAACR,GAAG,CAAC2G,OAAO,CAAC,CAACE,EAAiBtF,CAAC,CAAEsF,EAAiBlF,CAAC,CAAC,EAAGsF,EAAc,CACzG5F,IAAK2F,CAAc,CAAC,EAAE,CAAGrE,EACzBrB,IAAK0F,CAAc,CAAC,EAAE,AAC1B,EAEIJ,CAAAA,EAAQtF,GAAG,CAAGpB,EAAQM,UAAU,CAAC0G,WAAW,EAC5CD,EAAY3F,GAAG,CAAG,GAAKpB,EAAQM,UAAU,CAAC0G,WAAW,AAAD,IACpDN,EAAQtF,GAAG,CAAGpB,EAAQM,UAAU,CAAC0G,WAAW,CAC5CD,EAAY3F,GAAG,CAAG,GAAKpB,EAAQM,UAAU,CAAC0G,WAAW,EAEzD,IAAMC,EAAW,IAAI,CAACjG,YAAY,CAAC0F,EAAS9C,GAAYsD,EAAS,IAAI,CAAClG,YAAY,CAAC+F,EAAanD,GAE1FuD,EAAkB,IAAI,CAACrF,YAAY,CAACmF,EAAS5F,CAAC,CAAE4F,EAASxF,CAAC,CAAEmC,GAAYwD,EAAQpH,EAAQM,UAAU,CAACR,GAAG,CAACuH,OAAO,CAAC,CACjHF,EAAgBhG,GAAG,CAAGsB,EACtB0E,EAAgB/F,GAAG,CACtB,EAAGkG,EAActH,EAAQuH,sBAAsB,CAAC,CAC7ClG,EAAG+F,CAAK,CAAC,EAAE,CAAE3F,EAAG2F,CAAK,CAAC,EAAE,AAC5B,GAAI9B,EAAc2B,EAAS5F,CAAC,CAAG2C,EAAiBsD,EAAYjG,CAAC,CAAGkE,EAAc0B,EAASxF,CAAC,CAAGuC,EAAiBsD,EAAY7F,CAAC,AACpHc,CAAAA,CAAK,CAAC,CAAC,EAAEqB,EAAU,CAAC,CAAC,EACtBrB,CAAAA,CAAK,CAAC,CAAC,EAAEqB,EAAU,CAAC,CAAC,CAAG,CACpBrB,MAAO,CAAC,EACRiB,SAAU,CAAA,EACV0C,aAAc,EACdD,iBAAkB,EAClBtC,OAAQ,CAAA,CACZ,CAAA,EAEJpB,CAAK,CAAC,CAAC,EAAEqB,EAAU,CAAC,CAAC,CAACsC,YAAY,CAC9B,AAACgB,CAAAA,EAAO7F,CAAC,CAAG4F,EAAS5F,CAAC,CAAG,CAAA,EAAM6F,CAAAA,EAAOzF,CAAC,CAAGwF,EAASxF,CAAC,CAAG,CAAA,EAC3Dc,CAAK,CAAC,CAAC,EAAEqB,EAAU,CAAC,CAAC,CAACqC,gBAAgB,CAAG,EACzC,IAAK,IAAI5E,EAAI4F,EAAS5F,CAAC,CAAEA,GAAK6F,EAAO7F,CAAC,CAAEA,IACpC,IAAK,IAAII,EAAIwF,EAASxF,CAAC,CAAEA,GAAKyF,EAAOzF,CAAC,CAAEA,IACpC2D,EAAQ/D,EAAGI,EAAGmC,EAAW0B,EAAYC,EAGjD,CACA,IAAK,IAAMzC,KAAWC,OAAOC,IAAI,CAACT,GAC9B,IAAK,IAAMY,KAAOJ,OAAOC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,EAC9C,GAAIvC,EAAQM,UAAU,EAAIN,EAAQM,UAAU,CAACR,GAAG,CAAE,CAG9C,IAAMgE,EAAQ,AAAEC,iBACZzC,KAAKE,GAAG,CAAC,EAAGN,GAAU,CAAA,AAAC6C,iBACvBzC,KAAKE,GAAG,CAAC,EAAGyB,WAAWH,GAAQ,EAAIkB,EAAiBF,AAAQ,IAARA,EAAa0D,EAAYjF,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACQ,OAAOC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,CAAC,CAAC,EAAE,CAAC,CAAE,CAAE4D,KAAAA,CAAI,CAAEC,KAAAA,CAAI,CAAE,CAAG7D,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CACvL,GAAItE,EAAQsH,IACRtH,EAAQuH,IACRvH,EAAQ2I,EAAUrB,IAAI,GACtBtH,EAAQ2I,EAAUpB,IAAI,EAAG,CACzB,IAAMe,EAAkB,IAAI,CAACrF,YAAY,CAAC0F,EAAUrB,IAAI,CAAEqB,EAAUpB,IAAI,CAAEnD,WAAWH,IAAWsE,EAAQpH,EAAQM,UAAU,CAACR,GAAG,CAACuH,OAAO,CAAC,CACnIF,EAAgBhG,GAAG,CAAGsB,EACtB0E,EAAgB/F,GAAG,CACtB,EAAGkG,EAActH,EAAQuH,sBAAsB,CAAC,CAC7ClG,EAAG+F,CAAK,CAAC,EAAE,CAAE3F,EAAG2F,CAAK,CAAC,EAAE,AAC5B,GAAIK,EAAe,AAACD,EAAUrB,IAAI,CAAGnC,EACjCsD,EAAYjG,CAAC,CAAEqG,EAAe,AAACF,EAAUpB,IAAI,CAAGpC,EAChDsD,EAAY7F,CAAC,CACjB,GAAIa,EAAMK,QAAQ,CAACgF,eAAe,EAC9BrF,EAAMsF,WAAW,CAAE,CACnB,IAAMC,EAASC,OAAOvF,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAAC0C,IAAI,CAAC,MAAOkC,EAASD,OAAOvF,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAAC0C,IAAI,CAAC,MAAOmC,EAAaF,OAAOvF,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAAC0C,IAAI,CAAC,UAAWoC,EAAcH,OAAOvF,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAAC0C,IAAI,CAAC,WAC9NqC,EAAO,CAACC,EAAKC,KACf7F,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAAC0C,IAAI,CAAC,CAC3BxE,EAAIwG,EAAU,AAAC,CAAA,AAAC1B,EAAOnC,EACnByD,EAAeI,CAAK,EAAKO,EAAGC,GAAG,CACnC5G,EAAIsG,EAAU,AAAC,CAAA,AAAC3B,EAAOpC,EACnB0D,EAAeK,CAAK,EAAKK,EAAGC,GAAG,CACnCC,MAAQN,EAAc,AAAC1G,CAAAA,KAAKiH,IAAI,CAACvE,GAAkB,EAC/CgE,CAAS,EAAKI,EAAGC,GAAG,CACxBG,OAASP,EAAe,AAAC3G,CAAAA,KAAKiH,IAAI,CAACvE,GAAkB,EACjDiE,CAAU,EAAKG,EAAGC,GAAG,AAC7B,EACJ,CACA9I,CAAAA,EAAOsB,WAAW,CAAG,CAAA,EACrB0B,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CACpB0C,IAAI,CAAC,CAAE4C,SAAU,CAAE,GACnBpF,OAAO,CAAC,CAAEoF,SAAU,CAAE,EAAG,CAAEP,KAAAA,CAAK,EAAG,WACpC3I,EAAOsB,WAAW,CAAG,CAAA,EAGjBtB,EAAOqB,WAAW,GAClBrB,EAAOqB,WAAW,CAAG,CAAA,EACrBiC,EAAaH,GAErB,EAGJ,KAGQnD,CAAAA,EAAOqB,WAAW,EAClBqC,WAAWH,KAAac,GACvB,AAACrB,CAAAA,CAAK,CAACO,EAAQ,CAACU,QAAQ,EACrBP,WAAWH,KAAac,CAAQ,GAChCb,OAAOC,IAAI,CAACT,CAAK,CAACO,EAAQ,CAACP,KAAK,EAC3B9D,GAAG,CAAC,AAAC0E,GAAQZ,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,EACtCuF,IAAI,CAAC,AAACC,GAASA,AAAiB,IAAjBA,EAAKrF,OAAO,CAAO,IAC3C/D,EAAOqB,WAAW,CAAG,CAAA,EACrBiC,EAAaH,IAEjBH,CAAK,CAACO,EAAQ,CAACP,KAAK,CAACY,EAAI,CAAC0C,IAAI,CAAC,CAC3BxE,EAAG,AAAC8E,EAAOnC,EAAkByD,EAC7BhG,EAAG,AAAC2E,EAAOpC,EAAkB0D,EAC7BY,MAAOhH,KAAKiH,IAAI,CAACvE,GAAkB,EACnCwE,OAAQlH,KAAKiH,IAAI,CAACvE,GAAkB,CACxC,EAER,CACJ,CAGZ,MAEIlF,EAAM,2EACoB,CAAA,EAElC,CACA6F,QAAS,CACL,GAAqB,CAAEnC,gBAAAA,CAAe,CAAE,CAAzB,IAAI,CAAgCF,EAAQ,IAAI,CAACA,KAAK,CAAEtC,EAAUsC,EAAMtC,OAAO,CAAEV,EAAUqB,SAAS,CAAC,EAAE,CAAE,CAAEf,SAAAA,CAAQ,CAAE,CAAGN,EASvI,GARIkD,IACAA,EAAgBU,OAAO,CAAC,AAAC+B,IACa,IAA9BlC,OAAOC,IAAI,CAACiC,GAAO1B,MAAM,EACzB0B,EAAMvB,OAAO,EAErB,GACA,IAAI,CAAClB,eAAe,CAAG,EAAE,EAEzBxC,GACA,CAACnB,EAAQmB,EAAQV,OAAO,CAACgB,UAAU,GACnCV,GACAA,EAASF,IAAI,CAAE,CACf,IAAMG,EAAqBvB,CAAsB,CAACsB,EAASF,IAAI,CAAC,CAChE,GAAIG,EAAoB,CACpB,IAAMC,EAAM,IAAID,EAAsB,CAAEvE,sBAAuByE,CAAsB,CAAE,CAAGD,EAC1FE,EAAQ2E,MAAM,CAAC,CACXrE,WAAY,CACRC,KAAMR,CACV,CACJ,EACJ,CACJ,CACA,KAAK,CAAC4E,OAAO5J,KAAK,CAvBH,IAAI,CAuBQ4F,UAC/B,CACJ,CASA,OARAD,EAAkBkI,cAAc,CAAG7J,EAAML,EAAUkK,cAAc,CAAErK,GACnEF,EAAewK,kBAAkB,CAAC,cAAenI,GAO1CA,CACX,GACAjG,EAAgBD,EAAU,qCAAsC,CAACA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,0CAA0C,CAAEA,CAAQ,CAAC,+CAA+C,CAAC,CAAE,SAAUF,CAAU,CAAEoG,CAAiB,CAAEoI,CAAqB,EAGxQC,AADUzO,EACRwO,qBAAqB,CAAGA,EAC1BpI,EAAkBI,OAAO,CAACiI,AAFhBzO,EAEkB0O,KAAK,CAErC,EACJ"}