{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Data grouping module\n *\n * (c) 2010-2021 Torstein HÃ¸nsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/datagrouping', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        var ApproximationRegistry = {\n        // approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var arrayMax = U.arrayMax, arrayMin = U.arrayMin, correctFloat = U.correctFloat, extend = U.extend, isNumber = U.isNumber;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            var len = arr.length;\n            var ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            var ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            var len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ApproximationDefaults = {\n            average: average,\n            averages: averages,\n            close: close,\n            high: high,\n            hlc: hlc,\n            low: low,\n            ohlc: ohlc,\n            open: open,\n            range: range,\n            sum: sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        var common = {\n            // enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // the first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            // smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        var seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts aftre refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        var units = [\n            [\n                'millisecond',\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingDefaults = {\n            common: common,\n            seriesSpecific: seriesSpecific,\n            units: units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent, extend = U.extend, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            var axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(AxisClass.prototype, {\n                    applyGrouping: applyGrouping,\n                    getGroupPixelWidth: getGroupPixelWidth,\n                    setDataGrouping: setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            var series = this.series;\n            var i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProccessed flag to avoid taking\n         * previous data grouping of neighbour series into accound when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            var axis = this;\n            var i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instanciated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentaly use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingAxisComposition = {\n            compose: compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var seriesProto = SeriesRegistry.series.prototype;\n        var addEvent = U.addEvent, defined = U.defined, error = U.error, extend = U.extend, isNumber = U.isNumber, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var baseGeneratePoints = seriesProto.generatePoints;\n        var composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            var options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            var i;\n            // DataGrouping x-coordinates.\n            if (dataGroupingOptions && series.xData && totalRange && series.groupMap) {\n                var groupedDataLength = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = pick(dataGroupingOptions.firstAnchor, anchor), lastAnchor = pick(dataGroupingOptions.lastAnchor, anchor);\n                // Anchor points that are not extremes.\n                if (anchor && anchor !== 'start') {\n                    var shiftInterval = (totalRange *\n                        { middle: 0.5, end: 1 }[anchor]);\n                    i = groupedXData.length - 1;\n                    while (i-- && i > 0) {\n                        groupedXData[i] += shiftInterval;\n                    }\n                }\n                // Change the first point position, but only when it is\n                // the first point in the data set not in the current zoom.\n                if (firstAnchor &&\n                    firstAnchor !== 'start' &&\n                    series.xData[0] >= groupedXData[0]) {\n                    var groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                    var firstGroupstEnd = void 0;\n                    if (isNumber(groupStart) && isNumber(groupLength)) {\n                        firstGroupstEnd = groupStart + (groupLength - 1);\n                    }\n                    groupedXData[0] = {\n                        middle: groupedXData[0] + 0.5 * totalRange,\n                        end: groupedXData[0] + totalRange,\n                        firstPoint: series.xData[0],\n                        lastPoint: firstGroupstEnd && series.xData[firstGroupstEnd]\n                    }[firstAnchor];\n                }\n                // Change the last point position but only when it is\n                // the last point in the data set not in the current zoom.\n                if (lastAnchor &&\n                    lastAnchor !== 'start' &&\n                    totalRange &&\n                    groupedXData[groupedDataLength] >= xMax - totalRange) {\n                    var lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                    groupedXData[groupedDataLength] = {\n                        middle: groupedXData[groupedDataLength] + 0.5 * totalRange,\n                        end: groupedXData[groupedDataLength] + totalRange,\n                        firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                        lastPoint: series.xData[series.xData.length - 1]\n                    }[lastAnchor];\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            var series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            var currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            var skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (!skip) {\n                series.destroyGroupedData();\n                var processedXData = dataGroupingOptions.groupAll ?\n                    series.xData :\n                    series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                    series.yData :\n                    series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n                var i = void 0, hasGroupedData = void 0;\n                // Execute grouping if the amount of points is greater than the limit\n                // defined in groupPixelWidth\n                if (groupPixelWidth &&\n                    processedXData &&\n                    processedXData.length &&\n                    plotSizeX) {\n                    hasGroupedData = true;\n                    // Force recreation of point instances in series.translate, #5699\n                    series.isDirty = true;\n                    series.points = null; // #6709\n                    var extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                        xAxis.ordinal &&\n                        xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                        groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                        DataGroupingDefaults.units), \n                    // Processed data may extend beyond axis (#4907)\n                    Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                        processedXData,\n                        processedYData,\n                        groupPositions,\n                        dataGroupingOptions.approximation\n                    ]);\n                    var groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                    // The smoothed option is deprecated, instead, there is a fallback\n                    // to the new anchoring mechanism. #12455.\n                    if (dataGroupingOptions &&\n                        dataGroupingOptions.smoothed &&\n                        groupedXData.length) {\n                        dataGroupingOptions.firstAnchor = 'firstPoint';\n                        dataGroupingOptions.anchor = 'middle';\n                        dataGroupingOptions.lastAnchor = 'lastPoint';\n                        error(32, false, chart, {\n                            'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                        });\n                    }\n                    // Record what data grouping values were used\n                    for (i = 1; i < groupPositions.length; i++) {\n                        // The grouped gapSize needs to be the largest distance between\n                        // the group to capture varying group sizes like months or DST\n                        // crossing (#10000). Also check that the gap is not at the\n                        // start of a segment.\n                        if (!groupPositions.info.segmentStarts ||\n                            groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                            gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                        }\n                    }\n                    currentDataGrouping = groupPositions.info;\n                    currentDataGrouping.gapSize = gapSize;\n                    series.closestPointRange = groupPositions.info.totalRange;\n                    series.groupMap = groupedData.groupMap;\n                    series.currentDataGrouping = currentDataGrouping;\n                    anchorPoints(series, groupedXData, xMax);\n                    if (reserveSpace) {\n                        adjustExtremes(xAxis, groupedXData);\n                    }\n                    // We calculated all group positions but we should render\n                    // only the ones within the visible range\n                    if (dataGroupingOptions.groupAll) {\n                        // Keep the reference to all grouped points\n                        // for further calculation (eg. heikinashi).\n                        series.allGroupedData = groupedYData;\n                        croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                        groupedXData = croppedData.xData;\n                        groupedYData = croppedData.yData;\n                        series.cropStart = croppedData.start; // #15005\n                    }\n                    // Set series props\n                    series.processedXData = groupedXData;\n                    series.processedYData = groupedYData;\n                }\n                else {\n                    series.groupMap = null;\n                }\n                series.hasGroupedData = hasGroupedData;\n                series.preventGraphAnimation =\n                    (lastDataGrouping && lastDataGrouping.totalRange) !==\n                        (currentDataGrouping && currentDataGrouping.totalRange);\n            }\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            var PointClass = SeriesClass.prototype.pointClass;\n            if (U.pushUnique(composedMembers, PointClass)) {\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n            }\n            if (U.pushUnique(composedMembers, SeriesClass)) {\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(SeriesClass.prototype, {\n                    applyGrouping: applyGrouping,\n                    destroyGroupedData: destroyGroupedData,\n                    generatePoints: generatePoints,\n                    getDGApproximation: getDGApproximation,\n                    groupData: groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            var series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // when grouping the fake extended axis for panning,\n            // we don't need to consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            var pointX, pointY, groupedY, pos = 0, start = 0;\n            var approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                var len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            var valuesLen = pointArrayMapLength || 1;\n            for (var i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // with next point\n                }\n                // when a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // reset the aggregate arrays\n                    start = i;\n                    for (var j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // break out\n                if (i === dataLength) {\n                    break;\n                }\n                // for each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    var index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    var val = void 0;\n                    for (var j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData: groupedXData,\n                groupedYData: groupedYData,\n                groupMap: groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            var options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            var defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                var rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingSeriesComposition = {\n            compose: compose,\n            groupData: groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var addEvent = U.addEvent, extend = U.extend, isNumber = U.isNumber;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                U.pushUnique(composedMembers, TooltipClass)) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            var chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            var xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // if we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // if not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                // now format the key\n                formattedKey = time.dateFormat(xDateFormat, labelConfig.key);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, labelConfig.key + currentDataGrouping.totalRange - 1);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingComposition = {\n            compose: compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  product:highstock\n         * @requires  module:modules/datagrouping\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        var G = Highcharts;\n        G.dataGrouping = {\n            approximationDefaults: ApproximationDefaults,\n            approximations: ApproximationRegistry\n        };\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","ApproximationRegistry","U","arrayMax","arrayMin","correctFloat","extend","isNumber","average","arr","len","length","ret","sum","hasNulls","ApproximationDefaults","averages","forEach","call","arguments","push","close","high","hlc","low","ohlc","open","range","common","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","seriesSpecific","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","units","DataGroupingDefaults","AxisConstructor","addEvent","merge","pick","composedMembers","applyGrouping","e","axis","series","getGroupPixelWidth","hasProcessed","hasExtremesChanged","dataLength","dgOptions","i","doGrouping","options","dataGrouping","Math","max","processedXData","data","chart","plotSizeX","forced","onAfterSetScale","setDataGrouping","redraw","update","seriesOptions","ordinal","slope","compose","AxisClass","pushUnique","prototype","DateTimeAxis","D","SeriesRegistry","seriesProto","defined","error","baseGeneratePoints","generatePoints","currentDataGrouping","croppedData","dataGroupingOptions","groupingEnabled","allowDG","enabled","isStock","reserveSpace","lastDataGrouping","revertRequireSorting","requireSorting","skip","skipDataGrouping","isCartesian","isDirty","xAxis","yAxis","destroyGroupedData","groupAll","xData","processedYData","yData","hasGroupedData","points","groupedXData","extremes","getExtremes","xMin","min","xMax","groupIntervalFactor","getGroupIntervalFactor","interval","groupPositions","getTimeTicks","Additions","normalizeTimeTickInterval","startOfWeek","closestPointRange","groupedData","groupData","approximation","groupedYData","gapSize","smoothed","firstAnchor","anchor","lastAnchor","info","segmentStarts","indexOf","totalRange","groupMap","anchorPoints","groupedDataLength","shiftInterval","middle","end","groupStart","start","groupLength","firstGroupstEnd","firstPoint","lastPoint","lastGroupStart","dataMin","dataMax","allGroupedData","cropData","cropStart","preventGraphAnimation","point","destroy","getDGApproximation","is","cumulative","pointX","pointY","groupedY","dataOptions","handleYData","values","pointArrayMap","pointArrayMapLength","extendedPointArrayMap","concat","pos","approximationFn","valuesLen","dataGroupInfo","pointClass","optionsToObject","key","j","index","applyOptions","val","onAfterSetOptions","type","plotOptions","baseOptions","useCommonDataGrouping","defaultOptions","rangeSelector","userOptions","isInternal","selected","buttonOptions","SeriesClass","PointClass","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","F","format","onTooltipHeaderFormatter","xDateFormatEnd","labelFormats","formattedKey","time","labelConfig","tooltipOptions","xDateFormat","formatString","isFooter","unitName","count","dateTime","getXDateFormat","x","dateFormat","styledMode","styledModeFormat","text","preventDefault","TooltipClass","DataGrouping","G","approximationDefaults","approximations","Axis","Series","Tooltip"],"mappings":"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"}