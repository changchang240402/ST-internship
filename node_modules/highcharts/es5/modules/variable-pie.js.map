{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * Variable Pie module for Highcharts\n *\n * (c) 2010-2021 Grzegorz Blachliński\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/variable-pie', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/VariablePie/VariablePieSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Variable Pie module for Highcharts\n         *\n         *  (c) 2010-2021 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A variable pie series is a two dimensional series type, where each point\n         * renders an Y and Z value.  Each point is drawn as a pie slice where the\n         * size (arc) of the slice relates to the Y value and the radius of pie\n         * slice relates to the Z value.\n         *\n         * @sample {highcharts} highcharts/demo/variable-radius-pie/\n         *         Variable-radius pie chart\n         *\n         * @extends      plotOptions.pie\n         * @excluding    dragDrop\n         * @since        6.0.0\n         * @product      highcharts\n         * @requires     modules/variable-pie.js\n         * @optionparent plotOptions.variablepie\n         */\n        var VariablePieSeriesDefaults = {\n            /**\n             * The minimum size of the points' radius related to chart's `plotArea`.\n             * If a number is set, it applies in pixels.\n             *\n             * @sample {highcharts} highcharts/variable-radius-pie/min-max-point-size/\n             *         Example of minPointSize and maxPointSize\n             * @sample {highcharts} highcharts/variable-radius-pie/min-point-size-100/\n             *         minPointSize set to 100\n             *\n             * @type  {number|string}\n             * @since 6.0.0\n             */\n            minPointSize: '10%',\n            /**\n             * The maximum size of the points' radius related to chart's `plotArea`.\n             * If a number is set, it applies in pixels.\n             *\n             * @sample {highcharts} highcharts/variable-radius-pie/min-max-point-size/\n             *         Example of minPointSize and maxPointSize\n             *\n             * @type  {number|string}\n             * @since 6.0.0\n             */\n            maxPointSize: '100%',\n            /**\n             * The minimum possible z value for the point's radius calculation. If\n             * the point's Z value is smaller than zMin, the slice will be drawn\n             * according to the zMin value.\n             *\n             * @sample {highcharts} highcharts/variable-radius-pie/zmin-5/\n             *         zMin set to 5, smaller z values are treated as 5\n             * @sample {highcharts} highcharts/variable-radius-pie/zmin-zmax/\n             *         Series limited by both zMin and zMax\n             *\n             * @type  {number}\n             * @since 6.0.0\n             */\n            zMin: void 0,\n            /**\n             * The maximum possible z value for the point's radius calculation. If\n             * the point's Z value is bigger than zMax, the slice will be drawn\n             * according to the zMax value\n             *\n             * @sample {highcharts} highcharts/variable-radius-pie/zmin-zmax/\n             *         Series limited by both zMin and zMax\n             *\n             * @type  {number}\n             * @since 6.0.0\n             */\n            zMax: void 0,\n            /**\n             * Whether the pie slice's value should be represented by the area or\n             * the radius of the slice. Can be either `area` or `radius`. The\n             * default, `area`, corresponds best to the human perception of the size\n             * of each pie slice.\n             *\n             * @sample {highcharts} highcharts/variable-radius-pie/sizeby/\n             *         Difference between area and radius sizeBy\n             *\n             * @type  {Highcharts.VariablePieSizeByValue}\n             * @since 6.0.0\n             */\n            sizeBy: 'area',\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}<br/>Value: {point.y}<br/>Size: {point.z}<br/>'\n            }\n        };\n        /**\n         * A `variablepie` series. If the [type](#series.variablepie.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.variablepie\n         * @excluding dataParser, dataURL, stack, xAxis, yAxis, dataSorting,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  modules/variable-pie.js\n         * @apioption series.variablepie\n         */\n        /**\n         * An array of data points for the series. For the `variablepie` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 2 values. In this case, the numerical values will\n         *    be interpreted as `y, z` options. Example:\n         *    ```js\n         *    data: [\n         *        [40, 75],\n         *        [50, 50],\n         *        [60, 40]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.variablepie.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 1,\n         *        z: 4,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 7,\n         *        z: 10,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|*>}\n         * @extends   series.pie.data\n         * @excluding marker, x\n         * @product   highcharts\n         * @apioption series.variablepie.data\n         */\n        ''; // keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VariablePieSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/VariablePie/VariablePieSeries.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/VariablePie/VariablePieSeriesDefaults.js']], function (SeriesRegistry, U, VariablePieSeriesDefaults) {\n        /* *\n         *\n         *  Variable Pie module for Highcharts\n         *\n         *  (c) 2010-2021 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var PieSeries = SeriesRegistry.seriesTypes.pie;\n        var arrayMax = U.arrayMax, arrayMin = U.arrayMin, clamp = U.clamp, extend = U.extend, fireEvent = U.fireEvent, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The variablepie series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.variablepie\n         *\n         * @augments Highcharts.Series\n         */\n        var VariablePieSeries = /** @class */ (function (_super) {\n            __extends(VariablePieSeries, _super);\n            function VariablePieSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.radii = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Before standard translate method for pie chart it is needed to calculate\n             * min/max radius of each pie slice based on its Z value.\n             * @private\n             */\n            VariablePieSeries.prototype.calculateExtremes = function () {\n                var series = this, chart = series.chart, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, seriesOptions = series.options, slicingRoom = 2 * (seriesOptions.slicedOffset || 0), zData = series.zData, smallestSize = Math.min(plotWidth, plotHeight) - slicingRoom, \n                // Min and max size of pie slice:\n                extremes = {}, \n                // In pie charts size of a pie is changed to make space for\n                // dataLabels, then series.center is changing.\n                positions = series.center || series.getCenter();\n                var zMin, zMax;\n                for (var _i = 0, _a = ['minPointSize', 'maxPointSize']; _i < _a.length; _i++) {\n                    var prop = _a[_i];\n                    var length_1 = seriesOptions[prop];\n                    var isPercent = /%$/.test(length_1);\n                    length_1 = parseInt(length_1, 10);\n                    extremes[prop] = isPercent ?\n                        smallestSize * length_1 / 100 :\n                        length_1 * 2; // Because it should be radius, not diameter.\n                }\n                series.minPxSize = positions[3] + extremes.minPointSize;\n                series.maxPxSize = clamp(positions[2], positions[3] + extremes.minPointSize, extremes.maxPointSize);\n                if (zData.length) {\n                    zMin = pick(seriesOptions.zMin, arrayMin(zData.filter(series.zValEval)));\n                    zMax = pick(seriesOptions.zMax, arrayMax(zData.filter(series.zValEval)));\n                    this.getRadii(zMin, zMax, series.minPxSize, series.maxPxSize);\n                }\n            };\n            /**\n             * Finding radius of series points based on their Z value and min/max Z\n             * value for all series.\n             *\n             * @private\n             * @function Highcharts.Series#getRadii\n             *\n             * @param {number} zMin\n             * Min threshold for Z value. If point's Z value is smaller that zMin, point\n             * will have the smallest possible radius.\n             *\n             * @param {number} zMax\n             * Max threshold for Z value. If point's Z value is bigger that zMax, point\n             * will have the biggest possible radius.\n             *\n             * @param {number} minSize\n             * Minimal pixel size possible for radius.\n             *\n             * @param {numbner} maxSize\n             * Minimal pixel size possible for radius.\n             */\n            VariablePieSeries.prototype.getRadii = function (zMin, zMax, minSize, maxSize) {\n                var zData = this.zData, radii = [], options = this.options, sizeByArea = options.sizeBy !== 'radius', zRange = zMax - zMin;\n                var pos, value, radius;\n                // Calculate radius for all pie slice's based on their Z values\n                for (var i = 0; i < zData.length; i++) {\n                    // if zData[i] is null/undefined/string we need to take zMin for\n                    // smallest radius.\n                    value = this.zValEval(zData[i]) ? zData[i] : zMin;\n                    if (value <= zMin) {\n                        radius = minSize / 2;\n                    }\n                    else if (value >= zMax) {\n                        radius = maxSize / 2;\n                    }\n                    else {\n                        // Relative size, a number between 0 and 1\n                        pos = zRange > 0 ? (value - zMin) / zRange : 0.5;\n                        if (sizeByArea) {\n                            pos = Math.sqrt(pos);\n                        }\n                        radius = Math.ceil(minSize + pos * (maxSize - minSize)) / 2;\n                    }\n                    radii.push(radius);\n                }\n                this.radii = radii;\n            };\n            /**\n             * It is needed to null series.center on chart redraw. Probably good idea\n             * will be to add this option in directly in pie series.\n             * @private\n             */\n            VariablePieSeries.prototype.redraw = function () {\n                this.center = null;\n                _super.prototype.redraw.call(this);\n            };\n            /** @private */\n            VariablePieSeries.prototype.getDataLabelPosition = function (point, distance) {\n                var _a = this, center = _a.center, options = _a.options, angle = point.angle || 0, r = this.radii[point.index], x = center[0] + Math.cos(angle) * r, y = center[1] + Math.sin(angle) * r, connectorOffset = (options.slicedOffset || 0) +\n                    (options.borderWidth || 0), \n                // Set the anchor point for data labels. Use point.labelDistance\n                // instead of labelDistance // #1174\n                // finalConnectorOffset - not override connectorOffset value.\n                finalConnectorOffset = Math.min(connectorOffset, distance / 5); // #1678\n                return {\n                    distance: distance,\n                    natural: {\n                        // Initial position of the data label - it's utilized for\n                        // finding the final position for the label\n                        x: x + Math.cos(angle) * distance,\n                        y: y + Math.sin(angle) * distance\n                    },\n                    computed: {\n                    // Used for generating connector path - initialized later in\n                    // drawDataLabels function x: undefined, y: undefined\n                    },\n                    // Left - pie on the left side of the data label\n                    // Right - pie on the right side of the data label\n                    alignment: point.half ? 'right' : 'left',\n                    connectorPosition: {\n                        breakAt: {\n                            x: x + Math.cos(angle) * finalConnectorOffset,\n                            y: y + Math.sin(angle) * finalConnectorOffset\n                        },\n                        touchingSliceAt: {\n                            x: x,\n                            y: y\n                        }\n                    }\n                };\n            };\n            /**\n             * Extend translate by updating radius for each pie slice instead of using\n             * one global radius.\n             * @private\n             */\n            VariablePieSeries.prototype.translate = function (positions) {\n                this.generatePoints();\n                var series = this, precision = 1000, // issue #172\n                options = series.options, slicedOffset = options.slicedOffset, startAngle = options.startAngle || 0, startAngleRad = Math.PI / 180 * (startAngle - 90), endAngleRad = Math.PI / 180 * (pick(options.endAngle, startAngle + 360) - 90), circ = endAngleRad - startAngleRad, // 2 * Math.PI,\n                points = series.points, ignoreHiddenPoint = options.ignoreHiddenPoint;\n                var cumulative = 0, start, end, angle, \n                // the x component of the radius vector for a given point\n                radiusX, radiusY, point, pointRadii;\n                series.startAngleRad = startAngleRad;\n                series.endAngleRad = endAngleRad;\n                // Use calculateExtremes to get series.radii array.\n                series.calculateExtremes();\n                // Get positions - either an integer or a percentage string must be\n                // given. If positions are passed as a parameter, we're in a\n                // recursive loop for adjusting space for data labels.\n                if (!positions) {\n                    series.center = positions = series.getCenter();\n                }\n                // Calculate the geometry for each point\n                for (var i = 0; i < points.length; i++) {\n                    point = points[i];\n                    pointRadii = series.radii[i];\n                    // Set start and end angle\n                    start = startAngleRad + (cumulative * circ);\n                    if (!ignoreHiddenPoint || point.visible) {\n                        cumulative += point.percentage / 100;\n                    }\n                    end = startAngleRad + (cumulative * circ);\n                    // Set the shape\n                    point.shapeType = 'arc';\n                    point.shapeArgs = {\n                        x: positions[0],\n                        y: positions[1],\n                        r: pointRadii,\n                        innerR: positions[3] / 2,\n                        start: Math.round(start * precision) / precision,\n                        end: Math.round(end * precision) / precision\n                    };\n                    // The angle must stay within -90 and 270 (#2645)\n                    angle = (end + start) / 2;\n                    if (angle > 1.5 * Math.PI) {\n                        angle -= 2 * Math.PI;\n                    }\n                    else if (angle < -Math.PI / 2) {\n                        angle += 2 * Math.PI;\n                    }\n                    // Center for the sliced out slice\n                    point.slicedTranslation = {\n                        translateX: Math.round(Math.cos(angle) * slicedOffset),\n                        translateY: Math.round(Math.sin(angle) * slicedOffset)\n                    };\n                    // Set the anchor point for tooltips\n                    radiusX = Math.cos(angle) * positions[2] / 2;\n                    radiusY = Math.sin(angle) * positions[2] / 2;\n                    point.tooltipPos = [\n                        positions[0] + radiusX * 0.7,\n                        positions[1] + radiusY * 0.7\n                    ];\n                    point.half = angle < -Math.PI / 2 || angle > Math.PI / 2 ?\n                        1 :\n                        0;\n                    point.angle = angle;\n                }\n                fireEvent(series, 'afterTranslate');\n            };\n            /**\n             * For arrayMin and arrayMax calculations array shouldn't have\n             * null/undefined/string values. In this case it is needed to check if\n             * points Z value is a Number.\n             * @private\n             */\n            VariablePieSeries.prototype.zValEval = function (zVal) {\n                if (typeof zVal === 'number' && !isNaN(zVal)) {\n                    return true;\n                }\n                return null;\n            };\n            VariablePieSeries.defaultOptions = merge(PieSeries.defaultOptions, VariablePieSeriesDefaults);\n            return VariablePieSeries;\n        }(PieSeries));\n        extend(VariablePieSeries.prototype, {\n            pointArrayMap: ['y', 'z'],\n            parallelArrays: ['x', 'y', 'z']\n        });\n        SeriesRegistry.registerSeriesType('variablepie', VariablePieSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"area\"|\"radius\"} Highcharts.VariablePieSizeByValue\n         */\n        ''; // adds doclets above to transpiled file\n\n        return VariablePieSeries;\n    });\n    _registerModule(_modules, 'masters/modules/variable-pie.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","minPointSize","maxPointSize","zMin","zMax","sizeBy","tooltip","pointFormat","SeriesRegistry","U","VariablePieSeriesDefaults","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","PieSeries","seriesTypes","pie","arrayMax","arrayMin","clamp","extend","fireEvent","merge","pick","VariablePieSeries","_super","_this","arguments","data","options","points","radii","calculateExtremes","chart","series","plotWidth","plotHeight","seriesOptions","slicingRoom","slicedOffset","zData","smallestSize","Math","min","extremes","positions","center","getCenter","_i","_a","length","prop","length_1","isPercent","test","parseInt","minPxSize","maxPxSize","filter","zValEval","getRadii","minSize","maxSize","pos","value","radius","sizeByArea","zRange","i","sqrt","ceil","push","redraw","getDataLabelPosition","point","distance","angle","r","index","x","cos","y","sin","finalConnectorOffset","borderWidth","natural","computed","alignment","half","connectorPosition","breakAt","touchingSliceAt","translate","generatePoints","start","end","radiusX","radiusY","pointRadii","startAngle","startAngleRad","PI","endAngleRad","endAngle","circ","ignoreHiddenPoint","cumulative","visible","percentage","shapeType","shapeArgs","innerR","round","slicedTranslation","translateX","translateY","tooltipPos","zVal","isNaN","defaultOptions","pointArrayMap","parallelArrays","registerSeriesType"],"mappings":"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"}