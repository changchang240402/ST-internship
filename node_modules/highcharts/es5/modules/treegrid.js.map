{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.2.0 (2023-10-30)\n *\n * Tree Grid\n *\n * (c) 2016-2021 Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/treegrid', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent, find = U.find, fireEvent = U.fireEvent, isArray = U.isArray, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                }\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    var seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                var _a;\n                var axis = this;\n                if ((_a = axis.brokenAxis) === null || _a === void 0 ? void 0 : _a.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                var axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis === null || brokenAxis === void 0 ? void 0 : brokenAxis.hasBreaks) {\n                    var tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (var i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                var axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                var _a, _b;\n                var _c = this, isDirty = _c.isDirty, connectNulls = _c.options.connectNulls, points = _c.points, xAxis = _c.xAxis, yAxis = _c.yAxis;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    var i = points.length;\n                    while (i--) {\n                        var point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        var nullGap = point.y === null && connectNulls === false;\n                        var isPointInBreak = (!nullGap && (((_a = xAxis === null || xAxis === void 0 ? void 0 : xAxis.brokenAxis) === null || _a === void 0 ? void 0 : _a.isInAnyBreak(point.x, true)) ||\n                            ((_b = yAxis === null || yAxis === void 0 ? void 0 : yAxis.brokenAxis) === null || _b === void 0 ? void 0 : _b.isInAnyBreak(point.y, true))));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                var _a;\n                var series = this, points = series.points;\n                var breaks, threshold, y;\n                if ((_a = axis === null || axis === void 0 ? void 0 : axis.brokenAxis) === null || _a === void 0 ? void 0 : _a.hasBreaks) {\n                    var brokenAxis_1 = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        var _a, _b;\n                        breaks = (brokenAxis_1 === null || brokenAxis_1 === void 0 ? void 0 : brokenAxis_1.breakArray) || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        var breaksOutOfRange = (_b = (_a = axis === null || axis === void 0 ? void 0 : axis.options) === null || _a === void 0 ? void 0 : _a.breaks) === null || _b === void 0 ? void 0 : _b.filter(function (brk) {\n                            var isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (var i = 0; i < breaks.length; i++) {\n                                var otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    var eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point: point, brk: brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange === null || breaksOutOfRange === void 0 ? void 0 : breaksOutOfRange.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point: point, brk: brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                var currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping === null || currentDataGrouping === void 0 ? void 0 : currentDataGrouping.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                var gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // extension for ordinal breaks\n                    var current = void 0, next = void 0;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            var xRange = (current.x + next.x) / 2;\n                            points.splice(// insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            var Additions = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Additions(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                Additions.isInBreak = function (brk, val) {\n                    var repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    var ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                };\n                /**\n                 * @private\n                 */\n                Additions.lin2Val = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                };\n                /**\n                 * @private\n                 */\n                Additions.val2Lin = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                };\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                Additions.prototype.findBreakAt = function (x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.isInAnyBreak = function (val, testKeep) {\n                    var brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    var i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                };\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than usin Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                Additions.prototype.setBreaks = function (breaks, redraw) {\n                    var brokenAxis = this;\n                    var axis = brokenAxis.axis;\n                    var hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_1 = (this.options.breaks || []);\n                                var axisBreak = void 0;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks_1))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks_1))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_2 = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT_1 = [], breakArray_1 = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                var length_1 = 0, inBrk_1, repeat_1, min_1 = axis.userMin || axis.min, max_1 = axis.userMax || axis.max, start_1, i_1;\n                                // Min & max check (#4247)\n                                breaks_2.forEach(function (brk) {\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        if (Additions.isInBreak(brk, min_1)) {\n                                            min_1 += ((brk.to % repeat_1) -\n                                                (min_1 % repeat_1));\n                                        }\n                                        if (Additions.isInBreak(brk, max_1)) {\n                                            max_1 -= ((max_1 % repeat_1) -\n                                                (brk.from % repeat_1));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks_2.forEach(function (brk) {\n                                    start_1 = brk.from;\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        while (start_1 - repeat_1 > min_1) {\n                                            start_1 -= repeat_1;\n                                        }\n                                        while (start_1 < min_1) {\n                                            start_1 += repeat_1;\n                                        }\n                                        for (i_1 = start_1; i_1 < max_1; i_1 += repeat_1) {\n                                            breakArrayT_1.push({\n                                                value: i_1,\n                                                move: 'in'\n                                            });\n                                            breakArrayT_1.push({\n                                                value: i_1 + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT_1.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk_1 = 0;\n                                start_1 = min_1;\n                                breakArrayT_1.forEach(function (brk) {\n                                    inBrk_1 += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk_1 === 1 && brk.move === 'in') {\n                                        start_1 = brk.value;\n                                    }\n                                    if (inBrk_1 === 0 && isNumber(start_1)) {\n                                        breakArray_1.push({\n                                            from: start_1,\n                                            to: brk.value,\n                                            len: brk.value - start_1 - (brk.size || 0)\n                                        });\n                                        length_1 += (brk.value -\n                                            start_1 -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray_1;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are substracted.\n                                if (isNumber(min_1) &&\n                                    isNumber(max_1) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max_1 - min_1 - length_1 +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max_1 - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min_1;\n                                    axis.max = max_1;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                };\n                return Additions;\n            }());\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var dateFormats = H.dateFormats;\n        var addEvent = U.addEvent, defined = U.defined, erase = U.erase, find = U.find, isArray = U.isArray, isNumber = U.isNumber, merge = U.merge, pick = U.pick, timeUnits = U.timeUnits, wrap = U.wrap;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            var options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (U.pushUnique(composedMembers, AxisClass)) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetOffset', onAfterGetOffset);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n            }\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n            }\n            if (U.pushUnique(composedMembers, TickClass)) {\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            var dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                var tick = ticks[pos];\n                var labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.options.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                var treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function onAfterGetOffset() {\n            var grid = this.grid;\n            (grid && grid.columns || []).forEach(function (column) {\n                column.getOffset();\n            });\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            var axis = this;\n            var options = axis.options;\n            var gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // compute anchor points for each of the title align options\n                var axisTitle = axis.axisTitle, axisHeight = axis.height, horiz = axis.horiz, axisLeft = axis.left, offset = axis.offset, opposite = axis.opposite, options_1 = axis.options, axisTop = axis.top, axisWidth = axis.width;\n                var tickSize = axis.tickSize();\n                var titleWidth = axisTitle && axisTitle.getBBox().width;\n                var xOption = options_1.title.x;\n                var yOption = options_1.title.y;\n                var titleMargin = pick(options_1.title.margin, horiz ? 5 : 10);\n                var titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                var crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                var offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // so does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            var axis = this;\n            var chart = axis.chart, _a = axis.options.grid, gridOptions = _a === void 0 ? {} : _a, userOptions = axis.userOptions;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                var columns = axis.grid.columns = [];\n                var columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    var columnOptions = merge(userOptions, gridOptions.columns[gridOptions.columns.length - columnIndex - 1], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Force to behave like category axis\n                        type: 'category',\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    });\n                    delete columnOptions.grid.columns; // Prevent recursion\n                    var column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            var axis = this, grid = axis.grid, options = axis.options, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                var min = axis.min || 0, max = axis.max || 0;\n                // @todo acutual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    var lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        var linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = (tickLength - 1) * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            var upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach(function (column) { return column.render(); });\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar))) {\n                    var tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n                    var label = void 0, tickMark = void 0;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show firts tick label.\n                    label = axis.ticks[firstTick].label;\n                    if (label) {\n                        if (min - firstTick > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    var mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            var axis = this;\n            var tickInfo = axis.tickPositions && axis.tickPositions.info;\n            var options = axis.options;\n            var gridOptions = options.grid || {};\n            var userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach(function (series) {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.options.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            var options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            var gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes presedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouln't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond',\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            var parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                var units = (gridAxisOptions.units || []);\n                                var unitIdx = void 0, count = 1, unitName = 'year';\n                                for (var i = 0; i < units.length; i++) {\n                                    var unit_1 = units[i];\n                                    if (unit_1 && unit_1[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                var unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    var counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // unitName is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                var unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange: unitRange, count: count, unitName: unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            var axis = this;\n            var userOptions = e.userOptions;\n            var gridOptions = userOptions && userOptions.grid || {};\n            var columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column\n            // options set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[columns.length - 1]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            var axis = this;\n            (axis.grid.columns || []).forEach(function (column) { return column.setScale(); });\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            var _a = this, horiz = _a.horiz, maxLabelDimensions = _a.maxLabelDimensions, _b = _a.options.grid, gridOptions = _b === void 0 ? {} : _b;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                var labelPadding = this.options.labels.distance * 2;\n                var distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach(function (axis) {\n                (axis.grid && axis.grid.columns || []).forEach(function (column) {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            var grid = this.grid;\n            (grid.columns || []).forEach(function (column) { return column.destroy(e.keepEvents); });\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            var axis = this;\n            var userOptions = e.userOptions || {};\n            var gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            var tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // verticalAlign is currently not supported for axis.labels.\n            verticalAlign = 'middle', // labelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                var bottom = void 0, top_1, left = void 0, right = void 0;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top_1 = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top_1 = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top_1 + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top_1 = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top_1 :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top_1 + ((bottom - top_1) / 2) // default to middle\n                );\n                if (label) {\n                    var lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        var lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            var axis = ctx.axis, value = ctx.value;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                var tickPos = axis.tickPositions;\n                var series = (axis.linkedParent || axis).series[0];\n                var isFirst = value === tickPos[0];\n                var isLast = value === tickPos[tickPos.length - 1];\n                var point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                var pointCopy = void 0;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            var axis = this;\n            var options = axis.options;\n            var gridOptions = options.grid || {};\n            var categoryAxis = axis.categories;\n            var tickPositions = axis.tickPositions;\n            var firstPos = tickPositions[0];\n            var lastPos = tickPositions[tickPositions.length - 1];\n            var linkedMin = axis.linkedParent && axis.linkedParent.min;\n            var linkedMax = axis.linkedParent && axis.linkedParent.max;\n            var min = linkedMin || axis.min;\n            var max = linkedMax || axis.max;\n            var tickInterval = axis.tickInterval;\n            var endMoreThanMin = (firstPos < min &&\n                firstPos + tickInterval > min);\n            var startLessThanMax = (lastPos > max &&\n                lastPos - tickInterval < max);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.horiz || axis.isLinked)) {\n                if (endMoreThanMin && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if (startLessThanMax && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            var axis = this;\n            var _a = axis.options.grid, gridOptions = _a === void 0 ? {} : _a;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        var GridAxisAdditions = /** @class */ (function () {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            function GridAxisAdditions(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            GridAxisAdditions.prototype.isOuterAxis = function () {\n                var axis = this.axis;\n                var chart = axis.chart;\n                var columnIndex = axis.grid.columnIndex;\n                var columns = (axis.linkedParent && axis.linkedParent.grid.columns ||\n                    axis.grid.columns);\n                var parentAxis = columnIndex ? axis.linkedParent : axis;\n                var thisIndex = -1, lastIndex = 0;\n                (chart[axis.coll] || []).forEach(function (otherAxis, index) {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            };\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            GridAxisAdditions.prototype.renderBorder = function (path) {\n                var axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisBorder);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            };\n            return GridAxisAdditions;\n        }());\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            var time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            var firstDay = (this.get('Day', d) + 6) % 7;\n            var thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            var firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var GridAxis = {\n            compose: compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'Gantt/Tree.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var extend = U.extend, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an object map from parent id to childrens index.\n         *\n         * @private\n         * @function Highcharts.Tree#getListOfParents\n         *\n         * @param {Array<*>} data\n         *        List of points set in options. `Array.parent` is parent id of point.\n         *\n         * @param {Array<string>} ids\n         *        List of all point ids.\n         *\n         * @return {Highcharts.Dictionary<Array<*>>}\n         * Map from parent id to children index in data\n         */\n        function getListOfParents(data) {\n            var listOfParents = data.reduce(function (prev, curr) {\n                var parent = pick(curr.parent, '');\n                if (typeof prev[parent] === 'undefined') {\n                    prev[parent] = [];\n                }\n                prev[parent].push(curr);\n                return prev;\n            }, {});\n            // parents = Object.keys(listOfParents);\n            // If parent does not exist, hoist parent to root of tree.\n            // parents.forEach((parent, list): void => {\n            //     const children = listOfParents[parent];\n            //     if ((parent !== '') && (ids.indexOf(parent) === -1)) {\n            //         for (const child of children) {\n            //             (list as any)[''].push(child);\n            //         }\n            //         delete (list as any)[parent];\n            //     }\n            // });\n            return listOfParents;\n        }\n        /** @private */\n        function getNode(id, parent, level, data, mapOfIdToChildren, options) {\n            var after = options && options.after, before = options && options.before, node = {\n                data: data,\n                depth: level - 1,\n                id: id,\n                level: level,\n                parent: (parent || '')\n            };\n            var descendants = 0, height = 0, start, end;\n            // Allow custom logic before the children has been created.\n            if (typeof before === 'function') {\n                before(node, options);\n            }\n            // Call getNode recursively on the children. Calulate the height of the\n            // node, and the number of descendants.\n            var children = ((mapOfIdToChildren[id] || [])).map(function (child) {\n                var node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n                    childStart :\n                    child.end ||\n                        NaN);\n                // Start should be the lowest child.start.\n                start = ((!isNumber(start) || childStart < start) ?\n                    childStart :\n                    start);\n                // End should be the largest child.end.\n                // If child is milestone, then use start as end.\n                end = ((!isNumber(end) || childEnd > end) ?\n                    childEnd :\n                    end);\n                descendants = descendants + 1 + node.descendants;\n                height = Math.max(node.height + 1, height);\n                return node;\n            });\n            // Calculate start and end for point if it is not already explicitly set.\n            if (data) {\n                data.start = pick(data.start, start);\n                data.end = pick(data.end, end);\n            }\n            extend(node, {\n                children: children,\n                descendants: descendants,\n                height: height\n            });\n            // Allow custom logic after the children has been created.\n            if (typeof after === 'function') {\n                after(node, options);\n            }\n            return node;\n        }\n        /** @private */\n        function getTree(data, options) {\n            var mapOfIdToChildren = getListOfParents(data);\n            return getNode('', null, 1, null, mapOfIdToChildren, options);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var Tree = {\n            getNode: getNode,\n            getTree: getTree\n        };\n\n        return Tree;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridTick.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent, isObject = U.isObject, isNumber = U.isNumber, pick = U.pick, wrap = U.wrap;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onTickInit() {\n            var tick = this;\n            if (!tick.treeGrid) {\n                tick.treeGrid = new TreeGridTickAdditions(tick);\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHover(label) {\n            label.addClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({\n                    textDecoration: 'underline'\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHoverExit(label, options) {\n            var css = isObject(options.style) ? options.style : {};\n            label.removeClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({ textDecoration: css.textDecoration });\n            }\n        }\n        /**\n         * @private\n         */\n        function renderLabelIcon(tick, params) {\n            var treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, iconCenter = {\n                x: labelBox.x - (width / 2) - (options.padding || 0),\n                y: labelBox.y - (height / 2)\n            }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && isNumber(iconCenter.y);\n            var icon = treeGrid.labelIcon;\n            if (!icon) {\n                treeGrid.labelIcon = icon = renderer\n                    .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n                    .addClass('highcharts-label-icon')\n                    .add(params.group);\n            }\n            // Set the new position, and show or hide\n            icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n            // Presentational attributes\n            if (!renderer.styledMode) {\n                icon\n                    .attr({\n                    cursor: 'pointer',\n                    'fill': pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n                    'stroke-width': 1,\n                    stroke: options.lineColor,\n                    strokeWidth: options.lineWidth || 0\n                });\n            }\n            // Update the icon positions\n            icon[isNew ? 'attr' : 'animate']({\n                translateX: iconCenter.x,\n                translateY: iconCenter.y,\n                rotation: rotation\n            });\n        }\n        /**\n         * @private\n         */\n        function wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n            var tick = this, lbOptions = pick(tick.options && tick.options.labels, labelOptions), pos = tick.pos, axis = tick.axis, options = axis.options, isTreeGrid = options.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n            var symbolOptions, indentation, mapOfPosToGridNode, node, level;\n            if (isTreeGrid) {\n                symbolOptions = (lbOptions && isObject(lbOptions.symbol, true) ?\n                    lbOptions.symbol :\n                    {});\n                indentation = (lbOptions && isNumber(lbOptions.indentation) ?\n                    lbOptions.indentation :\n                    0);\n                mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n                node = mapOfPosToGridNode && mapOfPosToGridNode[pos];\n                level = (node && node.depth) || 1;\n                result.x += (\n                // Add space for symbols\n                ((symbolOptions.width || 0) +\n                    ((symbolOptions.padding || 0) * 2)) +\n                    // Apply indentation\n                    ((level - 1) * indentation));\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function wrapRenderLabel(proceed) {\n            var tick = this, pos = tick.pos, axis = tick.axis, label = tick.label, mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode, options = axis.options, labelOptions = pick(tick.options && tick.options.labels, options && options.labels), symbolOptions = (labelOptions && isObject(labelOptions.symbol, true) ?\n                labelOptions.symbol :\n                {}), node = mapOfPosToGridNode && mapOfPosToGridNode[pos], level = node && node.depth, isTreeGrid = options.type === 'treegrid', shouldRender = axis.tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', styledMode = axis.chart.styledMode;\n            var collapsed, addClassName, removeClassName;\n            if (isTreeGrid && node) {\n                // Add class name for hierarchical styling.\n                if (label &&\n                    label.element) {\n                    label.addClass(prefixClassName + 'level-' + level);\n                }\n            }\n            proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n            if (isTreeGrid &&\n                label &&\n                label.element &&\n                node &&\n                node.descendants &&\n                node.descendants > 0) {\n                collapsed = axis.treeGrid.isCollapsed(node);\n                renderLabelIcon(tick, {\n                    color: (!styledMode &&\n                        label.styles &&\n                        label.styles.color ||\n                        ''),\n                    collapsed: collapsed,\n                    group: label.parentGroup,\n                    options: symbolOptions,\n                    renderer: label.renderer,\n                    show: shouldRender,\n                    xy: label.xy\n                });\n                // Add class name for the node.\n                addClassName = prefixClassName +\n                    (collapsed ? 'collapsed' : 'expanded');\n                removeClassName = prefixClassName +\n                    (collapsed ? 'expanded' : 'collapsed');\n                label\n                    .addClass(addClassName)\n                    .removeClass(removeClassName);\n                if (!styledMode) {\n                    label.css({\n                        cursor: 'pointer'\n                    });\n                }\n                // Add events to both label text and icon\n                [label, tick.treeGrid.labelIcon].forEach(function (object) {\n                    if (object && !object.attachedTreeGridEvents) {\n                        // On hover\n                        addEvent(object.element, 'mouseover', function () {\n                            onTickHover(label);\n                        });\n                        // On hover out\n                        addEvent(object.element, 'mouseout', function () {\n                            onTickHoverExit(label, labelOptions);\n                        });\n                        addEvent(object.element, 'click', function () {\n                            tick.treeGrid.toggleCollapse();\n                        });\n                        object.attachedTreeGridEvents = true;\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreeGridTickAdditions = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            function TreeGridTickAdditions(tick) {\n                this.tick = tick;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            TreeGridTickAdditions.compose = function (TickClass) {\n                if (U.pushUnique(composedMembers, TickClass)) {\n                    addEvent(TickClass, 'init', onTickInit);\n                    wrap(TickClass.prototype, 'getLabelPosition', wrapGetLabelPosition);\n                    wrap(TickClass.prototype, 'renderLabel', wrapRenderLabel);\n                    // backwards compatibility\n                    TickClass.prototype.collapse = function (redraw) {\n                        this.treeGrid.collapse(redraw);\n                    };\n                    TickClass.prototype.expand = function (redraw) {\n                        this.treeGrid.expand(redraw);\n                    };\n                    TickClass.prototype.toggleCollapse = function (redraw) {\n                        this.treeGrid.toggleCollapse(redraw);\n                    };\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Collapse the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#collapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            TreeGridTickAdditions.prototype.collapse = function (redraw) {\n                var tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    var pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            };\n            /**\n             * Destroy remaining labelIcon if exist.\n             *\n             * @private\n             * @function Highcharts.Tick#destroy\n             */\n            TreeGridTickAdditions.prototype.destroy = function () {\n                if (this.labelIcon) {\n                    this.labelIcon.destroy();\n                }\n            };\n            /**\n             * Expand the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#expand\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            TreeGridTickAdditions.prototype.expand = function (redraw) {\n                var tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    var pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.expand(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            };\n            /**\n             * Toggle the collapse/expand state of the grid cell. Used when axis is\n             * of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#toggleCollapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            TreeGridTickAdditions.prototype.toggleCollapse = function (redraw) {\n                var tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    var pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            };\n            return TreeGridTickAdditions;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridTickAdditions;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            var index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            var getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            var variateColor = function (color) {\n                var colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            var result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce(function (obj, item) {\n                        var level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            var before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            var childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach(function (child, i) {\n                var newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            var value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            var rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var TreeUtilities = {\n            getColor: getColor,\n            getLevelOptions: getLevelOptions,\n            setTreeValues: setTreeValues,\n            updateRootId: updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridAxis.js', [_modules['Core/Axis/BrokenAxis.js'], _modules['Core/Axis/GridAxis.js'], _modules['Gantt/Tree.js'], _modules['Core/Axis/TreeGrid/TreeGridTick.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (BrokenAxis, GridAxis, Tree, TreeGridTick, TU, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var getLevelOptions = TU.getLevelOptions;\n        var addEvent = U.addEvent, find = U.find, fireEvent = U.fireEvent, isArray = U.isArray, isObject = U.isObject, isString = U.isString, merge = U.merge, pick = U.pick, wrap = U.wrap;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var TickConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBreakFromNode(node, max) {\n            var to = node.collapseEnd || 0;\n            var from = node.collapseStart || 0;\n            // In broken-axis, the axis.max is minimized until it is not within a\n            // break. Therefore, if break.to is larger than axis.max, the axis.to\n            // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n            // larger than axis.max.\n            // TODO consider simplifying broken-axis and this might solve itself\n            if (to >= max) {\n                from -= 0.5;\n            }\n            return {\n                from: from,\n                to: to,\n                showPoints: false\n            };\n        }\n        /**\n         * Creates a tree structure of the data, and the treegrid. Calculates\n         * categories, and y-values of points based on the tree.\n         *\n         * @private\n         * @function getTreeGridFromData\n         *\n         * @param {Array<Highcharts.GanttPointOptions>} data\n         * All the data points to display in the axis.\n         *\n         * @param {boolean} uniqueNames\n         * Whether or not the data node with the same name should share grid cell. If\n         * true they do share cell. False by default.\n         *\n         * @param {number} numberOfSeries\n         *\n         * @return {Object}\n         * Returns an object containing categories, mapOfIdToNode,\n         * mapOfPosToGridNode, and tree.\n         *\n         * @todo There should be only one point per line.\n         * @todo It should be optional to have one category per point, or merge\n         *       cells\n         * @todo Add unit-tests.\n         */\n        function getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n            var categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = typeof uniqueNames === 'boolean' ?\n                uniqueNames : false;\n            var mapOfPosToGridNode = {}, posIterator = -1;\n            // Build the tree from the series data.\n            var treeParams = {\n                // After the children has been created.\n                after: function (node) {\n                    var gridNode = mapOfPosToGridNode[node.pos];\n                    var height = 0, descendants = 0;\n                    gridNode.children.forEach(function (child) {\n                        descendants += (child.descendants || 0) + 1;\n                        height = Math.max((child.height || 0) + 1, height);\n                    });\n                    gridNode.descendants = descendants;\n                    gridNode.height = height;\n                    if (gridNode.collapsed) {\n                        collapsedNodes.push(gridNode);\n                    }\n                },\n                // Before the children has been created.\n                before: function (node) {\n                    var data = isObject(node.data, true) ?\n                        node.data :\n                        {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (isObject(parentNode, true) ?\n                        mapOfPosToGridNode[parentNode.pos] :\n                        null), hasSameName = function (x) {\n                        return x.name === name;\n                    };\n                    var gridNode, pos;\n                    // If not unique names, look for sibling node with the same name\n                    if (uniqueNamesEnabled &&\n                        isObject(parentGridNode, true) &&\n                        !!(gridNode = find(parentGridNode.children, hasSameName))) {\n                        // If there is a gridNode with the same name, reuse position\n                        pos = gridNode.pos;\n                        // Add data node to list of nodes in the grid node.\n                        gridNode.nodes.push(node);\n                    }\n                    else {\n                        // If it is a new grid node, increment position.\n                        pos = posIterator++;\n                    }\n                    // Add new grid node to map.\n                    if (!mapOfPosToGridNode[pos]) {\n                        mapOfPosToGridNode[pos] = gridNode = {\n                            depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                            name: name,\n                            id: data.id,\n                            nodes: [node],\n                            children: [],\n                            pos: pos\n                        };\n                        // If not root, then add name to categories.\n                        if (pos !== -1) {\n                            categories.push(name);\n                        }\n                        // Add name to list of children.\n                        if (isObject(parentGridNode, true)) {\n                            parentGridNode.children.push(gridNode);\n                        }\n                    }\n                    // Add data node to map\n                    if (isString(node.id)) {\n                        mapOfIdToNode[node.id] = node;\n                    }\n                    // If one of the points are collapsed, then start the grid node\n                    // in collapsed state.\n                    if (gridNode &&\n                        data.collapsed === true) {\n                        gridNode.collapsed = true;\n                    }\n                    // Assign pos to data node\n                    node.pos = pos;\n                }\n            };\n            var updateYValuesAndTickPos = function (map, numberOfSeries) {\n                var setValues = function (gridNode, start, result) {\n                    var nodes = gridNode.nodes, padding = 0.5;\n                    var end = start + (start === -1 ? 0 : numberOfSeries - 1);\n                    var diff = (end - start) / 2, pos = start + diff;\n                    nodes.forEach(function (node) {\n                        var data = node.data;\n                        if (isObject(data, true)) {\n                            // Update point\n                            data.y = start + (data.seriesIndex || 0);\n                            // Remove the property once used\n                            delete data.seriesIndex;\n                        }\n                        node.pos = pos;\n                    });\n                    result[pos] = gridNode;\n                    gridNode.pos = pos;\n                    gridNode.tickmarkOffset = diff + padding;\n                    gridNode.collapseStart = end + padding;\n                    gridNode.children.forEach(function (child) {\n                        setValues(child, end + 1, result);\n                        end = (child.collapseEnd || 0) - padding;\n                    });\n                    // Set collapseEnd to the end of the last child node.\n                    gridNode.collapseEnd = end + padding;\n                    return result;\n                };\n                return setValues(map['-1'], -1, {});\n            };\n            // Create tree from data\n            var tree = Tree.getTree(data, treeParams);\n            // Update y values of data, and set calculate tick positions.\n            mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n            // Return the resulting data.\n            return {\n                categories: categories,\n                mapOfIdToNode: mapOfIdToNode,\n                mapOfPosToGridNode: mapOfPosToGridNode,\n                collapsedNodes: collapsedNodes,\n                tree: tree\n            };\n        }\n        /**\n         * Builds the tree of categories and calculates its positions.\n         * @private\n         * @param {Object} e Event object\n         * @param {Object} e.target The chart instance which the event was fired on.\n         * @param {object[]} e.target.axes The axes of the chart.\n         */\n        function onBeforeRender(e) {\n            var chart = e.target, axes = chart.axes;\n            axes.filter(function (axis) {\n                return axis.options.type === 'treegrid';\n            }).forEach(function (axis) {\n                var options = axis.options || {}, labelOptions = options.labels, uniqueNames = options.uniqueNames, max = options.max, \n                // Check whether any of series is rendering for the first\n                // time, visibility has changed, or its data is dirty, and\n                // only then update. #10570, #10580. Also check if\n                // mapOfPosToGridNode exists. #10887\n                isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n                    axis.series.some(function (series) {\n                        return !series.hasRendered ||\n                            series.isDirtyData ||\n                            series.isDirty;\n                    }));\n                var numberOfSeries = 0, data, treeGrid;\n                if (isDirty) {\n                    // Concatenate data from all series assigned to this axis.\n                    data = axis.series.reduce(function (arr, s) {\n                        if (s.visible) {\n                            // Push all data to array\n                            (s.options.data || []).forEach(function (data) {\n                                // For using keys - rebuild the data structure\n                                if (s.options.keys && s.options.keys.length) {\n                                    data = s.pointClass.prototype\n                                        .optionsToObject\n                                        .call({ series: s }, data);\n                                    s.pointClass.setGanttPointAliases(data);\n                                }\n                                if (isObject(data, true)) {\n                                    // Set series index on data. Removed again\n                                    // after use.\n                                    data.seriesIndex = (numberOfSeries);\n                                    arr.push(data);\n                                }\n                            });\n                            // Increment series index\n                            if (uniqueNames === true) {\n                                numberOfSeries++;\n                            }\n                        }\n                        return arr;\n                    }, []);\n                    // If max is higher than set data - add a\n                    // dummy data to render categories #10779\n                    if (max && data.length < max) {\n                        for (var i = data.length; i <= max; i++) {\n                            data.push({\n                                // Use the zero-width character\n                                // to avoid conflict with uniqueNames\n                                name: i + '\\u200B'\n                            });\n                        }\n                    }\n                    // setScale is fired after all the series is initialized,\n                    // which is an ideal time to update the axis.categories.\n                    treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n                    // Assign values to the axis.\n                    axis.categories = treeGrid.categories;\n                    axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n                    axis.hasNames = true;\n                    axis.treeGrid.tree = treeGrid.tree;\n                    // Update yData now that we have calculated the y values\n                    axis.series.forEach(function (series) {\n                        var axisData = (series.options.data || []).map(function (d) {\n                            if (isArray(d) &&\n                                series.options.keys &&\n                                series.options.keys.length) {\n                                // Get the axisData from the data array used to\n                                // build the treeGrid where has been modified\n                                data.forEach(function (point) {\n                                    if (d.indexOf(point.x) >= 0 &&\n                                        d.indexOf(point.x2) >= 0) {\n                                        d = point;\n                                    }\n                                });\n                            }\n                            return isObject(d, true) ? merge(d) : d;\n                        });\n                        // Avoid destroying points when series is not visible\n                        if (series.visible) {\n                            series.setData(axisData, false);\n                        }\n                    });\n                    // Calculate the label options for each level in the tree.\n                    axis.treeGrid.mapOptionsToLevel =\n                        getLevelOptions({\n                            defaults: labelOptions,\n                            from: 1,\n                            levels: labelOptions && labelOptions.levels,\n                            to: axis.treeGrid.tree && axis.treeGrid.tree.height\n                        });\n                    // Setting initial collapsed nodes\n                    if (e.type === 'beforeRender') {\n                        axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n                    }\n                }\n            });\n        }\n        /**\n         * Generates a tick for initial positioning.\n         *\n         * @private\n         * @function Highcharts.GridAxis#generateTick\n         *\n         * @param {Function} proceed\n         * The original generateTick function.\n         *\n         * @param {number} pos\n         * The tick position in axis values.\n         */\n        function wrapGenerateTick(proceed, pos) {\n            var axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.options.type === 'treegrid', ticks = axis.ticks;\n            var tick = ticks[pos], levelOptions, options, gridNode;\n            if (isTreeGrid &&\n                axis.treeGrid.mapOfPosToGridNode) {\n                gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n                levelOptions = mapOptionsToLevel[gridNode.depth];\n                if (levelOptions) {\n                    options = {\n                        labels: levelOptions\n                    };\n                }\n                if (!tick &&\n                    TickConstructor) {\n                    ticks[pos] = tick =\n                        new TickConstructor(axis, pos, void 0, void 0, {\n                            category: gridNode.name,\n                            tickmarkOffset: gridNode.tickmarkOffset,\n                            options: options\n                        });\n                }\n                else {\n                    // update labels depending on tick interval\n                    tick.parameters.category = gridNode.name;\n                    tick.options = options;\n                    tick.addLabel();\n                }\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapInit(proceed, chart, userOptions, coll) {\n            var axis = this, isTreeGrid = userOptions.type === 'treegrid';\n            if (!axis.treeGrid) {\n                axis.treeGrid = new TreeGridAxisAdditions(axis);\n            }\n            // Set default and forced options for TreeGrid\n            if (isTreeGrid) {\n                // Add event for updating the categories of a treegrid.\n                // NOTE Preferably these events should be set on the axis.\n                addEvent(chart, 'beforeRender', onBeforeRender);\n                addEvent(chart, 'beforeRedraw', onBeforeRender);\n                // Add new collapsed nodes on addseries\n                addEvent(chart, 'addSeries', function (e) {\n                    if (e.options.data) {\n                        var treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                        axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n                    }\n                });\n                // Collapse all nodes in axis.treegrid.collapsednodes\n                // where collapsed equals true.\n                addEvent(axis, 'foundExtremes', function () {\n                    if (axis.treeGrid.collapsedNodes) {\n                        axis.treeGrid.collapsedNodes.forEach(function (node) {\n                            var breaks = axis.treeGrid.collapse(node);\n                            if (axis.brokenAxis) {\n                                axis.brokenAxis.setBreaks(breaks, false);\n                                // remove the node from the axis collapsedNodes\n                                if (axis.treeGrid.collapsedNodes) {\n                                    axis.treeGrid.collapsedNodes = axis.treeGrid\n                                        .collapsedNodes\n                                        .filter(function (n) { return ((node.collapseStart !==\n                                        n.collapseStart) ||\n                                        node.collapseEnd !== n.collapseEnd); });\n                                }\n                            }\n                        });\n                    }\n                });\n                // If staticScale is not defined on the yAxis\n                // and chart height is set, set axis.isDirty\n                // to ensure collapsing works (#12012)\n                addEvent(axis, 'afterBreaks', function () {\n                    if (axis.coll === 'yAxis' &&\n                        !axis.staticScale &&\n                        axis.chart.options.chart.height) {\n                        axis.isDirty = true;\n                    }\n                });\n                userOptions = merge({\n                    // Default options\n                    grid: {\n                        enabled: true\n                    },\n                    // TODO: add support for align in treegrid.\n                    labels: {\n                        align: 'left',\n                        /**\n                        * Set options on specific levels in a tree grid axis. Takes\n                        * precedence over labels options.\n                        *\n                        * @sample {gantt} gantt/treegrid-axis/labels-levels\n                        *         Levels on TreeGrid Labels\n                        *\n                        * @type      {Array<*>}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels\n                        *\n                        * @private\n                        */\n                        levels: [{\n                                /**\n                                * Specify the level which the options within this object\n                                * applies to.\n                                *\n                                * @type      {number}\n                                * @product   gantt\n                                * @apioption yAxis.labels.levels.level\n                                *\n                                * @private\n                                */\n                                level: void 0\n                            }, {\n                                level: 1,\n                                /**\n                                 * @type      {Highcharts.CSSObject}\n                                 * @product   gantt\n                                 * @apioption yAxis.labels.levels.style\n                                 *\n                                 * @private\n                                 */\n                                style: {\n                                    /** @ignore-option */\n                                    fontWeight: 'bold'\n                                }\n                            }],\n                        /**\n                         * The symbol for the collapse and expand icon in a\n                         * treegrid.\n                         *\n                         * @product      gantt\n                         * @optionparent yAxis.labels.symbol\n                         *\n                         * @private\n                         */\n                        symbol: {\n                            /**\n                             * The symbol type. Points to a definition function in\n                             * the `Highcharts.Renderer.symbols` collection.\n                             *\n                             * @type {Highcharts.SymbolKeyValue}\n                             *\n                             * @private\n                             */\n                            type: 'triangle',\n                            x: -5,\n                            y: -5,\n                            height: 10,\n                            width: 10,\n                            padding: 5\n                        }\n                    },\n                    uniqueNames: false\n                }, userOptions, {\n                    // Forced options\n                    reversed: true,\n                    // grid.columns is not supported in treegrid\n                    grid: {\n                        columns: void 0\n                    }\n                });\n            }\n            // Now apply the original function with the original arguments, which are\n            // sliced off this function's arguments\n            proceed.apply(axis, [chart, userOptions, coll]);\n            if (isTreeGrid) {\n                axis.hasNames = true;\n                axis.options.showLastLabel = true;\n            }\n        }\n        /**\n         * Set the tick positions, tickInterval, axis min and max.\n         *\n         * @private\n         * @function Highcharts.GridAxis#setTickInterval\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapSetTickInterval(proceed) {\n            var axis = this, options = axis.options, isTreeGrid = options.type === 'treegrid';\n            if (isTreeGrid) {\n                axis.min = pick(axis.userMin, options.min, axis.dataMin);\n                axis.max = pick(axis.userMax, options.max, axis.dataMax);\n                fireEvent(axis, 'foundExtremes');\n                // setAxisTranslation modifies the min and max according to\n                // axis breaks.\n                axis.setAxisTranslation();\n                axis.tickmarkOffset = 0.5;\n                axis.tickInterval = 1;\n                axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n                    axis.treeGrid.getTickPositions() :\n                    [];\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreeGridAxisAdditions = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            function TreeGridAxisAdditions(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            TreeGridAxisAdditions.compose = function (AxisClass, ChartClass, SeriesClass, TickClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    if (AxisClass.keepProps.indexOf('treeGrid') === -1) {\n                        AxisClass.keepProps.push('treeGrid');\n                    }\n                    var axisProps = AxisClass.prototype;\n                    wrap(axisProps, 'generateTick', wrapGenerateTick);\n                    wrap(axisProps, 'init', wrapInit);\n                    wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n                    // Make utility functions available for testing.\n                    axisProps.utils = {\n                        getNode: Tree.getNode\n                    };\n                }\n                if (U.pushUnique(composedMembers, TickClass)) {\n                    if (!TickConstructor) {\n                        TickConstructor = TickClass;\n                    }\n                }\n                GridAxis.compose(AxisClass, ChartClass, TickClass);\n                BrokenAxis.compose(AxisClass, SeriesClass);\n                TreeGridTick.compose(TickClass);\n                return AxisClass;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set the collapse status.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             */\n            TreeGridAxisAdditions.prototype.setCollapsedStatus = function (node) {\n                var axis = this.axis, chart = axis.chart;\n                axis.series.forEach(function (series) {\n                    var data = series.options.data;\n                    if (node.id && data) {\n                        var point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                        if (point && dataPoint) {\n                            point.collapsed = node.collapsed;\n                            dataPoint.collapsed = node.collapsed;\n                        }\n                    }\n                });\n            };\n            /**\n             * Calculates the new axis breaks to collapse a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            TreeGridAxisAdditions.prototype.collapse = function (node) {\n                var axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                breaks.push(obj);\n                // Change the collapsed flag #13838\n                node.collapsed = true;\n                axis.treeGrid.setCollapsedStatus(node);\n                return breaks;\n            };\n            /**\n             * Calculates the new axis breaks to expand a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to expand.\n             *\n             * @param {number} pos\n             * The tick position to expand.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            TreeGridAxisAdditions.prototype.expand = function (node) {\n                var axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                // Change the collapsed flag #13838\n                node.collapsed = false;\n                axis.treeGrid.setCollapsedStatus(node);\n                // Remove the break from the axis breaks array.\n                return breaks.reduce(function (arr, b) {\n                    if (b.to !== obj.to || b.from !== obj.from) {\n                        arr.push(b);\n                    }\n                    return arr;\n                }, []);\n            };\n            /**\n             * Creates a list of positions for the ticks on the axis. Filters out\n             * positions that are outside min and max, or is inside an axis break.\n             *\n             * @private\n             *\n             * @return {Array<number>}\n             * List of positions.\n             */\n            TreeGridAxisAdditions.prototype.getTickPositions = function () {\n                var axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n                return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n                    var pos = +key;\n                    if (pos >= roundedMin &&\n                        pos <= roundedMax &&\n                        !(axis.brokenAxis && axis.brokenAxis.isInAnyBreak(pos))) {\n                        arr.push(pos);\n                    }\n                    return arr;\n                }, []);\n            };\n            /**\n             * Check if a node is collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Object} node\n             * The node to check if is collapsed.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {boolean}\n             * Returns true if collapsed, false if expanded.\n             */\n            TreeGridAxisAdditions.prototype.isCollapsed = function (node) {\n                var axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                return breaks.some(function (b) {\n                    return b.from === obj.from && b.to === obj.to;\n                });\n            };\n            /**\n             * Calculates the new axis breaks after toggling the collapse/expand\n             * state of a node. If it is collapsed it will be expanded, and if it is\n             * exapended it will be collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to toggle.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            TreeGridAxisAdditions.prototype.toggleCollapse = function (node) {\n                return (this.isCollapsed(node) ?\n                    this.expand(node) :\n                    this.collapse(node));\n            };\n            return TreeGridAxisAdditions;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridAxisAdditions;\n    });\n    _registerModule(_modules, 'masters/modules/treegrid.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/TreeGrid/TreeGridAxis.js']], function (Highcharts, TreeGridAxis) {\n\n        var G = Highcharts;\n        // Compositions\n        TreeGridAxis.compose(G.Axis, G.Chart, G.Series, G.Tick);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","StackItem","U","BrokenAxis","addEvent","find","fireEvent","isArray","isNumber","pick","composedMembers","onAxisAfterInit","brokenAxis","setBreaks","options","breaks","onAxisAfterSetOptions","_a","axis","hasBreaks","ordinal","onAxisAfterSetTickPositions","tickPositions","info","newPositions","i","length","isInAnyBreak","push","onAxisInit","Additions","onSeriesAfterGeneratePoints","_b","isDirty","_c","connectNulls","points","xAxis","yAxis","point","isPointInBreak","y","x","visible","onSeriesAfterRender","drawBreaks","pointArrayMap","seriesDrawBreaks","keys","threshold","series","brokenAxis_1","forEach","key","breakArray","isXAxis","min","breaksOutOfRange","filter","brk","isOut","otherBreak","from","to","toUpperCase","eventName","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","slice","gapUnit","basePointRange","current","next","xRange","splice","isNull","stacking","stack","stacks","stackKey","stackLabels","total","getGraphPath","compose","AxisClass","SeriesClass","pushUnique","keepProps","seriesProto","prototype","gappedPath","isInBreak","val","repeat","Infinity","test","inclusive","lin2Val","nval","len","val2Lin","findBreakAt","b","testKeep","inbrk","keep","ret","showPoints","redraw","Object","userOptions","forceRedraw","val2lin","lin2val","setExtremes","newMin","newMax","animation","eventArguments","breaks_1","axisBreak","constructor","call","setAxisTranslation","unitLength","inBrk_1","repeat_1","start_1","i_1","breaks_2","breakArrayT_1","breakArray_1","pointRangePadding","length_1","min_1","userMin","max_1","userMax","max","value","move","size","breakSize","sort","a","staticScale","transA","minPixelPadding","minPointOffset","chart","Axis","H","GridAxisSide","dateFormats","defined","erase","merge","timeUnits","wrap","isObject","getMaxLabelDimensions","ticks","dimensions","width","height","pos","label","tick","labelHeight","labelWidth","getBBox","textStr","textPxLength","Math","round","type","treeGrid","mapOfPosToGridNode","treeDepth","labels","indentation","onAfterGetOffset","grid","columns","column","getOffset","onAfterGetTitlePosition","e","gridOptions","enabled","axisTitle","axisHeight","horiz","axisLeft","left","offset","opposite","options_1","axisTop","top","axisWidth","tickSize","titleWidth","xOption","title","yOption","titleMargin","margin","titleFontSize","renderer","fontMetrics","f","offAxis","side","bottom","titlePosition","onAfterInit","align","categories","showLastLabel","labelRotation","rotation","minTickInterval","columnIndex","columnOptions","isInternal","linkedTo","scrollbar","isColumn","axes","coll","onAfterRender","maxLabelDimensions","rightWall","destroy","isOuterAxis","axisLine","lineWidth","linePath","getLinePath","startPoint","endPoint","distance","tickLength","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","chartWidth","toPixels","tickmarkOffset","lowerBorderPath","upperBorder","renderBorder","attr","stroke","lineColor","animate","d","lowerBorder","axisLineExtra","showAxis","render","hasRendered","linkedParent","lastTick","firstTick","tickMark","hiddenLabels","pop","element","show","hiddenMarks","hide","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","pointRange","dateTimeLabelFormats","unitName","range","count","tickInterval","onAfterSetOptions","gridAxisOptions","className","hour","list","day","week","month","borderWidth","padding","style","fontSize","text","reserveSpace","units","tickPixelInterval","tickPositioner","parentInfo","unitIdx","unit_1","unit","counts","unitRange","time","getTimeTicks","startOfWeek","minPadding","maxPadding","tickWidth","onAfterSetOptions2","onAfterSetScale","setScale","onAfterTickSize","labelPadding","cellHeight","onChartAfterSetChartSize","setAxisSize","onDestroy","keepEvents","onInit","borderColor","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","reversed","labelOpts","tickPos","nextTickPos","index","crispCorr","top_1","right","chartHeight","translate","slotWidth","lblMetrics","useHTML","lines","h","onTickLabelFormat","ctx","isFirst","data","p","pointCopy","is","seriesTypes","gantt","pointClass","setGanttPointAliases","onTrimTicks","categoryAxis","firstPos","lastPos","linkedMin","linkedMax","isLinked","startOnTick","endOnTick","wrapUnsquish","proceed","arguments","Array","parentAxis","thisIndex","lastIndex","otherAxis","extraBorderLine","addClass","add","axisBorder","styledMode","zIndex","E","timestamp","dateFormat","charAt","W","Date","unitsToOmit","format","set","firstDay","get","thursday","valueOf","firstThursday","floor","toString","ChartClass","TickClass","extend","getNode","id","parent","level","mapOfIdToChildren","start","end","after","before","node","depth","descendants","children","map","child","childStart","NaN","childEnd","milestone","getTree","reduce","prev","curr","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","step","symbolOptions","lbOptions","isTreeGrid","result","symbol","wrapRenderLabel","params","isNew","labelBox","iconCenter","shouldRender","icon","collapsed","addClassName","removeClassName","indexOf","prefixClassName","isCollapsed","color","styles","group","parentGroup","xy","labelIcon","symbols","cursor","strokeWidth","translateX","translateY","removeClass","css","object","attachedTreeGridEvents","textDecoration","toggleCollapse","collapse","expand","Color","getColor","colorVariation","colorByPoint","colorIndexByPoint","colorIndex","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","chartOptionsChart","colorCount","parse","brighten","getLevelOptions","defaults","converted","levels","item","levelIsConstant","setTreeValues","tree","idRoot","nodeRoot","mapIdToNode","optionsPoint","childrenTotal","levelDynamic","name","newOptions","isLeaf","updateRootId","rootId","rootNode","GridAxis","Tree","TreeGridTick","TU","TickConstructor","isString","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","setValues","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentNode","parentGridNode","nodes","diff","seriesIndex","onBeforeRender","target","some","isDirtyData","arr","s","optionsToObject","hasNames","axisData","x2","setData","wrapGenerateTick","levelOptions","category","parameters","addLabel","wrapInit","TreeGridAxisAdditions","concat","n","fontWeight","wrapSetTickInterval","dataMin","dataMax","getTickPositions","axisProps","utils","setCollapsedStatus","dataPoint","roundedMin","roundedMax","ceil","TreeGridAxis","G","Chart","Series","Tick"],"mappings":"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"}