{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * (c) 2009-2022\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/flowmap', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/FlowMap/FlowMapPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2023 Askel Eirik Johansson, Piotr Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var MapLinePoint = SeriesRegistry.seriesTypes.mapline.prototype.pointClass;\n        var pick = U.pick, isString = U.isString, isNumber = U.isNumber;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var FlowMapPoint = /** @class */ (function (_super) {\n            __extends(FlowMapPoint, _super);\n            function FlowMapPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.options = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            FlowMapPoint.prototype.isValid = function () {\n                var valid = !!(this.options.to && this.options.from);\n                [this.options.to, this.options.from]\n                    .forEach(function (toOrFrom) {\n                    valid = !!(valid && (toOrFrom && (isString(toOrFrom) || ( // point id or has lat/lon coords\n                    isNumber(pick(toOrFrom[0], toOrFrom.lat)) &&\n                        isNumber(pick(toOrFrom[1], toOrFrom.lon))))));\n                });\n                return valid;\n            };\n            return FlowMapPoint;\n        }(MapLinePoint));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlowMapPoint;\n    });\n    _registerModule(_modules, 'Series/FlowMap/FlowMapSeries.js', [_modules['Series/FlowMap/FlowMapPoint.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (FlowMapPoint, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2022 Askel Eirik Johansson, Piotr Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n                if (ar || !(i in from)) {\n                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n                    ar[i] = from[i];\n                }\n            }\n            return to.concat(ar || Array.prototype.slice.call(from));\n        };\n        var Point = SeriesRegistry.series.prototype.pointClass, _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, MapSeries = _a.map, MapLineSeries = _a.mapline;\n        var addEvent = U.addEvent, arrayMax = U.arrayMax, arrayMin = U.arrayMin, defined = U.defined, extend = U.extend, isArray = U.isArray, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n        /**\n         * The flowmap series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flowmap\n         *\n         * @augments Highcharts.Series\n         */\n        var FlowMapSeries = /** @class */ (function (_super) {\n            __extends(FlowMapSeries, _super);\n            function FlowMapSeries() {\n                /* *\n                 *\n                 *  Static properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 * Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.smallestWeight = void 0;\n                _this.greatestWeight = void 0;\n                _this.centerOfPoints = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Static Function\n             *\n             * */\n            /**\n             * Get vector length.\n             * @private\n             */\n            FlowMapSeries.getLength = function (x, y) {\n                return Math.sqrt(x * x + y * y);\n            };\n            /**\n             * Return a normalized vector.\n             * @private\n             */\n            FlowMapSeries.normalize = function (x, y) {\n                var length = this.getLength(x, y);\n                return [x / length, y / length];\n            };\n            /**\n             * Return an SVGPath for markerEnd.\n             * @private\n             */\n            FlowMapSeries.markerEndPath = function (lCorner, rCorner, topCorner, options) {\n                var width = relativeLength(options.width || 0, this.getLength(rCorner[0] - lCorner[0], rCorner[1] - lCorner[1]));\n                var type = options.markerType || 'arrow', _a = this.normalize(rCorner[0] - lCorner[0], rCorner[1] - lCorner[1]), edgeX = _a[0], edgeY = _a[1];\n                var path = [];\n                // For arrow head calculation.\n                if (type === 'arrow') {\n                    // Left side of arrow head.\n                    var x = lCorner[0], y = lCorner[1];\n                    x -= edgeX * width;\n                    y -= edgeY * width;\n                    path.push(['L', x, y]);\n                    // Tip of arrow head.\n                    path.push(['L', topCorner[0], topCorner[1]]);\n                    // Right side of arrow head.\n                    x = rCorner[0], y = rCorner[1];\n                    x += edgeX * width;\n                    y += edgeY * width;\n                    path.push(['L', x, y]);\n                }\n                // For mushroom head calculation.\n                if (type === 'mushroom') {\n                    var xLeft = lCorner[0], yLeft = lCorner[1], xRight = rCorner[0], yRight = rCorner[1];\n                    var xTop = topCorner[0], yTop = topCorner[1], xMid = (xRight - xLeft) / 2 + xLeft, yMid = (yRight - yLeft) / 2 + yLeft, \n                    // Control point for curve.\n                    xControl = (xTop - xMid) * 2 + xMid, yControl = (yTop - yMid) * 2 + yMid;\n                    // Left side of arrow head.\n                    xLeft -= edgeX * width;\n                    yLeft -= edgeY * width;\n                    path.push(['L', xLeft, yLeft]);\n                    // Right side of arrow head.\n                    xRight += edgeX * width;\n                    yRight += edgeY * width;\n                    // Curve from left to right.\n                    path.push(['Q', xControl, yControl, xRight, yRight]);\n                }\n                return path;\n            };\n            /**\n             *\n             *  Functions\n             *\n             */\n            /**\n             * Animate the flowmap point one by one from 'fromPoint'.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.flowmap#animate\n             *\n             * @param {boolean} init\n             *        Whether to initialize the animation or run it\n             */\n            FlowMapSeries.prototype.animate = function (init) {\n                var series = this, points = series.points;\n                if (!init) { // run the animation\n                    points.forEach(function (point) {\n                        if (point.shapeArgs &&\n                            isArray(point.shapeArgs.d) &&\n                            point.shapeArgs.d.length) {\n                            var path = point.shapeArgs.d, x = path[0][1], y = path[0][2];\n                            // to animate SVG path the initial path array needs to be\n                            // same as target, but element should be visible, so we\n                            // insert array elements with start (M) values\n                            if (x && y) {\n                                var start = [];\n                                for (var i = 0; i < path.length; i++) {\n                                    // Added any when merging master into another branch\n                                    // :((. The spread looks correct, but TS complains\n                                    // about possible number in the first position,\n                                    // which is the segment type.\n                                    start.push(__spreadArray([], path[i], true));\n                                    for (var j = 1; j < path[i].length; j++) {\n                                        start[i][j] = j % 2 ? x : y;\n                                    }\n                                }\n                                if (point.graphic) {\n                                    point.graphic.attr({ d: start });\n                                    point.graphic.animate({ d: path });\n                                }\n                            }\n                        }\n                    });\n                }\n            };\n            /**\n             * Get the actual width of a link either as a mapped weight between\n             * `minWidth` and `maxWidth` or a specified width.\n             * @private\n             */\n            FlowMapSeries.prototype.getLinkWidth = function (point) {\n                var width = this.options.width, weight = point.options.weight || this.options.weight;\n                point.options.weight = weight;\n                if (width && !weight) {\n                    return width;\n                }\n                var smallestWeight = this.smallestWeight, greatestWeight = this.greatestWeight;\n                if (!defined(weight) || !smallestWeight || !greatestWeight) {\n                    return 0;\n                }\n                var minWidthLimit = this.options.minWidth, maxWidthLimit = this.options.maxWidth;\n                return (weight - smallestWeight) * (maxWidthLimit - minWidthLimit) /\n                    ((greatestWeight - smallestWeight) || 1) + minWidthLimit;\n            };\n            /**\n             * Automatically calculate the optimal curve based on a reference point.\n             * @private\n             */\n            FlowMapSeries.prototype.autoCurve = function (fromX, fromY, toX, toY, centerX, centerY) {\n                var linkV = {\n                    x: (toX - fromX),\n                    y: (toY - fromY)\n                }, half = {\n                    x: (toX - fromX) / 2 + fromX,\n                    y: (toY - fromY) / 2 + fromY\n                }, centerV = {\n                    x: half.x - centerX,\n                    y: half.y - centerY\n                };\n                // Dot product and determinant\n                var dot = linkV.x * centerV.x + linkV.y * centerV.y, det = linkV.x * centerV.y - linkV.y * centerV.x;\n                // Calculate the angle and base the curveFactor on it.\n                var angle = Math.atan2(det, dot), angleDeg = angle * 180 / Math.PI;\n                if (angleDeg < 0) {\n                    angleDeg = 360 + angleDeg;\n                }\n                angle = angleDeg * Math.PI / 180;\n                // A more subtle result.\n                return -Math.sin(angle) * 0.7;\n            };\n            /**\n             * Get point attributes.\n             * @private\n             */\n            FlowMapSeries.prototype.pointAttribs = function (point, state) {\n                var attrs = MapSeries.prototype.pointAttribs.call(this, point, state);\n                attrs.fill = pick(point.options.fillColor, point.options.color, this.options.fillColor === 'none' ? null : this.options.fillColor, this.color);\n                attrs['fill-opacity'] = pick(point.options.fillOpacity, this.options.fillOpacity);\n                attrs['stroke-width'] = pick(point.options.lineWidth, this.options.lineWidth, 1);\n                if (point.options.opacity) {\n                    attrs.opacity = point.options.opacity;\n                }\n                return attrs;\n            };\n            /**\n             * Draw shapeArgs based on from/to options. Run translation operations. We\n             * need two loops: first loop to calculate data, like smallest/greatest\n             * weights and centerOfPoints, which needs the calculated positions, second\n             * loop for calculating shapes of points based on previous calculations.\n             * @private\n             */\n            FlowMapSeries.prototype.translate = function () {\n                var _this = this;\n                if (this.chart.hasRendered && (this.isDirtyData || !this.hasRendered)) {\n                    this.processData();\n                    this.generatePoints();\n                }\n                var weights = [];\n                var averageX = 0, averageY = 0;\n                this.points.forEach(function (point) {\n                    var chart = _this.chart, mapView = chart.mapView, options = point.options, dirtySeries = function () {\n                        point.series.isDirty = true;\n                    }, getPointXY = function (pointId) {\n                        var foundPoint = chart.get(pointId);\n                        // Connect to the linked parent point (in mappoint) to\n                        // trigger series redraw for the linked point (in flow).\n                        if ((foundPoint instanceof Point) &&\n                            foundPoint.plotX &&\n                            foundPoint.plotY) {\n                            // after linked point update flowmap point should\n                            // be also updated\n                            addEvent(foundPoint, 'update', dirtySeries);\n                            return {\n                                x: foundPoint.plotX,\n                                y: foundPoint.plotY\n                            };\n                        }\n                    }, getLonLatXY = function (lonLat) {\n                        if (isArray(lonLat)) {\n                            return {\n                                lon: lonLat[0],\n                                lat: lonLat[1]\n                            };\n                        }\n                        return lonLat;\n                    };\n                    var fromPos, toPos;\n                    if (typeof options.from === 'string') {\n                        fromPos = getPointXY(options.from);\n                    }\n                    else if (typeof options.from === 'object' && mapView) {\n                        fromPos = mapView.lonLatToPixels(getLonLatXY(options.from));\n                    }\n                    if (typeof options.to === 'string') {\n                        toPos = getPointXY(options.to);\n                    }\n                    else if (typeof options.to === 'object' && mapView) {\n                        toPos = mapView.lonLatToPixels(getLonLatXY(options.to));\n                    }\n                    // Save original point location.\n                    point.fromPos = fromPos;\n                    point.toPos = toPos;\n                    if (fromPos && toPos) {\n                        averageX += (fromPos.x + toPos.x) / 2;\n                        averageY += (fromPos.y + toPos.y) / 2;\n                    }\n                    if (pick(point.options.weight, _this.options.weight)) {\n                        weights.push(pick(point.options.weight, _this.options.weight));\n                    }\n                });\n                this.smallestWeight = arrayMin(weights);\n                this.greatestWeight = arrayMax(weights);\n                this.centerOfPoints = {\n                    x: averageX / this.points.length,\n                    y: averageY / this.points.length\n                };\n                this.points.forEach(function (point) {\n                    // Don't draw point if weight is not valid.\n                    if (!_this.getLinkWidth(point)) {\n                        point.shapeArgs = {\n                            d: []\n                        };\n                        return;\n                    }\n                    if (point.fromPos) {\n                        point.plotX = point.fromPos.x;\n                        point.plotY = point.fromPos.y;\n                    }\n                    // Calculate point shape\n                    point.shapeType = 'path';\n                    point.shapeArgs = _this.getPointShapeArgs(point);\n                    // When updating point from null to normal value, set a real color\n                    // (don't keep nullColor).\n                    point.color = pick(point.options.color, point.series.color);\n                });\n            };\n            FlowMapSeries.prototype.getPointShapeArgs = function (point) {\n                var _a;\n                var fromPos = point.fromPos, toPos = point.toPos;\n                if (!fromPos || !toPos) {\n                    return {};\n                }\n                var finalWidth = this.getLinkWidth(point) / 2, pointOptions = point.options, markerEndOptions = merge(this.options.markerEnd, pointOptions.markerEnd), growTowards = pick(pointOptions.growTowards, this.options.growTowards), fromX = fromPos.x || 0, fromY = fromPos.y || 0;\n                var toX = toPos.x || 0, toY = toPos.y || 0, curveFactor = pick(pointOptions.curveFactor, this.options.curveFactor), offset = markerEndOptions && markerEndOptions.enabled &&\n                    markerEndOptions.height || 0;\n                if (!defined(curveFactor)) { // Automate the curveFactor value.\n                    curveFactor = this.autoCurve(fromX, fromY, toX, toY, this.centerOfPoints.x, this.centerOfPoints.y);\n                }\n                // An offset makes room for arrows if they are specified.\n                if (offset) {\n                    // Prepare offset if it's a percentage by converting to number.\n                    offset = relativeLength(offset, finalWidth * 4);\n                    // Vector between the points.\n                    var dX_1 = toX - fromX, dY_1 = toY - fromY;\n                    // Vector is halved.\n                    dX_1 *= 0.5;\n                    dY_1 *= 0.5;\n                    // Vector points exactly between the points.\n                    var mX_1 = fromX + dX_1, mY_1 = fromY + dY_1;\n                    // Rotating the halfway distance by 90 anti-clockwise.\n                    // We can then use this to create an arc.\n                    var tmp_1 = dX_1;\n                    dX_1 = dY_1;\n                    dY_1 = -tmp_1;\n                    // Calculate the arc strength.\n                    var arcPointX_1 = (mX_1 + dX_1 * curveFactor), arcPointY_1 = (mY_1 + dY_1 * curveFactor);\n                    var _b = FlowMapSeries.normalize(arcPointX_1 - toX, arcPointY_1 - toY), offsetX = _b[0], offsetY = _b[1];\n                    offsetX *= offset;\n                    offsetY *= offset;\n                    toX += offsetX;\n                    toY += offsetY;\n                }\n                // Vector between the points.\n                var dX = toX - fromX, dY = toY - fromY;\n                // Vector is halved.\n                dX *= 0.5;\n                dY *= 0.5;\n                // Vector points exactly between the points.\n                var mX = fromX + dX, mY = fromY + dY;\n                // Rotating the halfway distance by 90 anti-clockwise.\n                // We can then use this to create an arc.\n                var tmp = dX;\n                dX = dY;\n                dY = -tmp;\n                // Weight vector calculation for the middle of the curve.\n                var _c = FlowMapSeries.normalize(dX, dY), wX = _c[0], wY = _c[1];\n                // The `fineTune` prevents an obvious mismatch along the curve.\n                var fineTune = 1 + Math.sqrt(curveFactor * curveFactor) * 0.25;\n                wX *= finalWidth * fineTune;\n                wY *= finalWidth * fineTune;\n                // Calculate the arc strength.\n                var arcPointX = (mX + dX * curveFactor), arcPointY = (mY + dY * curveFactor);\n                // Calculate edge vectors in the from-point.\n                var _d = FlowMapSeries.normalize(arcPointX - fromX, arcPointY - fromY), fromXToArc = _d[0], fromYToArc = _d[1];\n                tmp = fromXToArc;\n                fromXToArc = fromYToArc;\n                fromYToArc = -tmp;\n                fromXToArc *= finalWidth;\n                fromYToArc *= finalWidth;\n                // Calculate edge vectors in the to-point.\n                var _e = FlowMapSeries.normalize(arcPointX - toX, arcPointY - toY), toXToArc = _e[0], toYToArc = _e[1];\n                tmp = toXToArc;\n                toXToArc = -toYToArc;\n                toYToArc = tmp;\n                toXToArc *= finalWidth;\n                toYToArc *= finalWidth;\n                // Shrink the starting edge and middle thickness to make it grow\n                // towards the end.\n                if (growTowards) {\n                    fromXToArc /= finalWidth;\n                    fromYToArc /= finalWidth;\n                    wX /= 4;\n                    wY /= 4;\n                }\n                var shapeArgs = {\n                    d: [[\n                            'M',\n                            fromX - fromXToArc,\n                            fromY - fromYToArc\n                        ], [\n                            'Q',\n                            arcPointX - wX,\n                            arcPointY - wY,\n                            toX - toXToArc,\n                            toY - toYToArc\n                        ], [\n                            'L',\n                            toX + toXToArc,\n                            toY + toYToArc\n                        ], [\n                            'Q',\n                            arcPointX + wX,\n                            arcPointY + wY,\n                            fromX + fromXToArc,\n                            fromY + fromYToArc\n                        ], [\n                            'Z'\n                        ]]\n                };\n                if (markerEndOptions && markerEndOptions.enabled && shapeArgs.d) {\n                    var marker = FlowMapSeries.markerEndPath([toX - toXToArc, toY - toYToArc], [toX + toXToArc, toY + toYToArc], [toPos.x, toPos.y], markerEndOptions);\n                    (_a = shapeArgs.d).splice.apply(_a, __spreadArray([2, 0], marker, false));\n                }\n                // Objects converted to string to be used in tooltip.\n                var fromPoint = point.options.from, toPoint = point.options.to, fromLat = fromPoint.lat, fromLon = fromPoint.lon, toLat = toPoint.lat, toLon = toPoint.lon;\n                if (fromLat && fromLon) {\n                    point.options.from = \"\".concat(+fromLat, \", \").concat(+fromLon);\n                }\n                if (toLat && toLon) {\n                    point.options.to = \"\".concat(+toLat, \", \").concat(+toLon);\n                }\n                return shapeArgs;\n            };\n            /**\n             * A flowmap series is a series laid out on top of a map series allowing to\n             * display route paths (e.g. flight or ship routes) or flows on a map. It\n             * creates a link between two points on a map chart.\n             *\n             * @since 11.0.0\n             * @extends      plotOptions.mapline\n             * @excluding    affectsMapView, allAreas, allowPointSelect, boostBlending,\n             * boostThreshold, borderColor, borderWidth, dashStyle, dataLabels,\n             * dragDrop, joinBy, mapData, negativeColor, onPoint, shadow, showCheckbox\n             * @product      highmaps\n             * @requires     modules/flowmap\n             * @optionparent plotOptions.flowmap\n             */\n            FlowMapSeries.defaultOptions = merge(MapLineSeries.defaultOptions, {\n                animation: true,\n                /**\n                 * The `curveFactor` option for all links. Value higher than 0 will\n                 * curve the link clockwise. A negative value will curve it counter\n                 * clockwise. If the value is 0 the link will be a straight line. By\n                 * default undefined curveFactor get an automatic curve.\n                 *\n                 * @sample {highmaps} maps/series-flowmap/curve-factor Setting different\n                 *         values for curveFactor\n                 *\n                 * @type      {number}\n                 * @default   undefined\n                 * @apioption plotOptions.flowmap.curveFactor\n                 */\n                dataLabels: {\n                    enabled: false\n                },\n                /**\n                 * The fill color of all the links. If not set, the series color will be\n                 * used with the opacity set in\n                 * [fillOpacity](#plotOptions.flowmap.fillOpacity).\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption plotOptions.flowmap.fillColor\n                 */\n                /**\n                 * The opacity of the color fill for all links.\n                 *\n                 * @type   {number}\n                 * @sample {highmaps} maps/series-flowmap/fill-opacity\n                 *         Setting different values for fillOpacity\n                 */\n                fillOpacity: 0.5,\n                /**\n                 * The [id](#series.id) of another series to link to. Additionally, the\n                 * value can be \":previous\" to link to the previous series. When two\n                 * series are linked, only the first one appears in the legend. Toggling\n                 * the visibility of this also toggles the linked series, which is\n                 * necessary for operations such as zoom or updates on the flowmap\n                 * series.\n                 *\n                 * @type      {string}\n                 * @apioption plotOptions.flowmap.linkedTo\n                 */\n                /**\n                 * A `markerEnd` creates an arrow symbol indicating the direction of\n                 * flow at the destination. Specifying a `markerEnd` here will create\n                 * one for each link.\n                 *\n                 * @declare Highcharts.SeriesFlowMapSeriesOptionsObject\n                 */\n                markerEnd: {\n                    /**\n                     * Enable or disable the `markerEnd`.\n                     *\n                     * @type   {boolean}\n                     * @sample {highmaps} maps/series-flowmap/marker-end\n                     *         Setting different markerType for markerEnd\n                     */\n                    enabled: true,\n                    /**\n                     * Height of the `markerEnd`. Can be a number in pixels or a\n                     * percentage based on the weight of the link.\n                     *\n                     * @type  {number|string}\n                     */\n                    height: '40%',\n                    /**\n                     * Width of the `markerEnd`. Can be a number in pixels or a\n                     * percentage based on the weight of the link.\n                     *\n                     * @type  {number|string}\n                     */\n                    width: '40%',\n                    /**\n                     * Change the shape of the `markerEnd`.\n                     * Can be `arrow` or `mushroom`.\n                     *\n                     * @type {string}\n                     */\n                    markerType: 'arrow'\n                },\n                /**\n                 * If no weight has previously been specified, this will set the width\n                 * of all the links without being compared to and scaled according to\n                 * other weights.\n                 *\n                 * @type  {number}\n                 */\n                width: 1,\n                /**\n                 * Maximum width of a link expressed in pixels. The weight of a link is\n                 * mapped between `maxWidth` and `minWidth`.\n                 *\n                 * @type  {number}\n                 */\n                maxWidth: 25,\n                /**\n                 * Minimum width of a link expressed in pixels. The weight of a link is\n                 * mapped between `maxWidth` and `minWidth`.\n                 *\n                 * @type  {number}\n                 */\n                minWidth: 5,\n                /**\n                 * Specify the `lineWidth` of the links if they are not specified.\n                 *\n                 * @type  {number}\n                 */\n                lineWidth: void 0,\n                /**\n                 * The opacity of all the links. Affects the opacity for the entire\n                 * link, including stroke. See also\n                 * [fillOpacity](#plotOptions.flowmap.fillOpacity), that affects the\n                 * opacity of only the fill color.\n                 *\n                 * @apioption plotOptions.flowmap.opacity\n                 */\n                /**\n                 * The weight for all links with unspecified weights. The weight of a\n                 * link determines its thickness compared to other links.\n                 *\n                 * @sample {highmaps} maps/series-flowmap/ship-route/ Example ship route\n                 *\n                 * @type      {number}\n                 * @product   highmaps\n                 * @apioption plotOptions.flowmap.weight\n                 */\n                tooltip: {\n                    /**\n                     * The HTML for the flowmaps' route description in the tooltip. It\n                     * consists of the `headerFormat` and `pointFormat`, which can be\n                     * edited. Variables are enclosed by curly brackets. Available\n                     * variables are `series.name`, `point.options.from`,\n                     * `point.options.to`, `point.options.weight` and other properties in the\n                     * same form.\n                     *\n                     * @product   highmaps\n                     */\n                    headerFormat: '<span style=\"font-size: 0.8em\">{series.name}</span><br/>',\n                    pointFormat: '{point.options.from} \\u2192 {point.options.to}: <b>{point.options.weight}</b>'\n                }\n            });\n            return FlowMapSeries;\n        }(MapLineSeries));\n        extend(FlowMapSeries.prototype, {\n            pointClass: FlowMapPoint,\n            pointArrayMap: ['from', 'to', 'weight'],\n            drawPoints: ColumnSeries.prototype.drawPoints,\n            // Make it work on zoom or pan.\n            useMapGeometry: true\n        });\n        SeriesRegistry.registerSeriesType('flowmap', FlowMapSeries);\n        /* *\n         *\n         *  Default export\n         *\n         * */\n        /* *\n         *\n         *  API options\n         *\n         * */\n        /**\n         * A `flowmap` series. If the [type](#series.flowmap.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flowmap\n         * @excluding affectsMapView, allAreas, allowPointSelect, boostBlending,\n         * boostThreshold, borderColor, borderWidth, dashStyle, dataLabels, dragDrop,\n         * joinBy, mapData, negativeColor, onPoint, shadow, showCheckbox\n         * @product   highmaps\n         * @apioption series.flowmap\n         */\n        /**\n         * An array of data points for the series. For the `flowmap` series\n         * type, points can be given in the following ways:\n         *\n         * 1.  An array of arrays with options as values. In this case,\n         *     the values correspond to `from, to, weight`. Example:\n         *     ```js\n         *     data: [\n         *         ['Point 1', 'Point 2', 4]\n         *     ]\n         *     ```\n         *\n         * 2.  An array of objects with named values. The following snippet shows only a\n         *     few settings, see the complete options set below.\n         *\n         *     ```js\n         *     data: [{\n         *         from: 'Point 1',\n         *         to: 'Point 2',\n         *         curveFactor: 0.4,\n         *         weight: 5,\n         *         growTowards: true,\n         *         markerEnd: {\n         *             enabled: true,\n         *             height: 15,\n         *             width: 8\n         *         }\n         *     }]\n         *     ```\n         *\n         * 3.   For objects with named values, instead of using the `mappoint` `id`,\n         *      you can use `[longitude, latitude]` arrays.\n         *\n         *      ```js\n         *      data: [{\n         *          from: [longitude, latitude],\n         *          to: [longitude, latitude]\n         *      }]\n         *      ```\n         *\n         * @type      {Array<number|null|*>}\n         * @apioption series.flowmap.data\n         */\n        /**\n         * A `curveFactor` with a higher value than 0 will curve the link clockwise.\n         * A negative value will curve the link counter clockwise.\n         * If the value is 0 the link will be straight.\n         *\n         * @sample {highmaps} maps/series-flowmap/ship-route/\n         *         Example ship route\n         *\n         * @type      {number}\n         * @apioption series.flowmap.data.curveFactor\n         */\n        /**\n         * The fill color of an individual link.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @apioption series.flowmap.data.fillColor\n         */\n        /**\n         * ID referencing a map point holding coordinates of the link origin or\n         * coordinates in terms of array of `[longitude, latitude]` or object with `lon`\n         * and `lat` properties.\n         *\n         * @sample {highmaps} maps/series-flowmap/from-to-lon-lat\n         *         Flowmap point using lonlat coordinates\n         * @sample {highmaps} maps/series-flowmap/flight-routes\n         *         Highmaps basic flight routes demo\n         *\n         * @type      {string|Highcharts.LonLatArray|Highcharts.MapLonLatObject}\n         * @apioption series.flowmap.data.from\n         */\n        /**\n         * ID referencing a map point holding coordinates of the link origin or\n         * coordinates in terms of array of `[longitude, latitude]` or object with `lon`\n         * and `lat` properties.\n         *\n         * @sample {highmaps} maps/series-flowmap/from-to-lon-lat\n         *         Flowmap point using lonlat coordinates\n         * @sample {highmaps} maps/series-flowmap/flight-routes\n         *         Highmaps basic flight routes demo\n         *\n         * @type      {string|Highcharts.LonLatArray|Highcharts.MapLonLatObject}\n         * @apioption series.flowmap.data.to\n         */\n        /**\n         * The opacity of the link color fill.\n         *\n         * @type      {number}\n         * @apioption series.flowmap.data.fillOpacity\n         */\n        /**\n         * If set to `true`, the line will grow towards its end.\n         *\n         * @sample {highmaps} maps/series-flowmap/ship-route/\n         *         Example ship route\n         *\n         * @type      {boolean}\n         * @apioption series.flowmap.data.growTowards\n         */\n        /**\n         * Specifying a `markerEnd` here will create an arrow symbol\n         * indicating the direction of flow at the destination of one individual link.\n         * If one has been previously specified at the higher level option it will be\n         * overridden for the current link.\n         *\n         * @sample {highmaps} maps/series-flowmap/ship-route/\n         *         Example ship route\n         *\n         * @type      {*|null}\n         * @apioption series.flowmap.data.markerEnd\n         */\n        /**\n         * Enable or disable the `markerEnd`.\n         *\n         * @type      {boolean}\n         * @apioption series.flowmap.data.markerEnd.enabled\n         */\n        /**\n         * Height of the `markerEnd`. Can be a number in pixels\n         * or a percentage based on the weight of the link.\n         *\n         * @type      {number|string}\n         * @apioption series.flowmap.data.markerEnd.height\n         */\n        /**\n         * Width of the `markerEnd`. Can be a number in pixels\n         * or a percentage based on the weight of the link.\n         *\n         * @type      {number|string}\n         * @apioption series.flowmap.data.markerEnd.width\n         */\n        /**\n         * Change the shape of the `markerEnd`. Can be `arrow` or `mushroom`.\n         *\n         * @type      {string}\n         * @apioption series.flowmap.data.markerEnd.markerType\n         */\n        /**\n         * The opacity of an individual link.\n         *\n         * @type      {number}\n         * @apioption series.flowmap.data.opacity\n         */\n        /**\n         * The weight of a link determines its thickness compared to\n         * other links.\n         *\n         * @sample {highmaps} maps/series-flowmap/ship-route/\n         *         Example ship route\n         *\n         * @type      {number}\n         * @apioption series.flowmap.data.weight\n         */\n        /**\n         * Specify the `lineWidth` of the link.\n         *\n         * @type  {number}\n         * @apioption series.flowmap.data.lineWidth\n         */\n        ''; // adds doclets above to transpiled file\n\n        return FlowMapSeries;\n    });\n    _registerModule(_modules, 'masters/modules/flowmap.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","MapLinePoint","seriesTypes","mapline","pointClass","pick","isString","isNumber","_super","FlowMapPoint","_this","arguments","options","series","isValid","valid","to","from","forEach","toOrFrom","lat","lon","__spreadArray","pack","length","ar","i","l","slice","concat","Point","_a","ColumnSeries","column","MapSeries","map","MapLineSeries","addEvent","arrayMax","arrayMin","defined","extend","isArray","merge","relativeLength","FlowMapSeries","data","points","smallestWeight","greatestWeight","centerOfPoints","getLength","x","y","Math","sqrt","normalize","markerEndPath","lCorner","rCorner","topCorner","width","type","markerType","edgeX","edgeY","push","xLeft","yLeft","xRight","yRight","xTop","yTop","xMid","yMid","animate","init","point","shapeArgs","start","j","graphic","attr","getLinkWidth","weight","minWidthLimit","minWidth","maxWidthLimit","maxWidth","autoCurve","fromX","fromY","toX","toY","centerX","centerY","linkV","half","centerV","dot","angle","atan2","angleDeg","PI","sin","pointAttribs","state","attrs","fill","fillColor","color","fillOpacity","lineWidth","opacity","translate","chart","hasRendered","isDirtyData","processData","generatePoints","weights","averageX","averageY","fromPos","toPos","mapView","dirtySeries","isDirty","getPointXY","pointId","foundPoint","get","plotX","plotY","getLonLatXY","lonLat","lonLatToPixels","shapeType","getPointShapeArgs","finalWidth","pointOptions","markerEndOptions","markerEnd","growTowards","curveFactor","offset","enabled","height","dX_1","dY_1","mX_1","mY_1","tmp_1","arcPointX_1","arcPointY_1","_b","offsetX","offsetY","dX","dY","mX","mY","tmp","_c","wX","wY","fineTune","arcPointX","arcPointY","_d","fromXToArc","fromYToArc","_e","toXToArc","toYToArc","marker","splice","fromPoint","toPoint","fromLat","fromLon","toLat","toLon","defaultOptions","animation","dataLabels","tooltip","headerFormat","pointFormat","pointArrayMap","drawPoints","useMapGeometry","registerSeriesType"],"mappings":"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"}