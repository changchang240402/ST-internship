{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * (c) 2016-2021 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sunburst', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Breadcrumbs/BreadcrumbsDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent lang\n         */\n        var lang = {\n            /**\n             * @since   10.0.0\n             * @product highcharts\n             *\n             * @private\n             */\n            mainBreadcrumb: 'Main'\n        };\n        /**\n         * Options for breadcrumbs. Breadcrumbs general options are defined in\n         * `navigation.breadcrumbs`. Specific options for drilldown are set in\n         * `drilldown.breadcrumbs` and for tree-like series traversing, in\n         * `plotOptions[series].breadcrumbs`.\n         *\n         * @since        10.0.0\n         * @product      highcharts\n         * @optionparent navigation.breadcrumbs\n         */\n        var options = {\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Themed, single button\n             *\n             * @type    {Highcharts.SVGAttributes}\n             * @since   10.0.0\n             * @product highcharts\n             */\n            buttonTheme: {\n                /** @ignore */\n                fill: 'none',\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                'stroke-width': 0,\n                /** @ignore */\n                zIndex: 7,\n                /** @ignore */\n                states: {\n                    select: {\n                        fill: 'none'\n                    }\n                },\n                style: {\n                    color: \"#334eff\" /* Palette.highlightColor80 */\n                }\n            },\n            /**\n             * The default padding for each button and separator in each direction.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            buttonSpacing: 5,\n            /**\n             * Fires when clicking on the breadcrumbs button. Two arguments are\n             * passed to the function. First breadcrumb button as an SVG element.\n             * Second is the breadcrumbs class, containing reference to the chart,\n             * series etc.\n             *\n             * ```js\n             * click: function(button, breadcrumbs) {\n             *   console.log(button);\n             * }\n             * ```\n             *\n             * Return false to stop default buttons click action.\n             *\n             * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n             * @since     10.0.0\n             * @apioption navigation.breadcrumbs.events.click\n             */\n            /**\n             * When the breadcrumbs are floating, the plot area will not move to\n             * make space for it. By default, the chart will not make space for the\n             * buttons. This property won't work when positioned in the middle.\n             *\n             * @sample highcharts/breadcrumbs/single-button\n             *         Floating button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            floating: false,\n            /**\n             * A format string for the breadcrumbs button. Variables are enclosed by\n             * curly brackets. Available values are passed in the declared point\n             * options.\n             *\n             * @type      {string|undefined}\n             * @since 10.0.0\n             * @default   undefined\n             * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n             *          values in breadcrumb button.\n             */\n            format: void 0,\n            /**\n             * Callback function to format the breadcrumb text from scratch.\n             *\n             * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n             * @since     10.0.0\n             * @default   undefined\n             * @apioption navigation.breadcrumbs.formatter\n             */\n            /**\n             * What box to align the button to. Can be either `plotBox` or\n             * `spacingBox`.\n             *\n             * @type    {Highcharts.ButtonRelativeToValue}\n             * @default plotBox\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            relativeTo: 'plotBox',\n            /**\n             * Whether to reverse the order of buttons. This is common in Arabic\n             * and Hebrew.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/rtl\n             *         Breadcrumbs in RTL\n             *\n             * @type  {boolean}\n             * @since 10.2.0\n             */\n            rtl: false,\n            /**\n             * Positioning for the button row. The breadcrumbs buttons will be\n             * aligned properly for the default chart layout (title,  subtitle,\n             * legend, range selector) for the custom chart layout set the position\n             * properties.\n             *\n             * @sample  {highcharts} highcharts/breadcrumbs/single-button\n             *          Single, right aligned button\n             *\n             * @type    {Highcharts.BreadcrumbsAlignOptions}\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            position: {\n                /**\n                 * Horizontal alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * Vertical alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The X offset of the breadcrumbs button group.\n                 *\n                 * @type {number}\n                 */\n                x: 0,\n                /**\n                 * The Y offset of the breadcrumbs button group. When `undefined`,\n                 * and `floating` is `false`, the `y` position is adapted so that\n                 * the breadcrumbs are rendered outside the target area.\n                 *\n                 * @type {number|undefined}\n                 */\n                y: void 0\n            },\n            /**\n             * Options object for Breadcrumbs separator.\n             *\n             * @since 10.0.0\n             */\n            separator: {\n                /**\n                 * @type    {string}\n                 * @since   10.0.0\n                 * @product highcharts\n                 */\n                text: '/',\n                /**\n                 * CSS styles for the breadcrumbs separator.\n                 *\n                 * In styled mode, the breadcrumbs separators are styled by the\n                 * `.highcharts-separator` rule with its different states.\n                 *  @type  {Highcharts.CSSObject}\n                 *  @since 10.0.0\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                }\n            },\n            /**\n             * Show full path or only a single button.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Single, styled button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            showFullPath: true,\n            /**\n             * CSS styles for all breadcrumbs.\n             *\n             * In styled mode, the breadcrumbs buttons are styled by the\n             * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @type  {Highcharts.SVGAttributes}\n             * @since 10.0.0\n             */\n            style: {},\n            /**\n             * Whether to use HTML to render the breadcrumbs items texts.\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            useHTML: false,\n            /**\n             * The z index of the breadcrumbs group.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            zIndex: 7\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var BreadcrumbsDefaults = {\n            lang: lang,\n            options: options\n        };\n\n        return BreadcrumbsDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Breadcrumbs/Breadcrumbs.js', [_modules['Extensions/Breadcrumbs/BreadcrumbsDefaults.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Templating.js'], _modules['Core/Utilities.js']], function (BreadcrumbsDefaults, Chart, F, U) {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var addEvent = U.addEvent, defined = U.defined, extend = U.extend, fireEvent = U.fireEvent, isString = U.isString, merge = U.merge, objectEach = U.objectEach, pick = U.pick;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n         * @private\n         */\n        function onChartAfterShowResetZoom() {\n            var chart = this;\n            if (chart.breadcrumbs) {\n                var bbox = chart.resetZoomButton &&\n                    chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n                if (bbox &&\n                    breadcrumbsOptions.position.align === 'right' &&\n                    breadcrumbsOptions.relativeTo === 'plotBox') {\n                    chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n                }\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            if (this.breadcrumbs) {\n                this.breadcrumbs.destroy();\n                this.breadcrumbs = void 0;\n            }\n        }\n        /**\n         * Logic for making space for the buttons above the plot area\n         * @private\n         */\n        function onChartGetMargins() {\n            var breadcrumbs = this.breadcrumbs;\n            if (breadcrumbs &&\n                !breadcrumbs.options.floating &&\n                breadcrumbs.level) {\n                var breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n                    2 * (buttonTheme.padding || 0) +\n                    breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n                    breadcrumbs.yOffset = breadcrumbsHeight;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.plotTop += breadcrumbsHeight;\n                    breadcrumbs.yOffset = -breadcrumbsHeight;\n                }\n                else {\n                    breadcrumbs.yOffset = void 0;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRedraw() {\n            this.breadcrumbs && this.breadcrumbs.redraw();\n        }\n        /**\n         * After zooming out, shift the drillUpButton to the previous position, #8095.\n         * @private\n         */\n        function onChartSelection(event) {\n            if (event.resetSelection === true &&\n                this.breadcrumbs) {\n                this.breadcrumbs.alignBreadcrumbsGroup();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Breadcrumbs class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Breadcrumbs\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         * @param {Highcharts.Options} userOptions\n         *        User options\n         */\n        var Breadcrumbs = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function Breadcrumbs(chart, userOptions) {\n                this.elementList = {};\n                this.isDirty = true;\n                this.level = 0;\n                this.list = [];\n                var chartOptions = merge(chart.options.drilldown &&\n                    chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n                this.chart = chart;\n                this.options = chartOptions || {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            Breadcrumbs.compose = function (ChartClass, highchartsDefaultOptions) {\n                if (U.pushUnique(composedMembers, ChartClass)) {\n                    addEvent(Chart, 'destroy', onChartDestroy);\n                    addEvent(Chart, 'afterShowResetZoom', onChartAfterShowResetZoom);\n                    addEvent(Chart, 'getMargins', onChartGetMargins);\n                    addEvent(Chart, 'redraw', onChartRedraw);\n                    addEvent(Chart, 'selection', onChartSelection);\n                }\n                if (U.pushUnique(composedMembers, highchartsDefaultOptions)) {\n                    // Add language support.\n                    extend(highchartsDefaultOptions.lang, BreadcrumbsDefaults.lang);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update Breadcrumbs properties, like level and list.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateProperties\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateProperties = function (list) {\n                this.setList(list);\n                this.setLevel();\n                this.isDirty = true;\n            };\n            /**\n             * Set breadcrumbs list.\n             * @function Highcharts.Breadcrumbs#setList\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} list\n             *        Breadcrumbs list.\n             */\n            Breadcrumbs.prototype.setList = function (list) {\n                this.list = list;\n            };\n            /**\n             * Calcule level on which chart currently is.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#setLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.setLevel = function () {\n                this.level = this.list.length && this.list.length - 1;\n            };\n            /**\n             * Get Breadcrumbs level\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.getLevel = function () {\n                return this.level;\n            };\n            /**\n             * Default button text formatter.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getButtonText\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Breadcrumb.\n             * @return {string}\n             *         Formatted text.\n             */\n            Breadcrumbs.prototype.getButtonText = function (breadcrumb) {\n                var breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n                    '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n                var returnText = breadcrumbsOptions.formatter &&\n                    breadcrumbsOptions.formatter(breadcrumb) ||\n                    format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n                if (((isString(returnText) &&\n                    !returnText.length) ||\n                    returnText === '← ') &&\n                    defined(defaultText)) {\n                    returnText = !breadcrumbsOptions.showFullPath ?\n                        '← ' + defaultText :\n                        defaultText;\n                }\n                return returnText;\n            };\n            /**\n             * Redraw.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#redraw\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.redraw = function () {\n                if (this.isDirty) {\n                    this.render();\n                }\n                if (this.group) {\n                    this.group.align();\n                }\n                this.isDirty = false;\n            };\n            /**\n             * Create a group, then draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#render\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.render = function () {\n                var breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n                // A main group for the breadcrumbs.\n                if (!breadcrumbs.group && breadcrumbsOptions) {\n                    breadcrumbs.group = chart.renderer\n                        .g('breadcrumbs-group')\n                        .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                        .attr({\n                        zIndex: breadcrumbsOptions.zIndex\n                    })\n                        .add();\n                }\n                // Draw breadcrumbs.\n                if (breadcrumbsOptions.showFullPath) {\n                    this.renderFullPathButtons();\n                }\n                else {\n                    this.renderSingleButton();\n                }\n                this.alignBreadcrumbsGroup();\n            };\n            /**\n             * Draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderFullPathButtons\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderFullPathButtons = function () {\n                // Make sure that only one type of button is visible.\n                this.destroySingleButton();\n                this.resetElementListState();\n                this.updateListElements();\n                this.destroyListElements();\n            };\n            /**\n             * Render Single button - when showFullPath is not used. The button is\n             * similar to the old drillUpButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderSingleButton = function () {\n                var breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n                // Make sure that only one type of button is visible.\n                this.destroyListElements();\n                // Draw breadcrumbs. Inital position for calculating the breadcrumbs\n                // group.\n                var posX = breadcrumbs.group ?\n                    breadcrumbs.group.getBBox().width :\n                    buttonSpacing, posY = buttonSpacing;\n                var previousBreadcrumb = list[list.length - 2];\n                if (!chart.drillUpButton && (this.level > 0)) {\n                    chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n                }\n                else if (chart.drillUpButton) {\n                    if (this.level > 0) {\n                        // Update button.\n                        this.updateSingleButton();\n                    }\n                    else {\n                        this.destroySingleButton();\n                    }\n                }\n            };\n            /**\n             * Update group position based on align and it's width.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.alignBreadcrumbsGroup = function (xOffset) {\n                var breadcrumbs = this;\n                if (breadcrumbs.group) {\n                    var breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                        breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                        void 0 :\n                        'scrollablePlotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                        breadcrumbsOptions.buttonSpacing;\n                    // Store positionOptions\n                    positionOptions.width = bBox.width + additionalSpace;\n                    positionOptions.height = bBox.height + additionalSpace;\n                    var newPositions = merge(positionOptions);\n                    // Add x offset if specified.\n                    if (xOffset) {\n                        newPositions.x += xOffset;\n                    }\n                    if (breadcrumbs.options.rtl) {\n                        newPositions.x += positionOptions.width;\n                    }\n                    newPositions.y = pick(newPositions.y, this.yOffset, 0);\n                    breadcrumbs.group.align(newPositions, true, alignTo);\n                }\n            };\n            /**\n             * Render a button.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#renderButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Current breadcrumb\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {SVGElement|void}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderButton = function (breadcrumb, posX, posY) {\n                var breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n                var button = chart.renderer\n                    .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n                    // Extract events from button object and call\n                    var buttonEvents = breadcrumbsOptions.events &&\n                        breadcrumbsOptions.events.click;\n                    var callDefaultEvent;\n                    if (buttonEvents) {\n                        callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n                    }\n                    // (difference in behaviour of showFullPath and drillUp)\n                    if (callDefaultEvent !== false) {\n                        // For single button we are not going to the button\n                        // level, but the one level up\n                        if (!breadcrumbsOptions.showFullPath) {\n                            e.newLevel = breadcrumbs.level - 1;\n                        }\n                        else {\n                            e.newLevel = breadcrumb.level;\n                        }\n                        fireEvent(breadcrumbs, 'up', e);\n                    }\n                }, buttonTheme)\n                    .addClass('highcharts-breadcrumbs-button')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    button.attr(breadcrumbsOptions.style);\n                }\n                return button;\n            };\n            /**\n             * Render a separator.\n             *\n             * @requires  modules/breadcrums\n             *\n             * @function Highcharts.Breadcrumbs#renderSeparator\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {Highcharts.SVGElement}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderSeparator = function (posX, posY) {\n                var breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n                var separator = chart.renderer\n                    .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n                    .addClass('highcharts-breadcrumbs-separator')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    separator.css(separatorOptions.style);\n                }\n                return separator;\n            };\n            /**\n             * Update.\n             * @function Highcharts.Breadcrumbs#update\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} options\n             *        Breadcrumbs class.\n             * @param {boolean} redraw\n             *        Redraw flag\n             */\n            Breadcrumbs.prototype.update = function (options) {\n                merge(true, this.options, options);\n                this.destroy();\n                this.isDirty = true;\n            };\n            /**\n             * Update button text when the showFullPath set to false.\n             * @function Highcharts.Breadcrumbs#updateSingleButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateSingleButton = function () {\n                var chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n                if (chart.drillUpButton) {\n                    chart.drillUpButton.attr({\n                        text: this.getButtonText(currentBreadcrumb)\n                    });\n                }\n            };\n            /**\n             * Destroy the chosen breadcrumbs group\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroy\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroy = function () {\n                this.destroySingleButton();\n                // Destroy elements one by one. It's necessary beacause\n                // g().destroy() does not remove added HTML\n                this.destroyListElements(true);\n                // Then, destroy the group itself.\n                if (this.group) {\n                    this.group.destroy();\n                }\n                this.group = void 0;\n            };\n            /**\n             * Destroy the elements' buttons and separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroyListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroyListElements = function (force) {\n                var elementList = this.elementList;\n                objectEach(elementList, function (element, level) {\n                    if (force ||\n                        !elementList[level].updated) {\n                        element = elementList[level];\n                        element.button && element.button.destroy();\n                        element.separator && element.separator.destroy();\n                        delete element.button;\n                        delete element.separator;\n                        delete elementList[level];\n                    }\n                });\n                if (force) {\n                    this.elementList = {};\n                }\n            };\n            /**\n             * Destroy the single button if exists.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroySingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroySingleButton = function () {\n                if (this.chart.drillUpButton) {\n                    this.chart.drillUpButton.destroy();\n                    this.chart.drillUpButton = void 0;\n                }\n            };\n            /**\n             * Reset state for all buttons in elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#resetElementListState\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.resetElementListState = function () {\n                objectEach(this.elementList, function (element) {\n                    element.updated = false;\n                });\n            };\n            /**\n             * Update rendered elements inside the elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateListElements\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateListElements = function () {\n                var breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n                    return rtlFactor * element.getBBox().width +\n                        rtlFactor * spacing;\n                }, adjustToRTL = function (element, posX, posY) {\n                    element.translate(posX - element.getBBox().width, posY);\n                };\n                // Inital position for calculating the breadcrumbs group.\n                var posX = breadcrumbs.group ?\n                    updateXPosition(breadcrumbs.group, buttonSpacing) :\n                    buttonSpacing, currentBreadcrumb, breadcrumb;\n                for (var i = 0, iEnd = list.length; i < iEnd; ++i) {\n                    var isLast = i === iEnd - 1;\n                    var button = void 0, separator = void 0;\n                    breadcrumb = list[i];\n                    if (elementList[breadcrumb.level]) {\n                        currentBreadcrumb = elementList[breadcrumb.level];\n                        button = currentBreadcrumb.button;\n                        // Render a separator if it was not created before.\n                        if (!currentBreadcrumb.separator &&\n                            !isLast) {\n                            // Add spacing for the next separator\n                            posX += rtlFactor * buttonSpacing;\n                            currentBreadcrumb.separator =\n                                breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                            }\n                            posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                        }\n                        else if (currentBreadcrumb.separator &&\n                            isLast) {\n                            currentBreadcrumb.separator.destroy();\n                            delete currentBreadcrumb.separator;\n                        }\n                        elementList[breadcrumb.level].updated = true;\n                    }\n                    else {\n                        // Render a button.\n                        button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                        if (rtl) {\n                            adjustToRTL(button, posX, posY);\n                        }\n                        posX += updateXPosition(button, buttonSpacing);\n                        // Render a separator.\n                        if (!isLast) {\n                            separator = breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(separator, posX, posY);\n                            }\n                            posX += updateXPosition(separator, buttonSpacing);\n                        }\n                        elementList[breadcrumb.level] = {\n                            button: button,\n                            separator: separator,\n                            updated: true\n                        };\n                    }\n                    if (button) {\n                        button.setState(isLast ? 2 : 0);\n                    }\n                }\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            Breadcrumbs.defaultOptions = BreadcrumbsDefaults.options;\n            return Breadcrumbs;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.BreadcrumbsClickCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @param {global.Event} e\n         * Event arguments.\n         */\n        /**\n         * Callback function to format the breadcrumb text from scratch.\n         *\n         * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @return {string}\n         * Formatted text or false\n         */\n        /**\n         * Options for the one breadcrumb.\n         *\n         * @interface Highcharts.BreadcrumbOptions\n         */\n        /**\n         * Level connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#level\n         * @type {number}\n         */\n        /**\n         * Options for series or point connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#levelOptions\n         * @type {SeriesOptions|PointOptionsObject}\n         */\n        /**\n         * Options for aligning breadcrumbs group.\n         *\n         * @interface Highcharts.BreadcrumbsAlignOptions\n         */\n        /**\n         * Align of a Breadcrumb group.\n         * @default right\n         * @name Highcharts.BreadcrumbsAlignOptions#align\n         * @type {AlignValue}\n         */\n        /**\n         * Vertical align of a Breadcrumb group.\n         * @default top\n         * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n         * @type {VerticalAlignValue}\n         */\n        /**\n         * X offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#x\n         * @type {number}\n         */\n        /**\n         * Y offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#y\n         * @type {number}\n         */\n        /**\n         * Options for all breadcrumbs.\n         *\n         * @interface Highcharts.BreadcrumbsOptions\n         */\n        /**\n         * Button theme.\n         * @name Highcharts.BreadcrumbsOptions#buttonTheme\n         * @type { SVGAttributes | undefined }\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Breadcrumbs;\n    });\n    _registerModule(_modules, 'Series/ColorMapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var columnProto = SeriesRegistry.seriesTypes.column.prototype;\n        var addEvent = U.addEvent, defined = U.defined;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorMapComposition;\n        (function (ColorMapComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedMembers = [];\n            ColorMapComposition.pointMembers = {\n                dataLabelOnNull: true,\n                moveToTopOnHover: true,\n                isValid: pointIsValid\n            };\n            ColorMapComposition.seriesMembers = {\n                colorKey: 'value',\n                axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n                parallelArrays: ['x', 'y', 'value'],\n                pointArrayMap: ['value'],\n                trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n                colorAttribs: seriesColorAttribs,\n                pointAttribs: columnProto.pointAttribs\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                var PointClass = SeriesClass.prototype.pointClass;\n                if (U.pushUnique(composedMembers, PointClass)) {\n                    addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n                }\n                return SeriesClass;\n            }\n            ColorMapComposition.compose = compose;\n            /**\n             * Move points to the top of the z-index order when hovered.\n             * @private\n             */\n            function onPointAfterSetState(e) {\n                var point = this;\n                if (point.moveToTopOnHover && point.graphic) {\n                    point.graphic.attr({\n                        zIndex: e && e.state === 'hover' ? 1 : 0\n                    });\n                }\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            function pointIsValid() {\n                return (this.value !== null &&\n                    this.value !== Infinity &&\n                    this.value !== -Infinity &&\n                    // undefined is allowed, but NaN is not (#17279)\n                    (this.value === void 0 || !isNaN(this.value)));\n            }\n            /**\n             * Get the color attibutes to apply on the graphic\n             * @private\n             * @function Highcharts.colorMapSeriesMixin.colorAttribs\n             * @param {Highcharts.Point} point\n             * @return {Highcharts.SVGAttributes}\n             *         The SVG attributes\n             */\n            function seriesColorAttribs(point) {\n                var ret = {};\n                if (defined(point.color) &&\n                    (!point.state || point.state === 'normal') // #15746\n                ) {\n                    ret[this.colorProp || 'fill'] = point.color;\n                }\n                return ret;\n            }\n        })(ColorMapComposition || (ColorMapComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorMapComposition;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapAlgorithmGroup.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapAlgorithmGroup = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function TreemapAlgorithmGroup(h, w, d, p) {\n                this.height = h;\n                this.width = w;\n                this.plot = p;\n                this.direction = d;\n                this.startDirection = d;\n                this.total = 0;\n                this.nW = 0;\n                this.lW = 0;\n                this.nH = 0;\n                this.lH = 0;\n                this.elArr = [];\n                this.lP = {\n                    total: 0,\n                    lH: 0,\n                    nH: 0,\n                    lW: 0,\n                    nW: 0,\n                    nR: 0,\n                    lR: 0,\n                    aspectRatio: function (w, h) {\n                        return Math.max((w / h), (h / w));\n                    }\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapAlgorithmGroup.prototype.addElement = function (el) {\n                this.lP.total = this.elArr[this.elArr.length - 1];\n                this.total = this.total + el;\n                if (this.direction === 0) {\n                    // Calculate last point old aspect ratio\n                    this.lW = this.nW;\n                    this.lP.lH = this.lP.total / this.lW;\n                    this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n                    // Calculate last point new aspect ratio\n                    this.nW = this.total / this.height;\n                    this.lP.nH = this.lP.total / this.nW;\n                    this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n                }\n                else {\n                    // Calculate last point old aspect ratio\n                    this.lH = this.nH;\n                    this.lP.lW = this.lP.total / this.lH;\n                    this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n                    // Calculate last point new aspect ratio\n                    this.nH = this.total / this.width;\n                    this.lP.nW = this.lP.total / this.nH;\n                    this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n                }\n                this.elArr.push(el);\n            };\n            TreemapAlgorithmGroup.prototype.reset = function () {\n                this.nW = 0;\n                this.lW = 0;\n                this.elArr = [];\n                this.total = 0;\n            };\n            return TreemapAlgorithmGroup;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapAlgorithmGroup;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapNode.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapNode = /** @class */ (function () {\n            function TreemapNode() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.childrenTotal = 0;\n                this.visible = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapNode.prototype.init = function (id, i, children, height, level, series, parent) {\n                this.id = id;\n                this.i = i;\n                this.children = children;\n                this.height = height;\n                this.level = level;\n                this.series = series;\n                this.parent = parent;\n                return this;\n            };\n            return TreemapNode;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapNode;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var isNumber = U.isNumber;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            var animatableAttribs = params.animatableAttribs, onComplete = params.onComplete, css = params.css, renderer = params.renderer;\n            var animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            var graphic = point.graphic;\n            params.attribs = __assign(__assign({}, params.attribs), { 'class': point.getClassName() }) || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    if (params.shapeType === 'text') {\n                        graphic = renderer.text();\n                    }\n                    else if (params.shapeType === 'image') {\n                        graphic = renderer.image(params.imageUrl || '')\n                            .attr(params.shapeArgs || {});\n                    }\n                    else {\n                        graphic = renderer[params.shapeType](params.shapeArgs || {});\n                    }\n                    point.graphic = graphic;\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                var destroy_1 = function () {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, function () { return destroy_1(); });\n                }\n                else {\n                    destroy_1();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DrawPointUtilities = {\n            draw: draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapPoint.js', [_modules['Series/DrawPointUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DPU, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes, PiePoint = _a.pie.prototype.pointClass, ScatterPoint = _a.scatter.prototype.pointClass;\n        var extend = U.extend, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapPoint = /** @class */ (function (_super) {\n            __extends(TreemapPoint, _super);\n            function TreemapPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.name = void 0;\n                _this.node = void 0;\n                _this.options = void 0;\n                _this.series = void 0;\n                _this.shapeType = 'rect';\n                _this.value = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapPoint.prototype.draw = function (params) {\n                DPU.draw(this, params);\n            };\n            TreemapPoint.prototype.getClassName = function () {\n                var series = this.series, options = series.options;\n                var className = _super.prototype.getClassName.call(this);\n                // Above the current level\n                if (this.node.level <= series.nodeMap[series.rootNode].level) {\n                    className += ' highcharts-above-level';\n                }\n                else if (!this.node.isLeaf &&\n                    !pick(options.interactByLeaf, !options.allowTraversingTree)) {\n                    className += ' highcharts-internal-node-interactive';\n                }\n                else if (!this.node.isLeaf) {\n                    className += ' highcharts-internal-node';\n                }\n                return className;\n            };\n            /**\n             * A tree point is valid if it has han id too, assume it may be a parent\n             * item.\n             *\n             * @private\n             * @function Highcharts.Point#isValid\n             */\n            TreemapPoint.prototype.isValid = function () {\n                return Boolean(this.id || isNumber(this.value));\n            };\n            TreemapPoint.prototype.setState = function (state) {\n                _super.prototype.setState.apply(this, arguments);\n                // Graphic does not exist when point is not visible.\n                if (this.graphic) {\n                    this.graphic.attr({\n                        zIndex: state === 'hover' ? 1 : 0\n                    });\n                }\n            };\n            TreemapPoint.prototype.shouldDraw = function () {\n                return isNumber(this.plotY) && this.y !== null;\n            };\n            return TreemapPoint;\n        }(ScatterPoint));\n        extend(TreemapPoint.prototype, {\n            setVisible: PiePoint.prototype.setVisible\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapPoint;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeriesDefaults.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isString = U.isString;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A treemap displays hierarchical data using nested rectangles. The data\n         * can be laid out in varying ways depending on options.\n         *\n         * @sample highcharts/demo/treemap-large-dataset/\n         *         Treemap\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n         * @product      highcharts\n         * @requires     modules/treemap\n         * @optionparent plotOptions.treemap\n         */\n        var TreemapSeriesDefaults = {\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n             *         Enabled\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n             *         Enabled\n             *\n             * @since     7.0.3\n             * @product   highcharts\n             */\n            allowTraversingTree: false,\n            animationLimit: 250,\n            /**\n             * The border radius for each treemap item.\n             */\n            borderRadius: 0,\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @optionparent plotOptions.treemap.breadcrumbs\n             */\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points\n             * (including markers and columns), is that animation is performed on\n             * updates. On the other hand, when the series contains more points than\n             * the crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away\n             * invisible points is to increase performance on large series.\n             *\n             * @type      {number}\n             * @default   300\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.cropThreshold\n             */\n            /**\n             * Fires on a request for change of root node for the tree, before the\n             * update is made. An event object is passed to the function, containing\n             * additional properties `newRootId`, `previousRootId`, `redraw` and\n             * `trigger`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n             *         Alert update information on setRootNode event.\n             *\n             * @type {Function}\n             * @default undefined\n             * @since 7.0.3\n             * @product highcharts\n             * @apioption plotOptions.treemap.events.setRootNode\n             */\n            /**\n             * This option decides if the user can interact with the parent nodes\n             * or just the leaf nodes. When this option is undefined, it will be\n             * true by default. However when allowTraversingTree is true, then it\n             * will be false by default.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n             *         False\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n             *         InteractByLeaf and allowTraversingTree is true\n             *\n             * @type      {boolean}\n             * @since     4.1.2\n             * @product   highcharts\n             * @apioption plotOptions.treemap.interactByLeaf\n             */\n            /**\n             * The sort index of the point inside the treemap level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n             *         Sort by years\n             *\n             * @type      {number}\n             * @since     4.1.10\n             * @product   highcharts\n             * @apioption plotOptions.treemap.sortIndex\n             */\n            /**\n             * A series specific or series type specific color set to apply instead\n             * of the global [colors](#colors) when\n             * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n             *\n             * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colors\n             */\n            /**\n             * Whether to display this series type or specific series item in the\n             * legend.\n             */\n            showInLegend: false,\n            /**\n             * @ignore-option\n             */\n            marker: void 0,\n            /**\n             * When using automatic point colors pulled from the `options.colors`\n             * collection, this option determines whether the chart should receive\n             * one color per series or one color per point.\n             *\n             * @see [series colors](#plotOptions.treemap.colors)\n             *\n             * @since     2.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colorByPoint\n             */\n            colorByPoint: false,\n            /**\n             * @since 4.1.0\n             */\n            dataLabels: {\n                defer: false,\n                enabled: true,\n                formatter: function () {\n                    var point = this && this.point ?\n                        this.point :\n                        {}, name = isString(point.name) ? point.name : '';\n                    return name;\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n            },\n            /**\n             * Whether to ignore hidden points when the layout algorithm runs.\n             * If `false`, hidden points will leave open spaces.\n             *\n             * @since 5.0.8\n             */\n            ignoreHiddenPoint: true,\n            /**\n             * This option decides which algorithm is used for setting position\n             * and dimensions of the points.\n             *\n             * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n             *         SliceAndDice by default\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n             *         Stripes\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n             *         Squarified\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n             *         Strip\n             *\n             * @since      4.1.0\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             */\n            layoutAlgorithm: 'sliceAndDice',\n            /**\n             * Defines which direction the layout algorithm will start drawing.\n             *\n             * @since       4.1.0\n             * @validvalue [\"vertical\", \"horizontal\"]\n             */\n            layoutStartingDirection: 'vertical',\n            /**\n             * Enabling this option will make the treemap alternate the drawing\n             * direction between vertical and horizontal. The next levels starting\n             * direction will always be the opposite of the previous.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n             *         Enabled\n             *\n             * @since 4.1.0\n             */\n            alternateStartingDirection: false,\n            /**\n             * Used together with the levels and allowTraversingTree options. When\n             * set to false the first level visible to be level one, which is\n             * dynamic when traversing the tree. Otherwise the level will be the\n             * same as the tree structure.\n             *\n             * @since 4.1.0\n             */\n            levelIsConstant: true,\n            /**\n             * Options for the button appearing when traversing down in a treemap.\n             *\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @deprecated\n             */\n            traverseUpButton: {\n                /**\n                 * The position of the button.\n                 */\n                position: {\n                    /**\n                     * Vertical alignment of the button.\n                     *\n                     * @type      {Highcharts.VerticalAlignValue}\n                     * @default   top\n                     * @product   highcharts\n                     * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n                     */\n                    /**\n                     * Horizontal alignment of the button.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'right',\n                    /**\n                     * Horizontal offset of the button.\n                     */\n                    x: -10,\n                    /**\n                     * Vertical offset of the button.\n                     */\n                    y: 10\n                }\n            },\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling dataLabels and borders\n             * @sample {highcharts} highcharts/demo/treemap-with-levels/\n             *         Different layoutAlgorithm\n             *\n             * @type      {Array<*>}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderColor\n             */\n            /**\n             * Set the dash style of the border of all the point which lies on the\n             * level. See\n             * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n             * for possible options.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderDashStyle\n             */\n            /**\n             * Can set the borderWidth on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderWidth\n             */\n            /**\n             * Can set a color on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.color\n             */\n            /**\n             * A configuration object to define how the color of a child varies from\n             * the parent's color. The variation is distributed among the children\n             * of node. For example when setting brightness, the brightness change\n             * will range from the parent's original brightness on the first child,\n             * to the amount set in the `to` setting on the last node. This allows a\n             * gradient-like color scheme that sets children out from each other\n             * while highlighting the grouping on treemaps and sectors on sunburst\n             * charts.\n             *\n             * @sample highcharts/demo/sunburst/\n             *         Sunburst with color variation\n             *\n             * @sample highcharts/series-treegraph/color-variation\n             *         Treegraph nodes with color variation\n             *\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type       {string}\n             * @since      6.0.0\n             * @product    highcharts\n             * @validvalue [\"brightness\"]\n             * @apioption  plotOptions.treemap.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation.to\n             */\n            /**\n             * Can set the options of dataLabels on each point which lies on the\n             * level.\n             * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n             * possible values.\n             *\n             * @extends   plotOptions.treemap.dataLabels\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.dataLabels\n             */\n            /**\n             * Can set the layoutAlgorithm option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n             */\n            /**\n             * Can set the layoutStartingDirection option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"vertical\", \"horizontal\"]\n             * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling of both levels\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.level\n             */\n            // Presentational options\n            /**\n             * The color of the border surrounding each tree map item.\n             *\n             * @type {Highcharts.ColorString}\n             */\n            borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The width of the border surrounding each tree map item.\n             */\n            borderWidth: 1,\n            colorKey: 'colorValue',\n            /**\n             * The opacity of a point in treemap. When a point has children, the\n             * visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.15,\n            /**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @extends plotOptions.heatmap.states\n             */\n            states: {\n                /**\n                 * Options for the hovered series\n                 *\n                 * @extends   plotOptions.heatmap.states.hover\n                 * @excluding halo\n                 */\n                hover: {\n                    /**\n                     * The border color for the hovered state.\n                     */\n                    borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * Brightness for the hovered point. Defaults to 0 if the\n                     * heatmap series is loaded first, otherwise 0.1.\n                     *\n                     * @type    {number}\n                     * @default undefined\n                     */\n                    brightness: SeriesRegistry.seriesTypes.heatmap ? 0 : 0.1,\n                    /**\n                     * @extends plotOptions.heatmap.states.hover.halo\n                     */\n                    halo: false,\n                    /**\n                     * The opacity of a point in treemap. When a point has children,\n                     * the visibility of the children is determined by the opacity.\n                     *\n                     * @since 4.2.4\n                     */\n                    opacity: 0.75,\n                    /**\n                     * The shadow option for hovered state.\n                     */\n                    shadow: false\n                }\n            },\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `treemap` series. If the [type](#series.treemap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treemap\n         * @excluding dataParser, dataURL, stack, dataSorting\n         * @product   highcharts\n         * @requires  modules/treemap\n         * @apioption series.treemap\n         */\n        /**\n         * An array of data points for the series. For the `treemap` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `value` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.treemap.turboThreshold),\n         *    this option is not available.\n         *    ```js\n         *      data: [{\n         *        value: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *      }, {\n         *        value: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *      }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.heatmap.data\n         * @excluding x, y, pointPadding\n         * @product   highcharts\n         * @apioption series.treemap.data\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the treemap.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.treemap.data.value\n         */\n        /**\n         * Serves a purpose only if a `colorAxis` object is defined in the chart\n         * options. This value will decide which color the point gets from the\n         * scale of the colorAxis.\n         *\n         * @type      {number}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.colorValue\n         */\n        /**\n         * Only for treemap. Use this option to build a tree structure. The\n         * value should be the id of the point which is the parent. If no points\n         * has a matching id, or this option is undefined, then the parent will\n         * be set to the root.\n         *\n         * @sample {highcharts} highcharts/point/parent/\n         *         Point parent\n         * @sample {highcharts} highcharts/demo/treemap-with-levels/\n         *         Example where parent id is not matching\n         *\n         * @type      {string}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.parent\n         */\n        ''; // keeps doclets above detached\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var objectEach = U.objectEach;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var TreemapUtilities;\n        (function (TreemapUtilities) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @todo find correct name for this function.\n             * @todo Similar to reduce, this function is likely redundant\n             */\n            function recursive(item, func, context) {\n                var next;\n                next = func.call(context || this, item);\n                if (next !== false) {\n                    recursive(next, func, context);\n                }\n            }\n            TreemapUtilities.recursive = recursive;\n        })(TreemapUtilities || (TreemapUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapUtilities;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            var index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            var getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            var variateColor = function (color) {\n                var colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            var result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce(function (obj, item) {\n                        var level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            var before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            var childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach(function (child, i) {\n                var newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            var value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            var rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var TreeUtilities = {\n            getColor: getColor,\n            getLevelOptions: getLevelOptions,\n            setTreeValues: setTreeValues,\n            updateRootId: updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeries.js', [_modules['Extensions/Breadcrumbs/Breadcrumbs.js'], _modules['Core/Color/Color.js'], _modules['Series/ColorMapComposition.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Treemap/TreemapAlgorithmGroup.js'], _modules['Series/Treemap/TreemapNode.js'], _modules['Series/Treemap/TreemapPoint.js'], _modules['Series/Treemap/TreemapSeriesDefaults.js'], _modules['Series/Treemap/TreemapUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (Breadcrumbs, Color, ColorMapComposition, H, SeriesRegistry, TreemapAlgorithmGroup, TreemapNode, TreemapPoint, TreemapSeriesDefaults, TreemapUtilities, TU, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var color = Color.parse;\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, ScatterSeries = _a.scatter;\n        var getColor = TU.getColor, getLevelOptions = TU.getLevelOptions, updateRootId = TU.updateRootId;\n        var addEvent = U.addEvent, correctFloat = U.correctFloat, defined = U.defined, error = U.error, extend = U.extend, fireEvent = U.fireEvent, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString, merge = U.merge, pick = U.pick, pushUnique = U.pushUnique, stableSort = U.stableSort;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var axisMax = 100;\n        var composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var treemapAxisDefaultValues = false;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function onSeriesAfterBindAxes() {\n            var series = this, xAxis = series.xAxis, yAxis = series.yAxis;\n            var treeAxis;\n            if (xAxis && yAxis) {\n                if (series.is('treemap')) {\n                    treeAxis = {\n                        endOnTick: false,\n                        gridLineWidth: 0,\n                        lineWidth: 0,\n                        min: 0,\n                        // dataMin: 0,\n                        minPadding: 0,\n                        max: axisMax,\n                        // dataMax: TreemapUtilities.AXIS_MAX,\n                        maxPadding: 0,\n                        startOnTick: false,\n                        title: void 0,\n                        tickPositions: []\n                    };\n                    extend(yAxis.options, treeAxis);\n                    extend(xAxis.options, treeAxis);\n                    treemapAxisDefaultValues = true;\n                }\n                else if (treemapAxisDefaultValues) {\n                    yAxis.setOptions(yAxis.userOptions);\n                    xAxis.setOptions(xAxis.userOptions);\n                    treemapAxisDefaultValues = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treemap\n         *\n         * @augments Highcharts.Series\n         */\n        var TreemapSeries = /** @class */ (function (_super) {\n            __extends(TreemapSeries, _super);\n            function TreemapSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.axisRatio = void 0;\n                _this.data = void 0;\n                _this.mapOptionsToLevel = void 0;\n                _this.nodeMap = void 0;\n                _this.nodeList = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.rootNode = void 0;\n                _this.tree = void 0;\n                _this.level = void 0;\n                return _this;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            TreemapSeries.compose = function (SeriesClass) {\n                if (pushUnique(composedMembers, SeriesClass)) {\n                    addEvent(SeriesClass, 'afterBindAxes', onSeriesAfterBindAxes);\n                }\n            };\n            /* *\n             *\n             *  Function\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            TreemapSeries.prototype.algorithmCalcPoints = function (directionChange, last, group, childrenArea) {\n                var plot = group.plot, end = group.elArr.length - 1;\n                var pX, pY, pW, pH, gW = group.lW, gH = group.lH, keep, i = 0;\n                if (last) {\n                    gW = group.nW;\n                    gH = group.nH;\n                }\n                else {\n                    keep = group.elArr[end];\n                }\n                for (var _i = 0, _a = group.elArr; _i < _a.length; _i++) {\n                    var p = _a[_i];\n                    if (last || (i < end)) {\n                        if (group.direction === 0) {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pW = gW;\n                            pH = p / pW;\n                        }\n                        else {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pH = gH;\n                            pW = p / pH;\n                        }\n                        childrenArea.push({\n                            x: pX,\n                            y: pY,\n                            width: pW,\n                            height: correctFloat(pH)\n                        });\n                        if (group.direction === 0) {\n                            plot.y = plot.y + pH;\n                        }\n                        else {\n                            plot.x = plot.x + pW;\n                        }\n                    }\n                    i = i + 1;\n                }\n                // Reset variables\n                group.reset();\n                if (group.direction === 0) {\n                    group.width = group.width - gW;\n                }\n                else {\n                    group.height = group.height - gH;\n                }\n                plot.y = plot.parent.y + (plot.parent.height - group.height);\n                plot.x = plot.parent.x + (plot.parent.width - group.width);\n                if (directionChange) {\n                    group.direction = 1 - group.direction;\n                }\n                // If not last, then add uncalculated element\n                if (!last) {\n                    group.addElement(keep);\n                }\n            };\n            TreemapSeries.prototype.algorithmFill = function (directionChange, parent, children) {\n                var childrenArea = [];\n                var pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                    var child = children_1[_i];\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    pX = x;\n                    pY = y;\n                    if (direction === 0) {\n                        pH = height;\n                        pW = pTot / pH;\n                        width = width - pW;\n                        x = x + pW;\n                    }\n                    else {\n                        pW = width;\n                        pH = pTot / pW;\n                        height = height - pH;\n                        y = y + pH;\n                    }\n                    childrenArea.push({\n                        x: pX,\n                        y: pY,\n                        width: pW,\n                        height: pH\n                    });\n                    if (directionChange) {\n                        direction = 1 - direction;\n                    }\n                }\n                return childrenArea;\n            };\n            TreemapSeries.prototype.algorithmLowAspectRatio = function (directionChange, parent, children) {\n                var series = this, childrenArea = [], plot = {\n                    x: parent.x,\n                    y: parent.y,\n                    parent: parent\n                }, direction = parent.direction, end = children.length - 1, group = new TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n                var pTot, i = 0;\n                // Loop through and calculate all areas\n                for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {\n                    var child = children_2[_i];\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    group.addElement(pTot);\n                    if (group.lP.nR > group.lP.lR) {\n                        series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                        );\n                    }\n                    // If last child, then calculate all remaining areas\n                    if (i === end) {\n                        series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                        );\n                    }\n                    ++i;\n                }\n                return childrenArea;\n            };\n            /**\n             * Over the alignment method by setting z index.\n             * @private\n             */\n            TreemapSeries.prototype.alignDataLabel = function (point, dataLabel, labelOptions) {\n                var style = labelOptions.style;\n                // #8160: Prevent the label from exceeding the point's\n                // boundaries in treemaps by applying ellipsis overflow.\n                // The issue was happening when datalabel's text contained a\n                // long sequence of characters without a whitespace.\n                if (style &&\n                    !defined(style.textOverflow) &&\n                    dataLabel.text &&\n                    dataLabel.getBBox().width > dataLabel.text.textWidth) {\n                    dataLabel.css({\n                        textOverflow: 'ellipsis',\n                        // unit (px) is required when useHTML is true\n                        width: style.width += 'px'\n                    });\n                }\n                ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n                if (point.dataLabel) {\n                    // point.node.zIndex could be undefined (#6956)\n                    point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n                }\n            };\n            /**\n             * Recursive function which calculates the area for all children of a\n             * node.\n             *\n             * @private\n             * @function Highcharts.Series#calculateChildrenAreas\n             *\n             * @param {Object} parent\n             * The node which is parent to the children.\n             *\n             * @param {Object} area\n             * The rectangular area of the parent.\n             */\n            TreemapSeries.prototype.calculateChildrenAreas = function (parent, area) {\n                var series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = pick((series[(level && level.layoutAlgorithm)] &&\n                    level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) { return !n.ignore; });\n                var childrenValues = [];\n                if (level && level.layoutStartingDirection) {\n                    area.direction = level.layoutStartingDirection === 'vertical' ?\n                        0 :\n                        1;\n                }\n                childrenValues = series[algorithm](area, children);\n                var i = -1;\n                for (var _i = 0, children_3 = children; _i < children_3.length; _i++) {\n                    var child = children_3[_i];\n                    var values = childrenValues[++i];\n                    child.values = merge(values, {\n                        val: child.childrenTotal,\n                        direction: (alternate ? 1 - area.direction : area.direction)\n                    });\n                    child.pointValues = merge(values, {\n                        x: (values.x / series.axisRatio),\n                        // Flip y-values to avoid visual regression with csvCoord in\n                        // Axis.translate at setPointValues. #12488\n                        y: axisMax - values.y - values.height,\n                        width: (values.width / series.axisRatio)\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        series.calculateChildrenAreas(child, child.values);\n                    }\n                }\n            };\n            /**\n             * Create level list.\n             * @private\n             */\n            TreemapSeries.prototype.createList = function (e) {\n                var chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n                if (breadcrumbs) {\n                    var currentLevelNumber = 0;\n                    list.push({\n                        level: currentLevelNumber,\n                        levelOptions: chart.series[0]\n                    });\n                    var node = e.target.nodeMap[e.newRootId];\n                    var extraNodes = [];\n                    // When the root node is set and has parent,\n                    // recreate the path from the node tree.\n                    while (node.parent || node.parent === '') {\n                        extraNodes.push(node);\n                        node = e.target.nodeMap[node.parent];\n                    }\n                    for (var _i = 0, _a = extraNodes.reverse(); _i < _a.length; _i++) {\n                        var node_1 = _a[_i];\n                        list.push({\n                            level: ++currentLevelNumber,\n                            levelOptions: node_1\n                        });\n                    }\n                    // If the list has only first element, we should clear it\n                    if (list.length <= 1) {\n                        list.length = 0;\n                    }\n                }\n                return list;\n            };\n            /**\n             * Extend drawDataLabels with logic to handle custom options related to\n             * the treemap series:\n             *\n             * - Points which is not a leaf node, has dataLabels disabled by\n             *   default.\n             *\n             * - Options set on series.levels is merged in.\n             *\n             * - Width of the dataLabel is set to match the width of the point\n             *   shape.\n             *\n             * @private\n             */\n            TreemapSeries.prototype.drawDataLabels = function () {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n                    return n.node.visible;\n                });\n                var options, level;\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If not a leaf, then label should be disabled as default\n                    if (!point.node.isLeaf) {\n                        options.enabled = false;\n                    }\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series.hasDataLabels = function () { return true; };\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                }\n                _super.prototype.drawDataLabels.call(this);\n            };\n            /**\n             * Override drawPoints\n             * @private\n             */\n            TreemapSeries.prototype.drawPoints = function (points) {\n                if (points === void 0) { points = this.points; }\n                var series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n                for (var _i = 0, points_2 = points; _i < points_2.length; _i++) {\n                    var point = points_2[_i];\n                    var levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n                    // Don't bother with calculate styling if the point is not drawn\n                    if (point.shouldDraw()) {\n                        point.isInside = true;\n                        if (borderRadius) {\n                            attribs.r = borderRadius;\n                        }\n                        merge(true, // Extend object\n                        // Which object to extend\n                        shouldAnimate ? animatableAttribs : attribs, \n                        // Add shapeArgs to animate/attr if graphic exists\n                        hasGraphic ? shapeArgs : {}, \n                        // Add style attribs if !styleMode\n                        styledMode ?\n                            {} :\n                            series.pointAttribs(point, point.selected ? 'select' : void 0));\n                        // In styled mode apply point.color. Use CSS, otherwise the\n                        // fill used in the style sheet will take precedence over\n                        // the fill attribute.\n                        if (series.colorAttribs && styledMode) {\n                            // Heatmap is loaded\n                            extend(css, series.colorAttribs(point));\n                        }\n                        if (!series[groupKey]) {\n                            series[groupKey] = renderer.g(groupKey)\n                                .attr({\n                                // @todo Set the zIndex based upon the number of\n                                // levels, instead of using 1000\n                                zIndex: 1000 - (levelDynamic || 0)\n                            })\n                                .add(series.group);\n                            series[groupKey].survive = true;\n                        }\n                    }\n                    // Draw the point\n                    point.draw({\n                        animatableAttribs: animatableAttribs,\n                        attribs: attribs,\n                        css: css,\n                        group: series[groupKey],\n                        imageUrl: point.imageUrl,\n                        renderer: renderer,\n                        shadow: shadow,\n                        shapeArgs: shapeArgs,\n                        shapeType: point.shapeType\n                    });\n                    // If setRootNode is allowed, set a point cursor on clickables &\n                    // add drillId to point\n                    if (allowTraversingTree && point.graphic) {\n                        point.drillId = options.interactByLeaf ?\n                            series.drillToByLeaf(point) :\n                            series.drillToByGroup(point);\n                    }\n                }\n            };\n            /**\n             * Finds the drill id for a parent node. Returns false if point should\n             * not have a click event.\n             * @private\n             */\n            TreemapSeries.prototype.drillToByGroup = function (point) {\n                var drillId = false;\n                if (!point.node.isLeaf &&\n                    (point.node.level - this.nodeMap[this.rootNode].level) === 1) {\n                    drillId = point.id;\n                }\n                return drillId;\n            };\n            /**\n             * Finds the drill id for a leaf node. Returns false if point should not\n             * have a click event\n             * @private\n             */\n            TreemapSeries.prototype.drillToByLeaf = function (point) {\n                var drillId = false, nodeParent;\n                if ((point.node.parent !== this.rootNode) &&\n                    point.node.isLeaf) {\n                    nodeParent = point.node;\n                    while (!drillId) {\n                        nodeParent = this.nodeMap[nodeParent.parent];\n                        if (nodeParent.parent === this.rootNode) {\n                            drillId = nodeParent.id;\n                        }\n                    }\n                }\n                return drillId;\n            };\n            /**\n             * @todo remove this function at a suitable version.\n             * @private\n             */\n            TreemapSeries.prototype.drillToNode = function (id, redraw) {\n                error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n                this.setRootNode(id, redraw);\n            };\n            TreemapSeries.prototype.drillUp = function () {\n                var series = this, node = series.nodeMap[series.rootNode];\n                if (node && isString(node.parent)) {\n                    series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n                }\n            };\n            TreemapSeries.prototype.getExtremes = function () {\n                // Get the extremes from the value data\n                var _a = _super.prototype.getExtremes.call(this, this.colorValueData), dataMin = _a.dataMin, dataMax = _a.dataMax;\n                this.valueMin = dataMin;\n                this.valueMax = dataMax;\n                // Get the extremes from the y data\n                return _super.prototype.getExtremes.call(this);\n            };\n            /**\n             * Creates an object map from parent id to childrens index.\n             *\n             * @private\n             * @function Highcharts.Series#getListOfParents\n             *\n             * @param {Highcharts.SeriesTreemapDataOptions} [data]\n             *        List of points set in options.\n             *\n             * @param {Array<string>} [existingIds]\n             *        List of all point ids.\n             *\n             * @return {Object}\n             *         Map from parent id to children index in data.\n             */\n            TreemapSeries.prototype.getListOfParents = function (data, existingIds) {\n                var arr = isArray(data) ? data : [], ids = isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n                    var parent = pick(curr.parent, '');\n                    if (typeof prev[parent] === 'undefined') {\n                        prev[parent] = [];\n                    }\n                    prev[parent].push(i);\n                    return prev;\n                }, {\n                    '': [] // Root of tree\n                });\n                // If parent does not exist, hoist parent to root of tree.\n                for (var _i = 0, _a = Object.keys(listOfParents); _i < _a.length; _i++) {\n                    var parent_1 = _a[_i];\n                    var children = listOfParents[parent_1];\n                    if ((parent_1 !== '') && (ids.indexOf(parent_1) === -1)) {\n                        for (var _b = 0, children_4 = children; _b < children_4.length; _b++) {\n                            var child = children_4[_b];\n                            listOfParents[''].push(child);\n                        }\n                        delete listOfParents[parent_1];\n                    }\n                }\n                return listOfParents;\n            };\n            /**\n             * Creates a tree structured object from the series points.\n             * @private\n             */\n            TreemapSeries.prototype.getTree = function () {\n                var series = this, allIds = this.data.map(function (d) {\n                    return d.id;\n                }), parentList = series.getListOfParents(this.data, allIds);\n                series.nodeMap = {};\n                series.nodeList = [];\n                return series.buildTree('', -1, 0, parentList);\n            };\n            TreemapSeries.prototype.buildTree = function (id, index, level, list, parent) {\n                var series = this, children = [], point = series.points[index];\n                var height = 0, child;\n                // Actions\n                for (var _i = 0, _a = (list[id] || []); _i < _a.length; _i++) {\n                    var i = _a[_i];\n                    child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n                    height = Math.max(child.height + 1, height);\n                    children.push(child);\n                }\n                var node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n                for (var _b = 0, children_5 = children; _b < children_5.length; _b++) {\n                    var child_1 = children_5[_b];\n                    child_1.parentNode = node;\n                }\n                series.nodeMap[node.id] = node;\n                series.nodeList.push(node);\n                if (point) {\n                    point.node = node;\n                    node.point = point;\n                }\n                return node;\n            };\n            /**\n             * Define hasData function for non-cartesian series. Returns true if the\n             * series has points at all.\n             * @private\n             */\n            TreemapSeries.prototype.hasData = function () {\n                return !!this.processedXData.length; // != 0\n            };\n            TreemapSeries.prototype.init = function (chart, options) {\n                var series = this, breadcrumbsOptions = merge(options.drillUpButton, options.breadcrumbs), setOptionsEvent = addEvent(series, 'setOptions', function (event) {\n                    var options = event.userOptions;\n                    if (defined(options.allowDrillToNode) &&\n                        !defined(options.allowTraversingTree)) {\n                        options.allowTraversingTree = options.allowDrillToNode;\n                        delete options.allowDrillToNode;\n                    }\n                    if (defined(options.drillUpButton) &&\n                        !defined(options.traverseUpButton)) {\n                        options.traverseUpButton = options.drillUpButton;\n                        delete options.drillUpButton;\n                    }\n                });\n                _super.prototype.init.call(this, chart, options);\n                // Treemap's opacity is a different option from other series\n                delete series.opacity;\n                // Handle deprecated options.\n                series.eventsToUnbind.push(setOptionsEvent);\n                if (series.options.allowTraversingTree) {\n                    series.eventsToUnbind.push(addEvent(series, 'click', series.onClickDrillToNode));\n                    series.eventsToUnbind.push(addEvent(series, 'setRootNode', function (e) {\n                        var chart = series.chart;\n                        if (chart.breadcrumbs) {\n                            // Create a list using the event after drilldown.\n                            chart.breadcrumbs.updateProperties(series.createList(e));\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'update', function (e, redraw) {\n                        var breadcrumbs = this.chart.breadcrumbs;\n                        if (breadcrumbs && e.options.breadcrumbs) {\n                            breadcrumbs.update(e.options.breadcrumbs);\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'destroy', function destroyEvents(e) {\n                        var chart = this.chart;\n                        if (chart.breadcrumbs && !e.keepEventsForUpdate) {\n                            chart.breadcrumbs.destroy();\n                            chart.breadcrumbs = void 0;\n                        }\n                    }));\n                }\n                if (!chart.breadcrumbs) {\n                    chart.breadcrumbs = new Breadcrumbs(chart, breadcrumbsOptions);\n                }\n                series.eventsToUnbind.push(addEvent(chart.breadcrumbs, 'up', function (e) {\n                    var drillUpsNumber = this.level - e.newLevel;\n                    for (var i = 0; i < drillUpsNumber; i++) {\n                        series.drillUp();\n                    }\n                }));\n            };\n            /**\n             * Add drilling on the suitable points.\n             * @private\n             */\n            TreemapSeries.prototype.onClickDrillToNode = function (event) {\n                var series = this, point = event.point, drillId = point && point.drillId;\n                // If a drill id is returned, add click event and cursor.\n                if (isString(drillId)) {\n                    point.setState(''); // Remove hover\n                    series.setRootNode(drillId, true, { trigger: 'click' });\n                }\n            };\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            TreemapSeries.prototype.pointAttribs = function (point, state) {\n                var series = this, mapOptionsToLevel = (isObject(series.mapOptionsToLevel) ?\n                    series.mapOptionsToLevel :\n                    {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', \n                // Set attributes by precedence. Point trumps level trumps series.\n                // Stroke width uses pick because it can be 0.\n                attr = {\n                    'stroke': (point && point.borderColor) ||\n                        level.borderColor ||\n                        stateOptions.borderColor ||\n                        options.borderColor,\n                    'stroke-width': pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n                    'dashstyle': (point && point.borderDashStyle) ||\n                        level.borderDashStyle ||\n                        stateOptions.borderDashStyle ||\n                        options.borderDashStyle,\n                    'fill': (point && point.color) || this.color\n                };\n                var opacity;\n                // Hide levels above the current view\n                if (className.indexOf('highcharts-above-level') !== -1) {\n                    attr.fill = 'none';\n                    attr['stroke-width'] = 0;\n                    // Nodes with children that accept interaction\n                }\n                else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n                    opacity = pick(stateOptions.opacity, options.opacity);\n                    attr.fill = color(attr.fill).setOpacity(opacity).get();\n                    attr.cursor = 'pointer';\n                    // Hide nodes that have children\n                }\n                else if (className.indexOf('highcharts-internal-node') !== -1) {\n                    attr.fill = 'none';\n                }\n                else if (state) {\n                    // Brighten and hoist the hover nodes\n                    attr.fill = color(attr.fill)\n                        .brighten(stateOptions.brightness)\n                        .get();\n                }\n                return attr;\n            };\n            /**\n             * Set the node's color recursively, from the parent down.\n             * @private\n             */\n            TreemapSeries.prototype.setColorRecursive = function (node, parentColor, colorIndex, index, siblings) {\n                var series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors;\n                if (node) {\n                    var colorInfo = getColor(node, {\n                        colors: colors,\n                        index: index,\n                        mapOptionsToLevel: series.mapOptionsToLevel,\n                        parentColor: parentColor,\n                        parentColorIndex: colorIndex,\n                        series: series,\n                        siblings: siblings\n                    }), point = series.points[node.i];\n                    if (point) {\n                        point.color = colorInfo.color;\n                        point.colorIndex = colorInfo.colorIndex;\n                    }\n                    var i = -1;\n                    // Do it all again with the children\n                    for (var _i = 0, _a = (node.children || []); _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, ++i, node.children.length);\n                    }\n                }\n            };\n            TreemapSeries.prototype.setPointValues = function () {\n                var series = this;\n                var points = series.points, xAxis = series.xAxis, yAxis = series.yAxis;\n                var styledMode = series.chart.styledMode;\n                // Get the crisp correction in classic mode. For this to work in\n                // styled mode, we would need to first add the shape (without x,\n                // y, width and height), then read the rendered stroke width\n                // using point.graphic.strokeWidth(), then modify and apply the\n                // shapeArgs. This applies also to column series, but the\n                // downside is performance and code complexity.\n                var getCrispCorrection = function (point) { return (styledMode ?\n                    0 :\n                    ((series.pointAttribs(point)['stroke-width'] || 0) % 2) / 2); };\n                for (var _i = 0, points_3 = points; _i < points_3.length; _i++) {\n                    var point = points_3[_i];\n                    var _a = point.node, values = _a.pointValues, visible = _a.visible;\n                    // Points which is ignored, have no values.\n                    if (values && visible) {\n                        var height = values.height, width = values.width, x = values.x, y = values.y;\n                        var crispCorr = getCrispCorrection(point);\n                        var x1 = Math.round(xAxis.toPixels(x, true)) - crispCorr;\n                        var x2 = Math.round(xAxis.toPixels(x + width, true)) - crispCorr;\n                        var y1 = Math.round(yAxis.toPixels(y, true)) - crispCorr;\n                        var y2 = Math.round(yAxis.toPixels(y + height, true)) - crispCorr;\n                        // Set point values\n                        var shapeArgs = {\n                            x: Math.min(x1, x2),\n                            y: Math.min(y1, y2),\n                            width: Math.abs(x2 - x1),\n                            height: Math.abs(y2 - y1)\n                        };\n                        point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                        point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                        point.shapeArgs = shapeArgs;\n                    }\n                    else {\n                        // Reset visibility\n                        delete point.plotX;\n                        delete point.plotY;\n                    }\n                }\n            };\n            /**\n             * Sets a new root node for the series.\n             *\n             * @private\n             * @function Highcharts.Series#setRootNode\n             *\n             * @param {string} id\n             * The id of the new root node.\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or not.\n             *\n             * @param {Object} [eventArguments]\n             * Arguments to be accessed in event handler.\n             *\n             * @param {string} [eventArguments.newRootId]\n             * Id of the new root.\n             *\n             * @param {string} [eventArguments.previousRootId]\n             * Id of the previous root.\n             *\n             * @param {boolean} [eventArguments.redraw]\n             * Whether to redraw the chart after.\n             *\n             * @param {Object} [eventArguments.series]\n             * The series to update the root of.\n             *\n             * @param {string} [eventArguments.trigger]\n             * The action which triggered the event. Undefined if the setRootNode is\n             * called directly.\n             *\n             * @emits Highcharts.Series#event:setRootNode\n             */\n            TreemapSeries.prototype.setRootNode = function (id, redraw, eventArguments) {\n                var series = this, eventArgs = extend({\n                    newRootId: id,\n                    previousRootId: series.rootNode,\n                    redraw: pick(redraw, true),\n                    series: series\n                }, eventArguments);\n                /**\n                 * The default functionality of the setRootNode event.\n                 *\n                 * @private\n                 * @param {Object} args The event arguments.\n                 * @param {string} args.newRootId Id of the new root.\n                 * @param {string} args.previousRootId Id of the previous root.\n                 * @param {boolean} args.redraw Whether to redraw the chart after.\n                 * @param {Object} args.series The series to update the root of.\n                 * @param {string} [args.trigger=undefined] The action which\n                 * triggered the event. Undefined if the setRootNode is called\n                 * directly.\n                     */\n                var defaultFn = function (args) {\n                    var series = args.series;\n                    // Store previous and new root ids on the series.\n                    series.idPreviousRoot = args.previousRootId;\n                    series.rootNode = args.newRootId;\n                    // Redraw the chart\n                    series.isDirty = true; // Force redraw\n                    if (args.redraw) {\n                        series.chart.redraw();\n                    }\n                };\n                // Fire setRootNode event.\n                fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n            };\n            /**\n             * Workaround for `inactive` state. Since `series.opacity` option is\n             * already reserved, don't use that state at all by disabling\n             * `inactiveOtherPoints` and not inheriting states by points.\n             * @private\n             */\n            TreemapSeries.prototype.setState = function (state) {\n                this.options.inactiveOtherPoints = true;\n                _super.prototype.setState.call(this, state, false);\n                this.options.inactiveOtherPoints = false;\n            };\n            TreemapSeries.prototype.setTreeValues = function (tree) {\n                var series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (typeof options.levelIsConstant === 'boolean' ?\n                    options.levelIsConstant :\n                    true), children = [], point = series.points[tree.i];\n                // First give the children some values\n                var childrenTotal = 0;\n                for (var _i = 0, _a = tree.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    child = series.setTreeValues(child);\n                    children.push(child);\n                    if (!child.ignore) {\n                        childrenTotal += child.val;\n                    }\n                }\n                // Sort the children\n                stableSort(children, function (a, b) { return ((a.sortIndex || 0) - (b.sortIndex || 0)); });\n                // Set the values\n                var val = pick(point && point.options.value, childrenTotal);\n                if (point) {\n                    point.value = val;\n                }\n                extend(tree, {\n                    children: children,\n                    childrenTotal: childrenTotal,\n                    // Ignore this node if point is not visible\n                    ignore: !(pick(point && point.visible, true) && (val > 0)),\n                    isLeaf: tree.visible && !childrenTotal,\n                    levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n                    name: pick(point && point.name, ''),\n                    sortIndex: pick(point && point.sortIndex, -val),\n                    val: val\n                });\n                return tree;\n            };\n            TreemapSeries.prototype.sliceAndDice = function (parent, children) {\n                return this.algorithmFill(true, parent, children);\n            };\n            TreemapSeries.prototype.squarified = function (parent, children) {\n                return this.algorithmLowAspectRatio(true, parent, children);\n            };\n            TreemapSeries.prototype.strip = function (parent, children) {\n                return this.algorithmLowAspectRatio(false, parent, children);\n            };\n            TreemapSeries.prototype.stripes = function (parent, children) {\n                return this.algorithmFill(false, parent, children);\n            };\n            TreemapSeries.prototype.translate = function () {\n                var series = this, options = series.options;\n                var // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series), rootNode, pointValues, seriesArea, val;\n                // Call prototype function\n                _super.prototype.translate.call(this);\n                // @todo Only if series.isDirtyData is true\n                var tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' &&\n                    (!rootNode || !rootNode.children.length)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                // Parents of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode], function (node) {\n                    var p = node.parent;\n                    var next = false;\n                    node.visible = true;\n                    if (p || p === '') {\n                        next = series.nodeMap[p];\n                    }\n                    return next;\n                });\n                // Children of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, function (children) {\n                    var next = false;\n                    for (var _i = 0, children_6 = children; _i < children_6.length; _i++) {\n                        var child = children_6[_i];\n                        child.visible = true;\n                        if (child.children.length) {\n                            next = (next || []).concat(child.children);\n                        }\n                    }\n                    return next;\n                });\n                series.setTreeValues(tree);\n                // Calculate plotting values.\n                series.axisRatio = (series.xAxis.len / series.yAxis.len);\n                series.nodeMap[''].pointValues = pointValues = {\n                    x: 0,\n                    y: 0,\n                    width: axisMax,\n                    height: axisMax\n                };\n                series.nodeMap[''].values = seriesArea = merge(pointValues, {\n                    width: (pointValues.width * series.axisRatio),\n                    direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n                    val: tree.val\n                });\n                series.calculateChildrenAreas(tree, seriesArea);\n                // Logic for point colors\n                if (!series.colorAxis &&\n                    !options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n                // Update axis extremes according to the root node.\n                if (options.allowTraversingTree) {\n                    val = rootNode.pointValues;\n                    series.xAxis.setExtremes(val.x, val.x + val.width, false);\n                    series.yAxis.setExtremes(val.y, val.y + val.height, false);\n                    series.xAxis.setScale();\n                    series.yAxis.setScale();\n                }\n                // Assign values to points.\n                series.setPointValues();\n            };\n            TreemapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, TreemapSeriesDefaults);\n            return TreemapSeries;\n        }(ScatterSeries));\n        extend(TreemapSeries.prototype, {\n            buildKDTree: noop,\n            colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n            colorKey: 'colorValue',\n            directTouch: true,\n            getExtremesFromAll: true,\n            getSymbol: noop,\n            optionalAxis: 'colorAxis',\n            parallelArrays: ['x', 'y', 'value', 'colorValue'],\n            pointArrayMap: ['value'],\n            pointClass: TreemapPoint,\n            NodeClass: TreemapNode,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            utils: TreemapUtilities\n        });\n        ColorMapComposition.compose(TreemapSeries);\n        SeriesRegistry.registerSeriesType('treemap', TreemapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeries;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var Point = SeriesRegistry.series.prototype.pointClass, TreemapPoint = SeriesRegistry.seriesTypes.treemap.prototype.pointClass;\n        var correctFloat = U.correctFloat, extend = U.extend, pInt = U.pInt;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstPoint = /** @class */ (function (_super) {\n            __extends(SunburstPoint, _super);\n            function SunburstPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.node = void 0;\n                _this.options = void 0;\n                _this.series = void 0;\n                _this.shapeExisting = void 0;\n                _this.shapeType = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SunburstPoint.prototype.getDataLabelPath = function (label) {\n                var _a;\n                var renderer = this.series.chart.renderer, shapeArgs = this.shapeExisting, r = shapeArgs.r + pInt(((_a = label.options) === null || _a === void 0 ? void 0 : _a.distance) || 0);\n                var start = shapeArgs.start, end = shapeArgs.end;\n                var angle = start + (end - start) / 2; // arc middle value\n                var upperHalf = angle < 0 &&\n                    angle > -Math.PI ||\n                    angle > Math.PI, moreThanHalf;\n                // Check if point is a full circle\n                if (start === -Math.PI / 2 &&\n                    correctFloat(end) === correctFloat(Math.PI * 1.5)) {\n                    start = -Math.PI + Math.PI / 360;\n                    end = -Math.PI / 360;\n                    upperHalf = true;\n                }\n                // Check if dataLabels should be render in the upper half of the circle\n                if (end - start > Math.PI) {\n                    upperHalf = false;\n                    moreThanHalf = true;\n                    // Close to the full circle, add some padding so that the SVG\n                    // renderer treats it as separate points (#18884).\n                    if ((end - start) > 2 * Math.PI - 0.01) {\n                        start += 0.01;\n                        end -= 0.01;\n                    }\n                }\n                if (this.dataLabelPath) {\n                    this.dataLabelPath = this.dataLabelPath.destroy();\n                }\n                // All times\n                this.dataLabelPath = renderer\n                    .arc({\n                    open: true,\n                    longArc: moreThanHalf ? 1 : 0\n                })\n                    .attr({\n                    start: (upperHalf ? start : end),\n                    end: (upperHalf ? end : start),\n                    clockwise: +upperHalf,\n                    x: shapeArgs.x,\n                    y: shapeArgs.y,\n                    r: (r + shapeArgs.innerR) / 2\n                })\n                    .add(renderer.defs);\n                return this.dataLabelPath;\n            };\n            SunburstPoint.prototype.isValid = function () {\n                return true;\n            };\n            return SunburstPoint;\n        }(TreemapPoint));\n        extend(SunburstPoint.prototype, {\n            getClassName: Point.prototype.getClassName,\n            haloPath: Point.prototype.haloPath,\n            setState: Point.prototype.setState\n        });\n        /* *\n         *\n         *  Defaul Export\n         *\n         * */\n\n        return SunburstPoint;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstUtilities.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var TreemapSeries = SeriesRegistry.seriesTypes.treemap;\n        var isNumber = U.isNumber, isObject = U.isObject, merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         * @function calculateLevelSizes\n         *\n         * @param {Object} levelOptions\n         * Map of level to its options.\n         *\n         * @param {Highcharts.Dictionary<number>} params\n         * Object containing number parameters `innerRadius` and `outerRadius`.\n         *\n         * @return {Highcharts.SunburstSeriesLevelsOptions|undefined}\n         * Returns the modified options, or undefined.\n         */\n        function calculateLevelSizes(levelOptions, params) {\n            var p = isObject(params) ? params : {};\n            var result, totalWeight = 0, diffRadius, levels, levelsNotIncluded, remainingSize, from, to;\n            if (isObject(levelOptions)) {\n                result = merge({}, levelOptions);\n                from = isNumber(p.from) ? p.from : 0;\n                to = isNumber(p.to) ? p.to : 0;\n                levels = range(from, to);\n                levelsNotIncluded = Object.keys(result).filter(function (key) { return (levels.indexOf(+key) === -1); });\n                diffRadius = remainingSize = isNumber(p.diffRadius) ?\n                    p.diffRadius : 0;\n                // Convert percentage to pixels.\n                // Calculate the remaining size to divide between \"weight\" levels.\n                // Calculate total weight to use in convertion from weight to\n                // pixels.\n                for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {\n                    var level = levels_1[_i];\n                    var options = result[level], unit = options.levelSize.unit, value = options.levelSize.value;\n                    if (unit === 'weight') {\n                        totalWeight += value;\n                    }\n                    else if (unit === 'percentage') {\n                        options.levelSize = {\n                            unit: 'pixels',\n                            value: (value / 100) * diffRadius\n                        };\n                        remainingSize -= options.levelSize.value;\n                    }\n                    else if (unit === 'pixels') {\n                        remainingSize -= value;\n                    }\n                }\n                // Convert weight to pixels.\n                for (var _a = 0, levels_2 = levels; _a < levels_2.length; _a++) {\n                    var level = levels_2[_a];\n                    var options = result[level];\n                    if (options.levelSize.unit === 'weight') {\n                        var weight = options.levelSize.value;\n                        result[level].levelSize = {\n                            unit: 'pixels',\n                            value: (weight / totalWeight) * remainingSize\n                        };\n                    }\n                }\n                // Set all levels not included in interval [from,to] to have 0\n                // pixels.\n                for (var _b = 0, levelsNotIncluded_1 = levelsNotIncluded; _b < levelsNotIncluded_1.length; _b++) {\n                    var level = levelsNotIncluded_1[_b];\n                    result[level].levelSize = {\n                        value: 0,\n                        unit: 'pixels'\n                    };\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function getLevelFromAndTo(_a) {\n            var level = _a.level, height = _a.height;\n            //  Never displays level below 1\n            var from = level > 0 ? level : 1;\n            var to = level + height;\n            return { from: from, to: to };\n        }\n        /**\n         * TODO introduce step, which should default to 1.\n         * @private\n         */\n        function range(from, to) {\n            var result = [];\n            if (isNumber(from) && isNumber(to) && from <= to) {\n                for (var i = from; i <= to; i++) {\n                    result.push(i);\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SunburstUtilities = {\n            calculateLevelSizes: calculateLevelSizes,\n            getLevelFromAndTo: getLevelFromAndTo,\n            range: range,\n            recursive: TreemapSeries.prototype.utils.recursive\n        };\n\n        return SunburstUtilities;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstNode.js', [_modules['Series/Treemap/TreemapNode.js']], function (TreemapNode) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstNode = /** @class */ (function (_super) {\n            __extends(SunburstNode, _super);\n            function SunburstNode() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return SunburstNode;\n        }(TreemapNode));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstNode;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Sunburst displays hierarchical data, where a level in the hierarchy is\n         * represented by a circle. The center represents the root node of the tree.\n         * The visualization bears a resemblance to both treemap and pie charts.\n         *\n         * @sample highcharts/demo/sunburst\n         *         Sunburst chart\n         *\n         * @extends      plotOptions.pie\n         * @excluding    allAreas, clip, colorAxis, colorKey, compare, compareBase,\n         *               dataGrouping, depth, dragDrop, endAngle, gapSize, gapUnit,\n         *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n         *               minSize, navigatorOptions, pointRange\n         * @product      highcharts\n         * @requires     modules/sunburst.js\n         * @optionparent plotOptions.sunburst\n         *\n         * @private\n         */\n        var SunburstSeriesDefaults = {\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @optionparent plotOptions.sunburst.breadcrumbs\n             */\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {Array<*>}\n             * @apioption plotOptions.sunburst.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @apioption plotOptions.sunburst.levels.borderColor\n             */\n            /**\n             * Can set a `borderWidth` on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.borderWidth\n             */\n            /**\n             * Can set a `borderDashStyle` on all points which lies on the same\n             * level.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @apioption plotOptions.sunburst.levels.borderDashStyle\n             */\n            /**\n             * Can set a `color` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.sunburst.levels.color\n             */\n            /**\n             * Determines whether the chart should receive one color per point based\n             * on this level.\n             *\n             * @type      {boolean}\n             * @apioption plotOptions.sunburst.levels.colorByPoint\n             */\n            /**\n             * Can set a `colorVariation` on all points which lies on the same\n             * level.\n             *\n             * @apioption plotOptions.sunburst.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type      {string}\n             * @apioption plotOptions.sunburst.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.colorVariation.to\n             */\n            /**\n             * Can set `dataLabels` on all points which lies on the same level.\n             *\n             * @extends   plotOptions.sunburst.dataLabels\n             * @apioption plotOptions.sunburst.levels.dataLabels\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.level\n             */\n            /**\n             * Can set a `levelSize` on all points which lies on the same level.\n             *\n             * @type      {Object}\n             * @apioption plotOptions.sunburst.levels.levelSize\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.sunburst.allowTraversingTree).\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     7.0.3\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowTraversingTree\n             */\n            /**\n             * The center of the sunburst chart relative to the plot area. Can be\n             * percentages or pixel values.\n             *\n             * @sample {highcharts} highcharts/plotoptions/pie-center/\n             *         Centered at 100, 100\n             *\n             * @type    {Array<number|string>}\n             * @default [\"50%\", \"50%\"]\n             * @product highcharts\n             *\n             * @private\n             */\n            center: ['50%', '50%'],\n            /**\n             * @product highcharts\n             *\n             * @private\n             */\n            clip: false,\n            colorByPoint: false,\n            /**\n             * Disable inherited opacity from Treemap series.\n             *\n             * @ignore-option\n             *\n             * @private\n             */\n            opacity: 1,\n            /**\n             * @declare Highcharts.SeriesSunburstDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                allowOverlap: true,\n                defer: true,\n                /**\n                 * Decides how the data label will be rotated relative to the\n                 * perimeter of the sunburst. Valid values are `circular`, `auto`,\n                 * `parallel` and `perpendicular`. When `circular`, the best fit\n                 * will be computed for the point, so that the label is curved\n                 * around the center when there is room for it, otherwise\n                 * perpendicular. The legacy `auto` option works similiar to\n                 * `circular`, but instead of curving the labels they are tangent to\n                 * the perimiter.\n                 *\n                 * The `rotation` option takes precedence over `rotationMode`.\n                 *\n                 * @type       {string}\n                 * @sample {highcharts}\n                 *         highcharts/plotoptions/sunburst-datalabels-rotationmode-circular/\n                 *         Circular rotation mode\n                 * @validvalue [\"auto\", \"perpendicular\", \"parallel\", \"circular\"]\n                 * @since      6.0.0\n                 */\n                rotationMode: 'circular',\n                style: {\n                    /** @internal */\n                    textOverflow: 'ellipsis'\n                }\n            },\n            /**\n             * Which point to use as a root in the visualization.\n             *\n             * @type {string}\n             *\n             * @private\n             */\n            rootId: void 0,\n            /**\n             * Used together with the levels and `allowDrillToNode` options. When\n             * set to false the first level visible when drilling is considered\n             * to be level one. Otherwise the level will be the same as the tree\n             * structure.\n             *\n             * @private\n             */\n            levelIsConstant: true,\n            /**\n             * Determines the width of the ring per level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n             *         Sunburst with various sizes per level\n             *\n             * @since 6.0.5\n             *\n             * @private\n             */\n            levelSize: {\n                /**\n                 * The value used for calculating the width of the ring. Its' affect\n                 * is determined by `levelSize.unit`.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 */\n                value: 1,\n                /**\n                 * How to interpret `levelSize.value`.\n                 *\n                 * - `percentage` gives a width relative to result of outer radius\n                 *   minus inner radius.\n                 *\n                 * - `pixels` gives the ring a fixed width in pixels.\n                 *\n                 * - `weight` takes the remaining width after percentage and pixels,\n                 *   and distributes it accross all \"weighted\" levels. The value\n                 *   relative to the sum of all weights determines the width.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 *\n                 * @validvalue [\"percentage\", \"pixels\", \"weight\"]\n                 */\n                unit: 'weight'\n            },\n            /**\n             * Options for the button appearing when traversing down in a sunburst.\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @extends   plotOptions.treemap.traverseUpButton\n             * @since     6.0.0\n             * @deprecated\n             * @apioption plotOptions.sunburst.traverseUpButton\n             *\n             */\n            /**\n             * If a point is sliced, moved out from the center, how many pixels\n             * should it be moved?.\n             *\n             * @sample highcharts/plotoptions/sunburst-sliced\n             *         Sliced sunburst\n             *\n             * @since 6.0.4\n             *\n             * @private\n             */\n            slicedOffset: 10\n        };\n        /**\n         * A `sunburst` series. If the [type](#series.sunburst.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sunburst\n         * @excluding dataParser, dataURL, stack, dataSorting, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  modules/sunburst.js\n         * @apioption series.sunburst\n         */\n        /**\n         * @type      {Array<number|null|*>}\n         * @extends   series.treemap.data\n         * @excluding x, y\n         * @product   highcharts\n         * @apioption series.sunburst.data\n         */\n        /**\n         * @type      {Highcharts.SeriesSunburstDataLabelsOptionsObject|Array<Highcharts.SeriesSunburstDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.sunburst.data.dataLabels\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the sunburst.\n         *\n         * @type      {number|null}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.value\n         */\n        /**\n         * Use this option to build a tree structure. The value should be the id of the\n         * point which is the parent. If no points has a matching id, or this option is\n         * undefined, then the parent will be set to the root.\n         *\n         * @type      {string}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.parent\n         */\n        /**\n          * Whether to display a slice offset from the center. When a sunburst point is\n          * sliced, its children are also offset.\n          *\n          * @sample highcharts/plotoptions/sunburst-sliced\n          *         Sliced sunburst\n          *\n          * @type      {boolean}\n          * @default   false\n          * @since     6.0.4\n          * @product   highcharts\n          * @apioption series.sunburst.data.sliced\n          */\n        ''; // detach doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeries.js', [_modules['Series/CenteredUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Sunburst/SunburstPoint.js'], _modules['Series/Sunburst/SunburstUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js'], _modules['Series/Sunburst/SunburstNode.js'], _modules['Series/Sunburst/SunburstSeriesDefaults.js']], function (CU, H, SeriesRegistry, SunburstPoint, SunburstUtilities, TU, U, SunburstNode, SunburstSeriesDefaults) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var getCenter = CU.getCenter, getStartAndEndRadians = CU.getStartAndEndRadians;\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, TreemapSeries = _a.treemap;\n        var getColor = TU.getColor, getLevelOptions = TU.getLevelOptions, setTreeValues = TU.setTreeValues, updateRootId = TU.updateRootId;\n        var defined = U.defined, error = U.error, extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString, merge = U.merge, splat = U.splat;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var rad2deg = 180 / Math.PI;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function isBoolean(x) {\n            return typeof x === 'boolean';\n        }\n        /**\n         * Find a set of coordinates given a start coordinates, an angle, and a\n         * distance.\n         *\n         * @private\n         * @function getEndPoint\n         *\n         * @param {number} x\n         *        Start coordinate x\n         *\n         * @param {number} y\n         *        Start coordinate y\n         *\n         * @param {number} angle\n         *        Angle in radians\n         *\n         * @param {number} distance\n         *        Distance from start to end coordinates\n         *\n         * @return {Highcharts.SVGAttributes}\n         *         Returns the end coordinates, x and y.\n         */\n        var getEndPoint = function getEndPoint(x, y, angle, distance) {\n            return {\n                x: x + (Math.cos(angle) * distance),\n                y: y + (Math.sin(angle) * distance)\n            };\n        };\n        /** @private */\n        function getDlOptions(params) {\n            // Set options to new object to avoid problems with scope\n            var point = params.point, shape = isObject(params.shapeArgs) ? params.shapeArgs : {}, optionsPoint = (isObject(params.optionsPoint) ?\n                params.optionsPoint.dataLabels :\n                {}), \n            // The splat was used because levels dataLabels\n            // options doesn't work as an array\n            optionsLevel = splat(isObject(params.level) ?\n                params.level.dataLabels :\n                {})[0], options = merge({\n                style: {}\n            }, optionsLevel, optionsPoint);\n            var rotationRad, rotation, rotationMode = options.rotationMode;\n            if (!isNumber(options.rotation)) {\n                if (rotationMode === 'auto' || rotationMode === 'circular') {\n                    if (options.useHTML &&\n                        rotationMode === 'circular') {\n                        // Change rotationMode to 'auto' to avoid using text paths\n                        // for HTML labels, see #18953\n                        rotationMode = 'auto';\n                    }\n                    if (point.innerArcLength < 1 &&\n                        point.outerArcLength > shape.radius) {\n                        rotationRad = 0;\n                        // Trigger setTextPath function to get textOutline etc.\n                        if (point.dataLabelPath && rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true\n                            };\n                        }\n                    }\n                    else if (point.innerArcLength > 1 &&\n                        point.outerArcLength > 1.5 * shape.radius) {\n                        if (rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true,\n                                attributes: {\n                                    dy: 5\n                                }\n                            };\n                        }\n                        else {\n                            rotationMode = 'parallel';\n                        }\n                    }\n                    else {\n                        // Trigger the destroyTextPath function\n                        if (point.dataLabel &&\n                            point.dataLabel.textPath &&\n                            rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: false\n                            };\n                        }\n                        rotationMode = 'perpendicular';\n                    }\n                }\n                if (rotationMode !== 'auto' && rotationMode !== 'circular') {\n                    if (point.dataLabel && point.dataLabel.textPath) {\n                        options.textPath = {\n                            enabled: false\n                        };\n                    }\n                    rotationRad = (shape.end -\n                        (shape.end - shape.start) / 2);\n                }\n                if (rotationMode === 'parallel') {\n                    options.style.width = Math.min(shape.radius * 2.5, (point.outerArcLength + point.innerArcLength) / 2);\n                }\n                else {\n                    if (!defined(options.style.width) &&\n                        shape.radius) {\n                        options.style.width = point.node.level === 1 ?\n                            2 * shape.radius :\n                            shape.radius;\n                    }\n                }\n                if (rotationMode === 'perpendicular' &&\n                    // 16 is the inferred line height. We don't know the real line\n                    // yet because the label is not rendered. A better approach for this\n                    // would be to hide the label from the `alignDataLabel` function\n                    // when the actual line height is known.\n                    point.outerArcLength < 16) {\n                    options.style.width = 1;\n                }\n                // Apply padding (#8515)\n                options.style.width = Math.max(options.style.width - 2 * (options.padding || 0), 1);\n                rotation = (rotationRad * rad2deg) % 180;\n                if (rotationMode === 'parallel') {\n                    rotation -= 90;\n                }\n                // Prevent text from rotating upside down\n                if (rotation > 90) {\n                    rotation -= 180;\n                }\n                else if (rotation < -90) {\n                    rotation += 180;\n                }\n                options.rotation = rotation;\n            }\n            if (options.textPath) {\n                if (point.shapeExisting.innerR === 0 &&\n                    options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Center dataLabel - disable textPath\n                    options.textPath.enabled = false;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.shapeExisting.r * 2) -\n                        2 * (options.padding || 0), 1);\n                }\n                else if (point.dlOptions &&\n                    point.dlOptions.textPath &&\n                    !point.dlOptions.textPath.enabled &&\n                    (rotationMode === 'circular')) {\n                    // Bring dataLabel back if was a center dataLabel\n                    options.textPath.enabled = true;\n                }\n                if (options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.outerArcLength +\n                        point.innerArcLength) / 2 -\n                        2 * (options.padding || 0), 1);\n                }\n            }\n            // NOTE: alignDataLabel positions the data label differntly when rotation is\n            // 0. Avoiding this by setting rotation to a small number.\n            if (options.rotation === 0) {\n                options.rotation = 0.001;\n            }\n            return options;\n        }\n        /** @private */\n        function getAnimation(shape, params) {\n            var point = params.point, radians = params.radians, innerR = params.innerR, idRoot = params.idRoot, idPreviousRoot = params.idPreviousRoot, shapeExisting = params.shapeExisting, shapeRoot = params.shapeRoot, shapePreviousRoot = params.shapePreviousRoot, visible = params.visible;\n            var from = {}, to = {\n                end: shape.end,\n                start: shape.start,\n                innerR: shape.innerR,\n                r: shape.r,\n                x: shape.x,\n                y: shape.y\n            };\n            if (visible) {\n                // Animate points in\n                if (!point.graphic && shapePreviousRoot) {\n                    if (idRoot === point.id) {\n                        from = {\n                            start: radians.start,\n                            end: radians.end\n                        };\n                    }\n                    else {\n                        from = (shapePreviousRoot.end <= shape.start) ? {\n                            start: radians.end,\n                            end: radians.end\n                        } : {\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                    // Animate from center and outwards.\n                    from.innerR = from.r = innerR;\n                }\n            }\n            else {\n                // Animate points out\n                if (point.graphic) {\n                    if (idPreviousRoot === point.id) {\n                        to = {\n                            innerR: innerR,\n                            r: innerR\n                        };\n                    }\n                    else if (shapeRoot) {\n                        to = (shapeRoot.end <= shapeExisting.start) ?\n                            {\n                                innerR: innerR,\n                                r: innerR,\n                                start: radians.end,\n                                end: radians.end\n                            } : {\n                            innerR: innerR,\n                            r: innerR,\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                }\n            }\n            return {\n                from: from,\n                to: to\n            };\n        }\n        /** @private */\n        function getDrillId(point, idRoot, mapIdToNode) {\n            var node = point.node;\n            var drillId, nodeRoot;\n            if (!node.isLeaf) {\n                // When it is the root node, the drillId should be set to parent.\n                if (idRoot === point.id) {\n                    nodeRoot = mapIdToNode[idRoot];\n                    drillId = nodeRoot.parent;\n                }\n                else {\n                    drillId = point.id;\n                }\n            }\n            return drillId;\n        }\n        /** @private */\n        function cbSetTreeValuesBefore(node, options) {\n            var mapIdToNode = options.mapIdToNode, parent = node.parent, nodeParent = parent ? mapIdToNode[parent] : void 0, series = options.series, chart = series.chart, points = series.points, point = points[node.i], colors = series.options.colors || chart && chart.options.colors, colorInfo = getColor(node, {\n                colors: colors,\n                colorIndex: series.colorIndex,\n                index: options.index,\n                mapOptionsToLevel: options.mapOptionsToLevel,\n                parentColor: nodeParent && nodeParent.color,\n                parentColorIndex: nodeParent && nodeParent.colorIndex,\n                series: options.series,\n                siblings: options.siblings\n            });\n            node.color = colorInfo.color;\n            node.colorIndex = colorInfo.colorIndex;\n            if (point) {\n                point.color = node.color;\n                point.colorIndex = node.colorIndex;\n                // Set slicing on node, but avoid slicing the top node.\n                node.sliced = (node.id !== options.idRoot) ? point.sliced : false;\n            }\n            return node;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstSeries = /** @class */ (function (_super) {\n            __extends(SunburstSeries, _super);\n            function SunburstSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.center = void 0;\n                _this.data = void 0;\n                _this.mapOptionsToLevel = void 0;\n                _this.nodeMap = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.shapeRoot = void 0;\n                _this.startAndEndRadians = void 0;\n                _this.tree = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SunburstSeries.prototype.alignDataLabel = function (point, dataLabel, labelOptions) {\n                if (labelOptions.textPath && labelOptions.textPath.enabled) {\n                    return;\n                }\n                return _super.prototype.alignDataLabel.call(this, point, dataLabel, labelOptions);\n            };\n            /**\n             * Animate the slices in. Similar to the animation of polar charts.\n             * @private\n             */\n            SunburstSeries.prototype.animate = function (init) {\n                var chart = this.chart, center = [\n                    chart.plotWidth / 2,\n                    chart.plotHeight / 2\n                ], plotLeft = chart.plotLeft, plotTop = chart.plotTop, group = this.group;\n                var attribs;\n                // Initialize the animation\n                if (init) {\n                    // Scale down the group and place it in the center\n                    attribs = {\n                        translateX: center[0] + plotLeft,\n                        translateY: center[1] + plotTop,\n                        scaleX: 0.001,\n                        scaleY: 0.001,\n                        rotation: 10,\n                        opacity: 0.01\n                    };\n                    group.attr(attribs);\n                    // Run the animation\n                }\n                else {\n                    attribs = {\n                        translateX: plotLeft,\n                        translateY: plotTop,\n                        scaleX: 1,\n                        scaleY: 1,\n                        rotation: 0,\n                        opacity: 1\n                    };\n                    group.animate(attribs, this.options.animation);\n                }\n            };\n            SunburstSeries.prototype.drawPoints = function () {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel, shapeRoot = series.shapeRoot, group = series.group, hasRendered = series.hasRendered, idRoot = series.rootNode, idPreviousRoot = series.idPreviousRoot, nodeMap = series.nodeMap, nodePreviousRoot = nodeMap[idPreviousRoot], shapePreviousRoot = nodePreviousRoot && nodePreviousRoot.shapeArgs, points = series.points, radians = series.startAndEndRadians, chart = series.chart, optionsChart = chart && chart.options && chart.options.chart || {}, animation = (isBoolean(optionsChart.animation) ?\n                    optionsChart.animation :\n                    true), positions = series.center, center = {\n                    x: positions[0],\n                    y: positions[1]\n                }, innerR = positions[3] / 2, renderer = series.chart.renderer, hackDataLabelAnimation = !!(animation &&\n                    hasRendered &&\n                    idRoot !== idPreviousRoot &&\n                    series.dataLabelsGroup);\n                var animateLabels, animateLabelsCalled = false, addedHack = false;\n                if (hackDataLabelAnimation) {\n                    series.dataLabelsGroup.attr({ opacity: 0 });\n                    animateLabels = function () {\n                        var s = series;\n                        animateLabelsCalled = true;\n                        if (s.dataLabelsGroup) {\n                            s.dataLabelsGroup.animate({\n                                opacity: 1,\n                                visibility: 'inherit'\n                            });\n                        }\n                    };\n                }\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    var node = point.node, level = mapOptionsToLevel[node.level], shapeExisting = (point.shapeExisting || {}), shape = node.shapeArgs || {}, visible = !!(node.visible && node.shapeArgs);\n                    var animationInfo = void 0, onComplete = void 0;\n                    // Border radius requires the border-radius.js module. Adding it\n                    // here because the SunburstSeries is a mess and I can't find the\n                    // regular shapeArgs. Usually shapeArgs are created in the series'\n                    // `translate` function and then passed directly on to the renderer\n                    // in the `drawPoints` function.\n                    shape.borderRadius = series.options.borderRadius;\n                    if (hasRendered && animation) {\n                        animationInfo = getAnimation(shape, {\n                            center: center,\n                            point: point,\n                            radians: radians,\n                            innerR: innerR,\n                            idRoot: idRoot,\n                            idPreviousRoot: idPreviousRoot,\n                            shapeExisting: shapeExisting,\n                            shapeRoot: shapeRoot,\n                            shapePreviousRoot: shapePreviousRoot,\n                            visible: visible\n                        });\n                    }\n                    else {\n                        // When animation is disabled, attr is called from animation.\n                        animationInfo = {\n                            to: shape,\n                            from: {}\n                        };\n                    }\n                    extend(point, {\n                        shapeExisting: shape,\n                        tooltipPos: [shape.plotX, shape.plotY],\n                        drillId: getDrillId(point, idRoot, nodeMap),\n                        name: '' + (point.name || point.id || point.index),\n                        plotX: shape.plotX,\n                        plotY: shape.plotY,\n                        value: node.val,\n                        isInside: visible,\n                        isNull: !visible // used for dataLabels & point.draw\n                    });\n                    point.dlOptions = getDlOptions({\n                        point: point,\n                        level: level,\n                        optionsPoint: point.options,\n                        shapeArgs: shape\n                    });\n                    if (!addedHack && visible) {\n                        addedHack = true;\n                        onComplete = animateLabels;\n                    }\n                    point.draw({\n                        animatableAttribs: animationInfo.to,\n                        attribs: extend(animationInfo.from, (!chart.styledMode && series.pointAttribs(point, (point.selected && 'select')))),\n                        onComplete: onComplete,\n                        group: group,\n                        renderer: renderer,\n                        shapeType: 'arc',\n                        shapeArgs: shape\n                    });\n                }\n                // Draw data labels after points\n                // TODO draw labels one by one to avoid addtional looping\n                if (hackDataLabelAnimation && addedHack) {\n                    series.hasRendered = false;\n                    series.options.dataLabels.defer = true;\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                    series.hasRendered = true;\n                    // If animateLabels is called before labels were hidden, then call\n                    // it again.\n                    if (animateLabelsCalled) {\n                        animateLabels();\n                    }\n                }\n                else {\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                }\n                series.idPreviousRoot = idRoot;\n            };\n            /**\n             * The layout algorithm for the levels.\n             * @private\n             */\n            SunburstSeries.prototype.layoutAlgorithm = function (parent, children, options) {\n                var startAngle = parent.start;\n                var range = parent.end - startAngle, total = parent.val, x = parent.x, y = parent.y, radius = ((options &&\n                    isObject(options.levelSize) &&\n                    isNumber(options.levelSize.value)) ?\n                    options.levelSize.value :\n                    0), innerRadius = parent.r, outerRadius = innerRadius + radius, slicedOffset = options && isNumber(options.slicedOffset) ?\n                    options.slicedOffset :\n                    0;\n                return (children || []).reduce(function (arr, child) {\n                    var percentage = (1 / total) * child.val, radians = percentage * range, radiansCenter = startAngle + (radians / 2), offsetPosition = getEndPoint(x, y, radiansCenter, slicedOffset), values = {\n                        x: child.sliced ? offsetPosition.x : x,\n                        y: child.sliced ? offsetPosition.y : y,\n                        innerR: innerRadius,\n                        r: outerRadius,\n                        radius: radius,\n                        start: startAngle,\n                        end: startAngle + radians\n                    };\n                    arr.push(values);\n                    startAngle = values.end;\n                    return arr;\n                }, []);\n            };\n            SunburstSeries.prototype.setRootNode = function (id, redraw, eventArguments) {\n                var series = this;\n                if ( // If the target node is the only one at level 1, skip it. (#18658)\n                series.nodeMap[id].level === 1 &&\n                    series.nodeList\n                        .filter(function (node) { return node.level === 1; })\n                        .length === 1) {\n                    if (series.idPreviousRoot === '') {\n                        return;\n                    }\n                    id = '';\n                }\n                _super.prototype.setRootNode.call(this, id, redraw, eventArguments);\n            };\n            /**\n             * Set the shape arguments on the nodes. Recursive from root down.\n             * @private\n             */\n            SunburstSeries.prototype.setShapeArgs = function (parent, parentValues, mapOptionsToLevel) {\n                var level = parent.level + 1, options = mapOptionsToLevel[level], \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) {\n                    return n.visible;\n                }), twoPi = 6.28; // Two times Pi.\n                var childrenValues = [];\n                childrenValues = this.layoutAlgorithm(parentValues, children, options);\n                var i = -1;\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                    var child = children_1[_i];\n                    var values = childrenValues[++i], angle = values.start + ((values.end - values.start) / 2), radius = values.innerR + ((values.r - values.innerR) / 2), radians = (values.end - values.start), isCircle = (values.innerR === 0 && radians > twoPi), center = (isCircle ?\n                        { x: values.x, y: values.y } :\n                        getEndPoint(values.x, values.y, angle, radius)), val = (child.val ?\n                        (child.childrenTotal > child.val ?\n                            child.childrenTotal :\n                            child.val) :\n                        child.childrenTotal);\n                    // The inner arc length is a convenience for data label filters.\n                    if (this.points[child.i]) {\n                        this.points[child.i].innerArcLength = radians * values.innerR;\n                        this.points[child.i].outerArcLength = radians * values.r;\n                    }\n                    child.shapeArgs = merge(values, {\n                        plotX: center.x,\n                        plotY: center.y + 4 * Math.abs(Math.cos(angle))\n                    });\n                    child.values = merge(values, {\n                        val: val\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        this.setShapeArgs(child, child.values, mapOptionsToLevel);\n                    }\n                }\n            };\n            SunburstSeries.prototype.translate = function () {\n                var series = this, options = series.options, positions = series.center = series.getCenter(), radians = series.startAndEndRadians = getStartAndEndRadians(options.startAngle, options.endAngle), innerRadius = positions[3] / 2, outerRadius = positions[2] / 2, diffRadius = outerRadius - innerRadius, \n                // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series);\n                var mapIdToNode = series.nodeMap, mapOptionsToLevel, nodeRoot = mapIdToNode && mapIdToNode[rootId], nodeIds = {};\n                series.shapeRoot = nodeRoot && nodeRoot.shapeArgs;\n                if (!series.processedXData) { // hidden series\n                    series.processData();\n                }\n                series.generatePoints();\n                fireEvent(series, 'afterTranslate');\n                // @todo Only if series.isDirtyData is true\n                var tree = series.tree = series.getTree();\n                // Render traverseUpButton, after series.nodeMap i calculated.\n                mapIdToNode = series.nodeMap;\n                nodeRoot = mapIdToNode[rootId];\n                var idTop = isString(nodeRoot.parent) ? nodeRoot.parent : '', nodeTop = mapIdToNode[idTop], _a = SunburstUtilities.getLevelFromAndTo(nodeRoot), from = _a.from, to = _a.to;\n                mapOptionsToLevel = getLevelOptions({\n                    from: from,\n                    levels: series.options.levels,\n                    to: to,\n                    defaults: {\n                        colorByPoint: options.colorByPoint,\n                        dataLabels: options.dataLabels,\n                        levelIsConstant: options.levelIsConstant,\n                        levelSize: options.levelSize,\n                        slicedOffset: options.slicedOffset\n                    }\n                });\n                // NOTE consider doing calculateLevelSizes in a callback to\n                // getLevelOptions\n                mapOptionsToLevel = SunburstUtilities.calculateLevelSizes(mapOptionsToLevel, {\n                    diffRadius: diffRadius,\n                    from: from,\n                    to: to\n                });\n                // TODO Try to combine setTreeValues & setColorRecursive to avoid\n                //  unnecessary looping.\n                setTreeValues(tree, {\n                    before: cbSetTreeValuesBefore,\n                    idRoot: rootId,\n                    levelIsConstant: options.levelIsConstant,\n                    mapOptionsToLevel: mapOptionsToLevel,\n                    mapIdToNode: mapIdToNode,\n                    points: series.points,\n                    series: series\n                });\n                var values = mapIdToNode[''].shapeArgs = {\n                    end: radians.end,\n                    r: innerRadius,\n                    start: radians.start,\n                    val: nodeRoot.val,\n                    x: positions[0],\n                    y: positions[1]\n                };\n                this.setShapeArgs(nodeTop, values, mapOptionsToLevel);\n                // Set mapOptionsToLevel on series for use in drawPoints.\n                series.mapOptionsToLevel = mapOptionsToLevel;\n                // #10669 - verify if all nodes have unique ids\n                for (var _i = 0, _b = series.data; _i < _b.length; _i++) {\n                    var child = _b[_i];\n                    if (nodeIds[child.id]) {\n                        error(31, false, series.chart);\n                    }\n                    // map\n                    nodeIds[child.id] = true;\n                }\n                // reset object\n                nodeIds = {};\n            };\n            SunburstSeries.defaultOptions = merge(TreemapSeries.defaultOptions, SunburstSeriesDefaults);\n            return SunburstSeries;\n        }(TreemapSeries));\n        extend(SunburstSeries.prototype, {\n            axisTypes: [],\n            drawDataLabels: noop,\n            getCenter: getCenter,\n            isCartesian: false,\n            // Mark that the sunburst is supported by the series on point feature.\n            onPointSupported: true,\n            pointAttribs: ColumnSeries.prototype.pointAttribs,\n            pointClass: SunburstPoint,\n            NodeClass: SunburstNode,\n            utils: SunburstUtilities\n        });\n        SeriesRegistry.registerSeriesType('sunburst', SunburstSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeries;\n    });\n    _registerModule(_modules, 'masters/modules/sunburst.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Breadcrumbs/Breadcrumbs.js']], function (Highcharts, Breadcrumbs) {\n\n        var G = Highcharts;\n        G.Breadcrumbs = Breadcrumbs;\n        Breadcrumbs.compose(G.Chart, G.defaultOptions);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","lang","mainBreadcrumb","options","buttonTheme","fill","height","padding","zIndex","states","select","style","color","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","y","separator","text","fontSize","showFullPath","useHTML","BreadcrumbsDefaults","Chart","F","U","addEvent","defined","extend","fireEvent","isString","merge","objectEach","pick","composedMembers","onChartAfterShowResetZoom","chart","breadcrumbs","bbox","resetZoomButton","getBBox","breadcrumbsOptions","alignBreadcrumbsGroup","width","onChartDestroy","destroy","onChartGetMargins","level","breadcrumbsHeight","marginBottom","yOffset","plotTop","onChartRedraw","redraw","onChartSelection","event","resetSelection","Breadcrumbs","userOptions","elementList","isDirty","list","chartOptions","drilldown","drillUpButton","defaultOptions","navigation","compose","ChartClass","highchartsDefaultOptions","pushUnique","prototype","updateProperties","setList","setLevel","length","getLevel","getButtonText","breadcrumb","textFormat","defaultText","drillUpText","returnText","formatter","levelOptions","render","group","renderer","g","addClass","attr","add","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","posX","previousBreadcrumb","renderButton","updateSingleButton","xOffset","positionOptions","alignTo","bBox","additionalSpace","newPositions","posY","button","e","callDefaultEvent","buttonEvents","events","click","call","newLevel","styledMode","renderSeparator","separatorOptions","label","css","update","currentBreadcrumb","force","element","updated","rtlFactor","updateXPosition","spacing","adjustToRTL","translate","i","iEnd","isLast","setState","SeriesRegistry","ColorMapComposition","columnProto","seriesTypes","column","onPointAfterSetState","point","moveToTopOnHover","graphic","state","pointMembers","dataLabelOnNull","isValid","value","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","ret","colorProp","pointAttribs","SeriesClass","PointClass","pointClass","TreemapAlgorithmGroup","h","w","d","p","plot","direction","startDirection","total","nW","lW","nH","lH","elArr","lP","nR","lR","aspectRatio","Math","max","addElement","el","push","reset","TreemapNode","childrenTotal","visible","init","id","children","series","parent","__assign","Object","assign","t","s","n","arguments","isNumber","draw","params","animatableAttribs","onComplete","animation","hasRendered","attribs","getClassName","shouldDraw","shapeType","image","imageUrl","shapeArgs","animate","isNew","destroy_1","keys","DPU","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","TypeError","String","__","constructor","create","_a","PiePoint","pie","ScatterPoint","scatter","TreemapPoint","_super","_this","name","node","className","nodeMap","rootNode","isLeaf","interactByLeaf","allowTraversingTree","Boolean","plotY","setVisible","animationLimit","borderRadius","showInLegend","marker","colorByPoint","dataLabels","defer","enabled","inside","tooltip","headerFormat","pointFormat","ignoreHiddenPoint","layoutAlgorithm","layoutStartingDirection","alternateStartingDirection","levelIsConstant","traverseUpButton","borderColor","borderWidth","opacity","hover","brightness","heatmap","halo","shadow","legendSymbol","TreemapUtilities","recursive","item","func","context","next","Color","isArray","isObject","getColor","colorVariation","colorIndexByPoint","colorIndex","index","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","points","chartOptionsChart","colorCount","key","parse","brighten","to","get","getLevelOptions","defaults","converted","from","levels","result","reduce","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","levelDynamic","forEach","child","newOptions","val","updateRootId","rootId","H","TreemapSeriesDefaults","TU","noop","ColumnSeries","ScatterSeries","correctFloat","error","stableSort","treemapAxisDefaultValues","onSeriesAfterBindAxes","treeAxis","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","title","tickPositions","setOptions","TreemapSeries","axisRatio","data","nodeList","algorithmCalcPoints","directionChange","last","childrenArea","pX","pY","pW","pH","keep","end","gW","gH","_i","algorithmFill","pTot","children_1","algorithmLowAspectRatio","children_2","alignDataLabel","dataLabel","labelOptions","textOverflow","textWidth","calculateChildrenAreas","area","algorithm","alternate","filter","ignore","childrenValues","children_3","values","pointValues","axisMax","createList","currentLevelNumber","target","newRootId","extraNodes","reverse","node_1","drawDataLabels","points_1","hasDataLabels","dlOptions","drawPoints","withinAnimationLimit","pointCount","points_2","groupKey","hasGraphic","shouldAnimate","isInside","r","selected","survive","drillId","drillToByLeaf","drillToByGroup","nodeParent","drillToNode","setRootNode","drillUp","trigger","getExtremes","colorValueData","dataMin","dataMax","valueMin","valueMax","getListOfParents","existingIds","arr","ids","listOfParents","prev","curr","parent_1","indexOf","_b","children_4","getTree","allIds","map","parentList","buildTree","NodeClass","children_5","child_1","parentNode","hasData","processedXData","setOptionsEvent","allowDrillToNode","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","drillUpsNumber","stateOptions","borderDashStyle","setOpacity","cursor","setColorRecursive","colorInfo","setPointValues","points_3","crispCorr","x1","round","toPixels","x2","y1","y2","abs","plotX","eventArguments","previousRootId","idPreviousRoot","inactiveOtherPoints","a","sortIndex","sliceAndDice","squarified","strip","stripes","seriesArea","children_6","concat","len","colorAxis","setExtremes","setScale","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","Point","treemap","pInt","SunburstPoint","shapeExisting","getDataLabelPath","moreThanHalf","distance","start","angle","upperHalf","PI","dataLabelPath","arc","open","longArc","clockwise","innerR","defs","haloPath","range","calculateLevelSizes","diffRadius","levelsNotIncluded","remainingSize","totalWeight","levels_1","unit","levelSize","levels_2","weight","levelsNotIncluded_1","getLevelFromAndTo","SunburstNode","center","clip","allowOverlap","rotationMode","slicedOffset","CU","SunburstUtilities","SunburstSeriesDefaults","getCenter","getStartAndEndRadians","splat","rad2deg","getEndPoint","cos","sin","cbSetTreeValuesBefore","sliced","SunburstSeries","shapeRoot","startAndEndRadians","textPath","plotWidth","plotHeight","plotLeft","translateX","translateY","scaleX","scaleY","rotation","animateLabels","nodePreviousRoot","shapePreviousRoot","radians","optionsChart","isBoolean","positions","hackDataLabelAnimation","dataLabelsGroup","animateLabelsCalled","addedHack","visibility","shape","animationInfo","getAnimation","tooltipPos","getDrillId","isNull","getDlOptions","rotationRad","innerArcLength","outerArcLength","radius","attributes","dy","startAngle","innerRadius","outerRadius","percentage","offsetPosition","setShapeArgs","parentValues","isCircle","endAngle","nodeIds","processData","generatePoints","idTop","nodeTop","isCartesian","onPointSupported","G"],"mappings":"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"}