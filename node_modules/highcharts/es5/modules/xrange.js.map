{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * X-range series\n *\n * (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/xrange', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/XRange/XRangeSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var correctFloat = U.correctFloat, isNumber = U.isNumber, isObject = U.isObject;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The X-range series displays ranges on the X axis, typically time\n         * intervals with a start and end date.\n         *\n         * @sample {highcharts} highcharts/demo/x-range/\n         *         X-range\n         * @sample {highcharts} highcharts/css/x-range/\n         *         Styled mode X-range\n         * @sample {highcharts} highcharts/chart/inverted-xrange/\n         *         Inverted X-range\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts highstock gantt\n         * @excluding    boostThreshold, crisp, cropThreshold, depth, edgeColor,\n         *               edgeWidth, findNearestPointBy, getExtremesFromAll,\n         *               negativeColor, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, softThreshold,\n         *               stacking, threshold, data, dataSorting, boostBlending\n         * @requires     modules/xrange\n         * @optionparent plotOptions.xrange\n         */\n        var XRangeSeriesDefaults = {\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. The partial fill object can be set either on\n             * series or point level.\n             *\n             * @sample {highcharts} highcharts/demo/x-range\n             *         X-range with partial fill\n             *\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill\n             */\n            /**\n             * The fill color to be used for partial fills. Defaults to a darker\n             * shade of the point color.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill.fill\n             */\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. See [completed](series.gantt.data.completed).\n             *\n             * @sample gantt/demo/progress-indicator\n             *         Gantt with progress indicator\n             *\n             * @product   gantt\n             * @apioption plotOptions.gantt.partialFill\n             */\n            /**\n             * In an X-range series, this option makes all points of the same Y-axis\n             * category the same color.\n             */\n            colorByPoint: true,\n            dataLabels: {\n                formatter: function () {\n                    var point = this.point, amount = point.partialFill;\n                    if (isObject(amount)) {\n                        amount = amount.amount;\n                    }\n                    if (isNumber(amount) && amount > 0) {\n                        return correctFloat(amount * 100) + '%';\n                    }\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.x} - {point.x2}</span><br/>',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.yCategory}</b><br/>'\n            },\n            borderRadius: 3,\n            pointRange: 0\n        };\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * An `xrange` series. If the [type](#series.xrange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.xrange\n         * @excluding boostThreshold, crisp, cropThreshold, depth, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, negativeColor,\n         *            pointInterval, pointIntervalUnit, pointPlacement, pointRange,\n         *            pointStart, softThreshold, stacking, threshold, dataSorting,\n         *            boostBlending\n         * @product   highcharts highstock gantt\n         * @requires  modules/xrange\n         * @apioption series.xrange\n         */\n        /**\n         * An array of data points for the series. For the `xrange` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The objects are point configuration\n         *    objects as seen below.\n         *    ```js\n         *    data: [{\n         *        x: Date.UTC(2017, 0, 1),\n         *        x2: Date.UTC(2017, 0, 3),\n         *        name: \"Test\",\n         *        y: 0,\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: Date.UTC(2017, 0, 4),\n         *        x2: Date.UTC(2017, 0, 5),\n         *        name: \"Deploy\",\n         *        y: 1,\n         *        color: \"#FF0000\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.XrangePointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data\n         */\n        /**\n         * The starting X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x\n         */\n        /**\n         * The ending X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x2\n         */\n        /**\n         * The Y value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.y\n         */\n        /**\n         * A partial fill for each point, typically used to visualize how much of\n         * a task is performed. The partial fill object can be set either on series\n         * or point level.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range with partial fill\n         *\n         * @declare   Highcharts.XrangePointPartialFillOptionsObject\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill\n         */\n        /**\n         * The amount of the X-range point to be filled. Values can be 0-1 and are\n         * converted to percentages in the default data label formatter.\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.amount\n         */\n        /**\n         * The fill color to be used for partial fills. Defaults to a darker shade\n         * of the point color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.fill\n         */\n        (''); // adds doclets above to transpiled file\n\n        return XRangeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnPoint = SeriesRegistry.seriesTypes.column.prototype.pointClass;\n        var extend = U.extend;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var XRangePoint = /** @class */ (function (_super) {\n            __extends(XRangePoint, _super);\n            function XRangePoint() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.options = void 0;\n                _this.series = void 0;\n                return _this;\n            }\n            /**\n             * Return color of a point based on its category.\n             *\n             * @private\n             * @function getColorByCategory\n             *\n             * @param {object} series\n             *        The series which the point belongs to.\n             *\n             * @param {object} point\n             *        The point to calculate its color for.\n             *\n             * @return {object}\n             *         Returns an object containing the properties color and colorIndex.\n             */\n            XRangePoint.getColorByCategory = function (series, point) {\n                var colors = series.options.colors || series.chart.options.colors, colorCount = colors ?\n                    colors.length :\n                    series.chart.options.chart.colorCount, colorIndex = point.y % colorCount, color = colors && colors[colorIndex];\n                return {\n                    colorIndex: colorIndex,\n                    color: color\n                };\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            XRangePoint.prototype.resolveColor = function () {\n                var series = this.series;\n                if (series.options.colorByPoint && !this.options.color) {\n                    var colorByPoint = XRangePoint.getColorByCategory(series, this);\n                    if (!series.chart.styledMode) {\n                        this.color = colorByPoint.color;\n                    }\n                    if (!this.options.colorIndex) {\n                        this.colorIndex = colorByPoint.colorIndex;\n                    }\n                }\n                else if (!this.color) {\n                    this.color = series.color;\n                }\n            };\n            /**\n             * Extend init to have y default to 0.\n             *\n             * @private\n             */\n            XRangePoint.prototype.init = function () {\n                _super.prototype.init.apply(this, arguments);\n                if (!this.y) {\n                    this.y = 0;\n                }\n                return this;\n            };\n            /**\n             * @private\n             */\n            XRangePoint.prototype.setState = function () {\n                _super.prototype.setState.apply(this, arguments);\n                this.series.drawPoint(this, this.series.getAnimationVerb());\n            };\n            /**\n             * Add x2 and yCategory to the available properties for tooltip formats.\n             *\n             * @private\n             */\n            XRangePoint.prototype.getLabelConfig = function () {\n                var cfg = _super.prototype.getLabelConfig.call(this), yCats = this.series.yAxis.categories;\n                cfg.x2 = this.x2;\n                cfg.yCategory = this.yCategory = yCats && yCats[this.y];\n                // Use 'category' as 'key' to ensure tooltip datetime formatting.\n                // Use 'name' only when 'category' is undefined.\n                cfg.key = this.category || this.name;\n                return cfg;\n            };\n            /**\n             * @private\n             */\n            XRangePoint.prototype.isValid = function () {\n                return typeof this.x === 'number' &&\n                    typeof this.x2 === 'number';\n            };\n            return XRangePoint;\n        }(ColumnPoint));\n        extend(XRangePoint.prototype, {\n            ttBelow: false,\n            tooltipDateKeys: ['x', 'x2']\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The ending X value of the range point.\n         * @name Highcharts.Point#x2\n         * @type {number|undefined}\n         * @requires modules/xrange\n         */\n        /**\n         * Extend applyOptions so that `colorByPoint` for x-range means that one\n         * color is applied per Y axis category.\n         *\n         * @private\n         * @function Highcharts.Point#applyOptions\n         *\n         * @return {Highcharts.Series}\n         */\n        /**\n         * @interface Highcharts.PointOptionsObject in parts/Point.ts\n         */ /**\n        * The ending X value of the range point.\n        * @name Highcharts.PointOptionsObject#x2\n        * @type {number|undefined}\n        * @requires modules/xrange\n        */\n        (''); // keeps doclets above in JS file\n\n        return XRangePoint;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeries.js', [_modules['Core/Globals.js'], _modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/XRange/XRangeSeriesDefaults.js'], _modules['Series/XRange/XRangePoint.js']], function (H, Color, SeriesRegistry, U, XRangeSeriesDefaults, XRangePoint) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2021 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var noop = H.noop;\n        var color = Color.parse;\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var addEvent = U.addEvent, clamp = U.clamp, defined = U.defined, extend = U.extend, find = U.find, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Max x2 should be considered in xAxis extremes\n         * @private\n         */\n        function onAxisAfterGetSeriesExtremes() {\n            var dataMax, modMax;\n            if (this.isXAxis) {\n                dataMax = pick(this.dataMax, -Number.MAX_VALUE);\n                for (var _i = 0, _a = this.series; _i < _a.length; _i++) {\n                    var series = _a[_i];\n                    if (series.x2Data) {\n                        for (var _b = 0, _c = series.x2Data; _b < _c.length; _b++) {\n                            var val = _c[_b];\n                            if (val && val > dataMax) {\n                                dataMax = val;\n                                modMax = true;\n                            }\n                        }\n                    }\n                }\n                if (modMax) {\n                    this.dataMax = dataMax;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.xrange\n         *\n         * @augments Highcharts.Series\n         */\n        var XRangeSeries = /** @class */ (function (_super) {\n            __extends(XRangeSeries, _super);\n            function XRangeSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n                /*\n                // Override to remove stroke from points. For partial fill.\n                pointAttribs: function () {\n                    let series = this,\n                        retVal = columnType.prototype.pointAttribs\n                            .apply(series, arguments);\n    \n                    //retVal['stroke-width'] = 0;\n                    return retVal;\n                }\n                //*/\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            XRangeSeries.compose = function (AxisClass) {\n                if (U.pushUnique(composedMembers, AxisClass)) {\n                    addEvent(AxisClass, 'afterGetSeriesExtremes', onAxisAfterGetSeriesExtremes);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.init = function () {\n                _super.prototype.init.apply(this, arguments);\n                this.options.stacking = void 0; // #13161\n            };\n            /**\n             * Borrow the column series metrics, but with swapped axes. This gives\n             * free access to features like groupPadding, grouping, pointWidth etc.\n             * @private\n             */\n            XRangeSeries.prototype.getColumnMetrics = function () {\n                var _this = this;\n                var swapAxes = function () {\n                    for (var _i = 0, _a = _this.chart.series; _i < _a.length; _i++) {\n                        var series = _a[_i];\n                        var xAxis = series.xAxis;\n                        series.xAxis = series.yAxis;\n                        series.yAxis = xAxis;\n                    }\n                };\n                swapAxes();\n                var metrics = _super.prototype.getColumnMetrics.call(this);\n                swapAxes();\n                return metrics;\n            };\n            /**\n             * Override cropData to show a point where x or x2 is outside visible range,\n             * but one of them is inside.\n             * @private\n             */\n            XRangeSeries.prototype.cropData = function (xData, yData, min, max) {\n                // Replace xData with x2Data to find the appropriate cropStart\n                var crop = _super.prototype.cropData.call(this, this.x2Data, yData, min, max);\n                // Re-insert the cropped xData\n                crop.xData = xData.slice(crop.start, crop.end);\n                return crop;\n            };\n            /**\n             * Finds the index of an existing point that matches the given point\n             * options.\n             *\n             * @private\n             *\n             * @param {Highcharts.XRangePointOptions} options\n             *        The options of the point.\n             *\n             * @return {number|undefined}\n             *         Returns index of a matching point, or undefined if no match is\n             *         found.\n             */\n            XRangeSeries.prototype.findPointIndex = function (options) {\n                var _a = this, cropStart = _a.cropStart, points = _a.points;\n                var id = options.id;\n                var pointIndex;\n                if (id) {\n                    var point = find(points, function (point) { return point.id === id; });\n                    pointIndex = point ? point.index : void 0;\n                }\n                if (typeof pointIndex === 'undefined') {\n                    var point = find(points, function (point) { return (point.x === options.x &&\n                        point.x2 === options.x2 &&\n                        !point.touched); });\n                    pointIndex = point ? point.index : void 0;\n                }\n                // Reduce pointIndex if data is cropped\n                if (this.cropped &&\n                    isNumber(pointIndex) &&\n                    isNumber(cropStart) &&\n                    pointIndex >= cropStart) {\n                    pointIndex -= cropStart;\n                }\n                return pointIndex;\n            };\n            XRangeSeries.prototype.alignDataLabel = function (point) {\n                var oldPlotX = point.plotX;\n                point.plotX = pick(point.dlBox && point.dlBox.centerX, point.plotX);\n                _super.prototype.alignDataLabel.apply(this, arguments);\n                point.plotX = oldPlotX;\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.translatePoint = function (point) {\n                var xAxis = this.xAxis, yAxis = this.yAxis, metrics = this.columnMetrics, options = this.options, minPointLength = options.minPointLength || 0, oldColWidth = (point.shapeArgs && point.shapeArgs.width || 0) / 2, seriesXOffset = this.pointXOffset = metrics.offset, posX = pick(point.x2, point.x + (point.len || 0)), borderRadius = options.borderRadius, plotTop = this.chart.plotTop, plotLeft = this.chart.plotLeft;\n                var plotX = point.plotX, plotX2 = xAxis.translate(posX, 0, 0, 0, 1);\n                var length = Math.abs(plotX2 - plotX), inverted = this.chart.inverted, borderWidth = pick(options.borderWidth, 1), crisper = borderWidth % 2 / 2;\n                var widthDifference, partialFill, yOffset = metrics.offset, pointHeight = Math.round(metrics.width), dlLeft, dlRight, dlWidth, clipRectWidth;\n                if (minPointLength) {\n                    widthDifference = minPointLength - length;\n                    if (widthDifference < 0) {\n                        widthDifference = 0;\n                    }\n                    plotX -= widthDifference / 2;\n                    plotX2 += widthDifference / 2;\n                }\n                plotX = Math.max(plotX, -10);\n                plotX2 = clamp(plotX2, -10, xAxis.len + 10);\n                // Handle individual pointWidth\n                if (defined(point.options.pointWidth)) {\n                    yOffset -= ((Math.ceil(point.options.pointWidth) - pointHeight) / 2);\n                    pointHeight = Math.ceil(point.options.pointWidth);\n                }\n                // Apply pointPlacement to the Y axis\n                if (options.pointPlacement &&\n                    isNumber(point.plotY) &&\n                    yAxis.categories) {\n                    point.plotY = yAxis.translate(point.y, 0, 1, 0, 1, options.pointPlacement);\n                }\n                var x = Math.floor(Math.min(plotX, plotX2)) + crisper, x2 = Math.floor(Math.max(plotX, plotX2)) + crisper, width = x2 - x;\n                var r = Math.min(relativeLength((typeof borderRadius === 'object' ?\n                    borderRadius.radius :\n                    borderRadius || 0), pointHeight), Math.min(width, pointHeight) / 2);\n                var shapeArgs = {\n                    x: x,\n                    y: Math.floor(point.plotY + yOffset) + crisper,\n                    width: width,\n                    height: pointHeight,\n                    r: r\n                };\n                point.shapeArgs = shapeArgs;\n                // Move tooltip to default position\n                if (!inverted) {\n                    point.tooltipPos[0] -= oldColWidth +\n                        seriesXOffset -\n                        shapeArgs.width / 2;\n                }\n                else {\n                    point.tooltipPos[1] += seriesXOffset +\n                        oldColWidth;\n                }\n                // Align data labels inside the shape and inside the plot area\n                dlLeft = shapeArgs.x;\n                dlRight = dlLeft + shapeArgs.width;\n                if (dlLeft < 0 || dlRight > xAxis.len) {\n                    dlLeft = clamp(dlLeft, 0, xAxis.len);\n                    dlRight = clamp(dlRight, 0, xAxis.len);\n                    dlWidth = dlRight - dlLeft;\n                    point.dlBox = merge(shapeArgs, {\n                        x: dlLeft,\n                        width: dlRight - dlLeft,\n                        centerX: dlWidth ? dlWidth / 2 : null\n                    });\n                }\n                else {\n                    point.dlBox = null;\n                }\n                // Tooltip position\n                var tooltipPos = point.tooltipPos;\n                var xIndex = !inverted ? 0 : 1;\n                var yIndex = !inverted ? 1 : 0;\n                var tooltipYOffset = (this.columnMetrics ?\n                    this.columnMetrics.offset :\n                    -metrics.width / 2);\n                // Centering tooltip position (#14147)\n                if (inverted) {\n                    tooltipPos[xIndex] += shapeArgs.width / 2;\n                }\n                else {\n                    tooltipPos[xIndex] = clamp(tooltipPos[xIndex] +\n                        (xAxis.reversed ? -1 : 0) * shapeArgs.width, xAxis.left - plotLeft, xAxis.left + xAxis.len - plotLeft - 1);\n                }\n                tooltipPos[yIndex] = clamp(tooltipPos[yIndex] + ((inverted ? -1 : 1) * tooltipYOffset), yAxis.top - plotTop, yAxis.top + yAxis.len - plotTop - 1);\n                // Add a partShapeArgs to the point, based on the shapeArgs property\n                partialFill = point.partialFill;\n                if (partialFill) {\n                    // Get the partial fill amount\n                    if (isObject(partialFill)) {\n                        partialFill = partialFill.amount;\n                    }\n                    // If it was not a number, assume 0\n                    if (!isNumber(partialFill)) {\n                        partialFill = 0;\n                    }\n                    point.partShapeArgs = merge(shapeArgs);\n                    clipRectWidth = Math.max(Math.round(length * partialFill + point.plotX -\n                        plotX), 0);\n                    point.clipRectArgs = {\n                        x: xAxis.reversed ? // #10717\n                            shapeArgs.x + length - clipRectWidth :\n                            shapeArgs.x,\n                        y: shapeArgs.y,\n                        width: clipRectWidth,\n                        height: shapeArgs.height\n                    };\n                }\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.translate = function () {\n                _super.prototype.translate.apply(this, arguments);\n                for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n                    var point = _a[_i];\n                    this.translatePoint(point);\n                }\n            };\n            /**\n             * Draws a single point in the series. Needed for partial fill.\n             *\n             * This override turns point.graphic into a group containing the\n             * original graphic and an overlay displaying the partial fill.\n             *\n             * @private\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series.\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            XRangeSeries.prototype.drawPoint = function (point, verb) {\n                var seriesOpts = this.options, renderer = this.chart.renderer, type = point.shapeType, shapeArgs = point.shapeArgs, partShapeArgs = point.partShapeArgs, clipRectArgs = point.clipRectArgs, pointState = point.state, stateOpts = (seriesOpts.states[pointState || 'normal'] ||\n                    {}), pointStateVerb = typeof pointState === 'undefined' ?\n                    'attr' : verb, pointAttr = this.pointAttribs(point, pointState), animation = pick(this.chart.options.chart.animation, stateOpts.animation);\n                var graphic = point.graphic, pfOptions = point.partialFill;\n                if (!point.isNull && point.visible !== false) {\n                    // Original graphic\n                    if (graphic) { // update\n                        graphic.rect[verb](shapeArgs);\n                    }\n                    else {\n                        point.graphic = graphic = renderer.g('point')\n                            .addClass(point.getClassName())\n                            .add(point.group || this.group);\n                        graphic.rect = renderer[type](merge(shapeArgs))\n                            .addClass(point.getClassName())\n                            .addClass('highcharts-partfill-original')\n                            .add(graphic);\n                    }\n                    // Partial fill graphic\n                    if (partShapeArgs) {\n                        if (graphic.partRect) {\n                            graphic.partRect[verb](merge(partShapeArgs));\n                            graphic.partialClipRect[verb](merge(clipRectArgs));\n                        }\n                        else {\n                            graphic.partialClipRect = renderer.clipRect(clipRectArgs.x, clipRectArgs.y, clipRectArgs.width, clipRectArgs.height);\n                            graphic.partRect =\n                                renderer[type](partShapeArgs)\n                                    .addClass('highcharts-partfill-overlay')\n                                    .add(graphic)\n                                    .clip(graphic.partialClipRect);\n                        }\n                    }\n                    // Presentational\n                    if (!this.chart.styledMode) {\n                        graphic\n                            .rect[verb](pointAttr, animation)\n                            .shadow(seriesOpts.shadow);\n                        if (partShapeArgs) {\n                            // Ensure pfOptions is an object\n                            if (!isObject(pfOptions)) {\n                                pfOptions = {};\n                            }\n                            if (isObject(seriesOpts.partialFill)) {\n                                pfOptions = merge(seriesOpts.partialFill, pfOptions);\n                            }\n                            var fill = (pfOptions.fill ||\n                                color(pointAttr.fill).brighten(-0.3).get() ||\n                                color(point.color || this.color)\n                                    .brighten(-0.3).get());\n                            pointAttr.fill = fill;\n                            graphic\n                                .partRect[pointStateVerb](pointAttr, animation)\n                                .shadow(seriesOpts.shadow);\n                        }\n                    }\n                }\n                else if (graphic) {\n                    point.graphic = graphic.destroy(); // #1269\n                }\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.drawPoints = function () {\n                var verb = this.getAnimationVerb();\n                // Draw the columns\n                for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n                    var point = _a[_i];\n                    this.drawPoint(point, verb);\n                }\n            };\n            /**\n             * Returns \"animate\", or \"attr\" if the number of points is above the\n             * animation limit.\n             *\n             * @private\n             */\n            XRangeSeries.prototype.getAnimationVerb = function () {\n                return (this.chart.pointCount < (this.options.animationLimit || 250) ?\n                    'animate' :\n                    'attr');\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.isPointInside = function (point) {\n                var shapeArgs = point.shapeArgs, plotX = point.plotX, plotY = point.plotY;\n                if (!shapeArgs) {\n                    return _super.prototype.isPointInside.apply(this, arguments);\n                }\n                var isInside = typeof plotX !== 'undefined' &&\n                    typeof plotY !== 'undefined' &&\n                    plotY >= 0 &&\n                    plotY <= this.yAxis.len &&\n                    (shapeArgs.x || 0) + (shapeArgs.width || 0) >= 0 &&\n                    plotX <= this.xAxis.len;\n                return isInside;\n            };\n            XRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, XRangeSeriesDefaults);\n            return XRangeSeries;\n        }(ColumnSeries));\n        extend(XRangeSeries.prototype, {\n            pointClass: XRangePoint,\n            pointArrayMap: ['x2', 'y'],\n            getExtremesFromAll: true,\n            parallelArrays: ['x', 'x2', 'y'],\n            requireSorting: false,\n            type: 'xrange',\n            animate: SeriesRegistry.series.prototype.animate,\n            autoIncrement: noop,\n            buildKDTree: noop\n        });\n        SeriesRegistry.registerSeriesType('xrange', XRangeSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return XRangeSeries;\n    });\n    _registerModule(_modules, 'masters/modules/xrange.src.js', [_modules['Core/Globals.js'], _modules['Series/XRange/XRangeSeries.js']], function (Highcharts, XRangeSeries) {\n\n        var G = Highcharts;\n        XRangeSeries.compose(G.Axis);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","U","correctFloat","isNumber","isObject","colorByPoint","dataLabels","formatter","amount","point","partialFill","inside","verticalAlign","tooltip","headerFormat","pointFormat","borderRadius","pointRange","SeriesRegistry","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","ColumnPoint","seriesTypes","column","pointClass","extend","XRangePoint","_super","_this","arguments","options","series","getColorByCategory","colors","chart","colorCount","length","colorIndex","y","color","resolveColor","styledMode","init","setState","drawPoint","getAnimationVerb","getLabelConfig","cfg","yCats","yAxis","categories","x2","yCategory","key","category","name","isValid","x","ttBelow","tooltipDateKeys","H","Color","XRangeSeriesDefaults","noop","parse","ColumnSeries","addEvent","clamp","defined","find","merge","pick","relativeLength","composedMembers","onAxisAfterGetSeriesExtremes","dataMax","modMax","isXAxis","Number","MAX_VALUE","_i","_a","x2Data","_b","_c","val","XRangeSeries","data","points","compose","AxisClass","pushUnique","stacking","getColumnMetrics","swapAxes","xAxis","metrics","cropData","xData","yData","min","max","crop","slice","start","end","findPointIndex","pointIndex","cropStart","id","index","touched","cropped","alignDataLabel","oldPlotX","plotX","dlBox","centerX","translatePoint","widthDifference","dlLeft","dlRight","dlWidth","clipRectWidth","columnMetrics","minPointLength","oldColWidth","shapeArgs","width","seriesXOffset","pointXOffset","offset","posX","len","plotTop","plotLeft","plotX2","translate","Math","abs","inverted","crisper","borderWidth","yOffset","pointHeight","round","pointWidth","ceil","pointPlacement","plotY","floor","r","radius","height","tooltipPos","xIndex","yIndex","tooltipYOffset","reversed","left","top","partShapeArgs","clipRectArgs","verb","seriesOpts","renderer","type","shapeType","pointState","state","stateOpts","states","pointStateVerb","pointAttr","pointAttribs","animation","graphic","pfOptions","isNull","visible","destroy","rect","g","addClass","getClassName","add","group","partRect","partialClipRect","clipRect","clip","shadow","fill","brighten","get","drawPoints","pointCount","animationLimit","isPointInside","defaultOptions","pointArrayMap","getExtremesFromAll","parallelArrays","requireSorting","animate","autoIncrement","buildKDTree","registerSeriesType","G","Axis"],"mappings":"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"}