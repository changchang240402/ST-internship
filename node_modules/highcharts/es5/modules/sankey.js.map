{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * Sankey diagram module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sankey', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/NodesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var _a = SeriesRegistry.series, seriesProto = _a.prototype, pointProto = _a.prototype.pointClass.prototype;\n        var defined = U.defined, extend = U.extend, find = U.find, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var NodesComposition;\n        (function (NodesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(PointClass, SeriesClass) {\n                if (U.pushUnique(composedMembers, PointClass)) {\n                    var pointProto_1 = PointClass.prototype;\n                    pointProto_1.setNodeState = setNodeState;\n                    pointProto_1.setState = setNodeState;\n                    pointProto_1.update = updateNode;\n                }\n                if (U.pushUnique(composedMembers, SeriesClass)) {\n                    var seriesProto_1 = SeriesClass.prototype;\n                    seriesProto_1.destroy = destroy;\n                    seriesProto_1.setData = setData;\n                }\n                return SeriesClass;\n            }\n            NodesComposition.compose = compose;\n            /**\n             * Create a single node that holds information on incoming and outgoing\n             * links.\n             * @private\n             */\n            function createNode(id) {\n                var PointClass = this.pointClass, findById = function (nodes, id) { return find(nodes, function (node) { return node.id === id; }); };\n                var node = findById(this.nodes, id), options;\n                if (!node) {\n                    options = this.options.nodes && findById(this.options.nodes, id);\n                    var newNode_1 = (new PointClass()).init(this, extend({\n                        className: 'highcharts-node',\n                        isNode: true,\n                        id: id,\n                        y: 1 // Pass isNull test\n                    }, options));\n                    newNode_1.linksTo = [];\n                    newNode_1.linksFrom = [];\n                    /**\n                     * Return the largest sum of either the incoming or outgoing links.\n                     * @private\n                     */\n                    newNode_1.getSum = function () {\n                        var sumTo = 0, sumFrom = 0;\n                        newNode_1.linksTo.forEach(function (link) {\n                            sumTo += link.weight || 0;\n                        });\n                        newNode_1.linksFrom.forEach(function (link) {\n                            sumFrom += link.weight || 0;\n                        });\n                        return Math.max(sumTo, sumFrom);\n                    };\n                    /**\n                     * Get the offset in weight values of a point/link.\n                     * @private\n                     */\n                    newNode_1.offset = function (point, coll) {\n                        var offset = 0;\n                        for (var i = 0; i < newNode_1[coll].length; i++) {\n                            if (newNode_1[coll][i] === point) {\n                                return offset;\n                            }\n                            offset += newNode_1[coll][i].weight;\n                        }\n                    };\n                    // Return true if the node has a shape, otherwise all links are\n                    // outgoing.\n                    newNode_1.hasShape = function () {\n                        var outgoing = 0;\n                        newNode_1.linksTo.forEach(function (link) {\n                            if (link.outgoing) {\n                                outgoing++;\n                            }\n                        });\n                        return (!newNode_1.linksTo.length ||\n                            outgoing !== newNode_1.linksTo.length);\n                    };\n                    newNode_1.index = this.nodes.push(newNode_1) - 1;\n                    node = newNode_1;\n                }\n                node.formatPrefix = 'node';\n                // for use in formats\n                node.name = node.name || node.options.id || '';\n                // Mass is used in networkgraph:\n                node.mass = pick(\n                // Node:\n                node.options.mass, node.options.marker && node.options.marker.radius, \n                // Series:\n                this.options.marker && this.options.marker.radius, \n                // Default:\n                4);\n                return node;\n            }\n            NodesComposition.createNode = createNode;\n            /**\n             * Destroy alll nodes and links.\n             * @private\n             */\n            function destroy() {\n                // Nodes must also be destroyed (#8682, #9300)\n                this.data = []\n                    .concat(this.points || [], this.nodes);\n                return seriesProto.destroy.apply(this, arguments);\n            }\n            NodesComposition.destroy = destroy;\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects but\n             * pushed to the this.nodes array.\n             * @private\n             */\n            function generatePoints() {\n                var _this = this;\n                var chart = this.chart, nodeLookup = {};\n                seriesProto.generatePoints.call(this);\n                if (!this.nodes) {\n                    this.nodes = []; // List of Point-like node items\n                }\n                this.colorCounter = 0;\n                // Reset links from previous run\n                this.nodes.forEach(function (node) {\n                    node.linksFrom.length = 0;\n                    node.linksTo.length = 0;\n                    node.level = node.options.level;\n                });\n                // Create the node list and set up links\n                this.points.forEach(function (point) {\n                    if (defined(point.from)) {\n                        if (!nodeLookup[point.from]) {\n                            nodeLookup[point.from] = _this.createNode(point.from);\n                        }\n                        nodeLookup[point.from].linksFrom.push(point);\n                        point.fromNode = nodeLookup[point.from];\n                        // Point color defaults to the fromNode's color\n                        if (chart.styledMode) {\n                            point.colorIndex = pick(point.options.colorIndex, nodeLookup[point.from].colorIndex);\n                        }\n                        else {\n                            point.color =\n                                point.options.color || nodeLookup[point.from].color;\n                        }\n                    }\n                    if (defined(point.to)) {\n                        if (!nodeLookup[point.to]) {\n                            nodeLookup[point.to] = _this.createNode(point.to);\n                        }\n                        nodeLookup[point.to].linksTo.push(point);\n                        point.toNode = nodeLookup[point.to];\n                    }\n                    point.name = point.name || point.id; // for use in formats\n                }, this);\n                // Store lookup table for later use\n                this.nodeLookup = nodeLookup;\n            }\n            NodesComposition.generatePoints = generatePoints;\n            /**\n             * Destroy all nodes on setting new data\n             * @private\n             */\n            function setData() {\n                if (this.nodes) {\n                    this.nodes.forEach(function (node) {\n                        node.destroy();\n                    });\n                    this.nodes.length = 0;\n                }\n                seriesProto.setData.apply(this, arguments);\n            }\n            /**\n             * When hovering node, highlight all connected links. When hovering a link,\n             * highlight all connected nodes.\n             * @private\n             */\n            function setNodeState(state) {\n                var args = arguments, others = this.isNode ? this.linksTo.concat(this.linksFrom) :\n                    [this.fromNode, this.toNode];\n                if (state !== 'select') {\n                    others.forEach(function (linkOrNode) {\n                        if (linkOrNode && linkOrNode.series) {\n                            pointProto.setState.apply(linkOrNode, args);\n                            if (!linkOrNode.isNode) {\n                                if (linkOrNode.fromNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.fromNode, args);\n                                }\n                                if (linkOrNode.toNode && linkOrNode.toNode.graphic) {\n                                    pointProto.setState.apply(linkOrNode.toNode, args);\n                                }\n                            }\n                        }\n                    });\n                }\n                pointProto.setState.apply(this, args);\n            }\n            NodesComposition.setNodeState = setNodeState;\n            /**\n             * When updating a node, don't update `series.options.data`, but\n             * `series.options.nodes`\n             * @private\n             */\n            function updateNode(options, redraw, animation, runEvent) {\n                var _this = this;\n                var nodes = this.series.options.nodes, data = this.series.options.data, dataLength = data && data.length || 0, linkConfig = data && data[this.index];\n                pointProto.update.call(this, options, this.isNode ? false : redraw, // Hold the redraw for nodes\n                animation, runEvent);\n                if (this.isNode) {\n                    // this.index refers to `series.nodes`, not `options.nodes` array\n                    var nodeIndex = (nodes || [])\n                        .reduce(// Array.findIndex needs a polyfill\n                    function (prevIndex, n, index) {\n                        return (_this.id === n.id ? index : prevIndex);\n                    }, -1), \n                    // Merge old config with new config. New config is stored in\n                    // options.data, because of default logic in point.update()\n                    nodeConfig = merge(nodes && nodes[nodeIndex] || {}, data && data[this.index] || {});\n                    // Restore link config\n                    if (data) {\n                        if (linkConfig) {\n                            data[this.index] = linkConfig;\n                        }\n                        else {\n                            // Remove node from config if there's more nodes than links\n                            data.length = dataLength;\n                        }\n                    }\n                    // Set node config\n                    if (nodes) {\n                        if (nodeIndex >= 0) {\n                            nodes[nodeIndex] = nodeConfig;\n                        }\n                        else {\n                            nodes.push(nodeConfig);\n                        }\n                    }\n                    else {\n                        this.series.options.nodes = [nodeConfig];\n                    }\n                    if (pick(redraw, true)) {\n                        this.series.chart.redraw(animation);\n                    }\n                }\n            }\n            NodesComposition.updateNode = updateNode;\n        })(NodesComposition || (NodesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NodesComposition;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeyPoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var defined = U.defined;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SankeyPoint = /** @class */ (function (_super) {\n            __extends(SankeyPoint, _super);\n            function SankeyPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.className = void 0;\n                _this.fromNode = void 0;\n                _this.level = void 0;\n                _this.linkBase = void 0;\n                _this.linkColorMode = void 0;\n                _this.linksFrom = void 0;\n                _this.linksTo = void 0;\n                _this.mass = void 0;\n                _this.nodeX = void 0;\n                _this.nodeY = void 0;\n                _this.options = void 0;\n                _this.series = void 0;\n                _this.toNode = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            SankeyPoint.prototype.applyOptions = function (options, x) {\n                Point.prototype.applyOptions.call(this, options, x);\n                // Treat point.level as a synonym of point.column\n                if (defined(this.options.level)) {\n                    this.options.column = this.column = this.options.level;\n                }\n                return this;\n            };\n            /**\n             * @private\n             */\n            SankeyPoint.prototype.getClassName = function () {\n                return (this.isNode ? 'highcharts-node ' : 'highcharts-link ') +\n                    Point.prototype.getClassName.call(this);\n            };\n            /**\n             * If there are incoming links, place it to the right of the\n             * highest order column that links to this one.\n             *\n             * @private\n             */\n            SankeyPoint.prototype.getFromNode = function () {\n                var node = this;\n                var fromColumn = -1, fromNode;\n                for (var i = 0; i < node.linksTo.length; i++) {\n                    var point = node.linksTo[i];\n                    if (point.fromNode.column > fromColumn &&\n                        point.fromNode !== node // #16080\n                    ) {\n                        fromNode = point.fromNode;\n                        fromColumn = fromNode.column;\n                    }\n                }\n                return { fromNode: fromNode, fromColumn: fromColumn };\n            };\n            /**\n             * Calculate node.column if it's not set by user\n             * @private\n             */\n            SankeyPoint.prototype.setNodeColumn = function () {\n                var node = this;\n                if (!defined(node.options.column)) {\n                    // No links to this node, place it left\n                    if (node.linksTo.length === 0) {\n                        node.column = 0;\n                    }\n                    else {\n                        node.column = node.getFromNode().fromColumn + 1;\n                    }\n                }\n            };\n            /**\n             * @private\n             */\n            SankeyPoint.prototype.isValid = function () {\n                return this.isNode || typeof this.weight === 'number';\n            };\n            return SankeyPoint;\n        }(ColumnSeries.prototype.pointClass));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SankeyPoint;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeySeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A sankey diagram is a type of flow diagram, in which the width of the\n         * link between two nodes is shown proportionally to the flow quantity.\n         *\n         * @sample highcharts/demo/sankey-diagram/\n         *         Sankey diagram\n         * @sample highcharts/plotoptions/sankey-inverted/\n         *         Inverted sankey diagram\n         * @sample highcharts/plotoptions/sankey-outgoing\n         *         Sankey diagram with outgoing links\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts\n         * @excluding    animationLimit, boostThreshold, borderRadius,\n         *               crisp, cropThreshold, colorAxis, colorKey, depth, dragDrop,\n         *               edgeColor, edgeWidth, findNearestPointBy, grouping,\n         *               groupPadding, groupZPadding, maxPointWidth, negativeColor,\n         *               pointInterval, pointIntervalUnit, pointPadding,\n         *               pointPlacement, pointRange, pointStart, pointWidth,\n         *               shadow, softThreshold, stacking, threshold, zoneAxis,\n         *               zones, minPointLength, dataSorting, boostBlending\n         * @requires     modules/sankey\n         * @optionparent plotOptions.sankey\n         *\n         * @private\n         */\n        var SankeySeriesDefaults = {\n            borderWidth: 0,\n            colorByPoint: true,\n            /**\n             * Higher numbers makes the links in a sankey diagram or dependency\n             * wheelrender more curved. A `curveFactor` of 0 makes the lines\n             * straight.\n             *\n             * @private\n             */\n            curveFactor: 0.33,\n            /**\n             * Options for the data labels appearing on top of the nodes and links.\n             * For sankey charts, data labels are visible for the nodes by default,\n             * but hidden for links. This is controlled by modifying the\n             * `nodeFormat`, and the `format` that applies to links and is an empty\n             * string by default.\n             *\n             * @declare Highcharts.SeriesSankeyDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                enabled: true,\n                backgroundColor: 'none',\n                crop: false,\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _nodes_ in the sankey diagram. By\n                 * default the `nodeFormatter` returns `{point.name}`.\n                 *\n                 * @sample highcharts/plotoptions/sankey-link-datalabels/\n                 *         Node and link data labels\n                 *\n                 * @type {string}\n                 */\n                nodeFormat: void 0,\n                /**\n                 * Callback to format data labels for _nodes_ in the sankey diagram.\n                 * The `nodeFormat` option takes precedence over the\n                 * `nodeFormatter`.\n                 *\n                 * @type  {Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction}\n                 * @since 6.0.2\n                 */\n                nodeFormatter: function () {\n                    return this.point.name;\n                },\n                format: void 0,\n                /**\n                 * @type {Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction}\n                 */\n                formatter: function () {\n                    return;\n                },\n                inside: true\n            },\n            /**\n             * @default   true\n             * @extends   plotOptions.series.inactiveOtherPoints\n             * @private\n             */\n            inactiveOtherPoints: true,\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not node and link options.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {Array<*>}\n             * @since     7.1.0\n             * @apioption plotOptions.sankey.levels\n             */\n            /**\n             * Can set `borderColor` on all nodes which lay on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @apioption plotOptions.sankey.levels.borderColor\n             */\n            /**\n             * Can set `borderWidth` on all nodes which lay on the same level.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sankey.levels.borderWidth\n             */\n            /**\n             * Can set `color` on all nodes which lay on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.sankey.levels.color\n             */\n            /**\n             * Can set `colorByPoint` on all nodes which lay on the same level.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption plotOptions.sankey.levels.colorByPoint\n             */\n            /**\n             * Can set `dataLabels` on all points which lay on the same level.\n             *\n             * @extends   plotOptions.sankey.dataLabels\n             * @apioption plotOptions.sankey.levels.dataLabels\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sankey.levels.level\n             */\n            /**\n             * Can set `linkOpacity` on all points which lay on the same level.\n             *\n             * @type      {number}\n             * @default   0.5\n             * @apioption plotOptions.sankey.levels.linkOpacity\n             */\n            /**\n             * Can set `states` on all nodes and points which lay on the same level.\n             *\n             * @extends   plotOptions.sankey.states\n             * @apioption plotOptions.sankey.levels.states\n             */\n            /**\n             * Determines color mode for sankey links. Available options:\n             *\n             * - `from` color of the sankey link will be the same as the 'from node'\n             *\n             * - `gradient` color of the sankey link will be set to gradient between\n             * colors of 'from node' and 'to node'\n             *\n             * - `to` color of the sankey link will be same as the 'to node'.\n             *\n             * @sample highcharts/demo/vertical-sankey\n             *         Vertical sankey diagram with gradients\n             * @sample highcharts/series-sankey/link-color-mode\n             *         Sankey diagram with gradients and explanation\n             *\n             * @type      {('from'|'gradient'|'to')}\n             * @since     @next\n             */\n            linkColorMode: 'from',\n            /**\n             * Opacity for the links between nodes in the sankey diagram.\n             *\n             * @private\n             */\n            linkOpacity: 0.5,\n            /**\n             * Opacity for the nodes in the sankey diagram.\n             *\n             * @private\n             */\n            opacity: 1,\n            /**\n             * The minimal width for a line of a sankey. By default,\n             * 0 values are not shown.\n             *\n             * @sample highcharts/plotoptions/sankey-minlinkwidth\n             *         Sankey diagram with minimal link height\n             *\n             * @type      {number}\n             * @since     7.1.3\n             * @default   0\n             * @apioption plotOptions.sankey.minLinkWidth\n             *\n             * @private\n             */\n            minLinkWidth: 0,\n            /**\n             * Determines which side of the chart the nodes are to be aligned to. When\n             * the chart is inverted, `top` aligns to the left and `bottom` to the\n             * right.\n             *\n             * @sample highcharts/plotoptions/sankey-nodealignment\n             *         Node alignment demonstrated\n             *\n             * @type      {'top'|'center'|'bottom'}\n             * @apioption plotOptions.sankey.nodeAlignment\n             */\n            nodeAlignment: 'center',\n            /**\n             * The pixel width of each node in a sankey diagram or dependency wheel,\n             * or the height in case the chart is inverted.\n             *\n             * @private\n             */\n            nodeWidth: 20,\n            /**\n             * The padding between nodes in a sankey diagram or dependency wheel, in\n             * pixels.\n             *\n             * If the number of nodes is so great that it is possible to lay them\n             * out within the plot area with the given `nodePadding`, they will be\n             * rendered with a smaller padding as a strategy to avoid overflow.\n             *\n             * @private\n             */\n            nodePadding: 10,\n            showInLegend: false,\n            states: {\n                hover: {\n                    /**\n                     * Opacity for the links between nodes in the sankey diagram in\n                     * hover mode.\n                     */\n                    linkOpacity: 1,\n                    /**\n                     * Opacity for the nodes in the sankey diagram in hover mode.\n                     */\n                    opacity: 1\n                },\n                /**\n                 * The opposite state of a hover for a single point node/link.\n                 *\n                 * @declare Highcharts.SeriesStatesInactiveOptionsObject\n                 */\n                inactive: {\n                    /**\n                     * Opacity for the links between nodes in the sankey diagram in\n                     * inactive mode.\n                     */\n                    linkOpacity: 0.1,\n                    /**\n                     * Opacity of the nodes in the sankey diagram in inactive mode.\n                     */\n                    opacity: 0.1,\n                    /**\n                     * Animation when not hovering over the marker.\n                     *\n                     * @type      {boolean|Partial<Highcharts.AnimationOptionsObject>}\n                     * @apioption plotOptions.series.states.inactive.animation\n                     */\n                    animation: {\n                        /** @internal */\n                        duration: 50\n                    }\n                }\n            },\n            tooltip: {\n                /**\n                 * A callback for defining the format for _nodes_ in the chart's\n                 * tooltip, as opposed to links.\n                 *\n                 * @type      {Highcharts.FormatterCallbackFunction<Highcharts.SankeyNodeObject>}\n                 * @since     6.0.2\n                 * @apioption plotOptions.sankey.tooltip.nodeFormatter\n                 */\n                /**\n                 * Whether the tooltip should follow the pointer or stay fixed on\n                 * the item.\n                 */\n                followPointer: true,\n                headerFormat: '<span style=\"font-size: 0.8em\">{series.name}</span><br/>',\n                pointFormat: '{point.fromNode.name} \\u2192 {point.toNode.name}: <b>{point.weight}</b><br/>',\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _nodes_ in tooltip of a diagram\n                 * series, as opposed to links.\n                 */\n                nodeFormat: '{point.name}: <b>{point.sum}</b><br/>'\n            }\n        };\n        /**\n         * A `sankey` series. If the [type](#series.sankey.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sankey\n         * @excluding animationLimit, boostBlending, boostThreshold, borderColor,\n         *            borderRadius, borderWidth, crisp, cropThreshold, dataParser,\n         *            dataURL, depth, dragDrop, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, grouping, groupPadding,\n         *            groupZPadding, label, maxPointWidth, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPadding, pointPlacement, pointRange,\n         *            pointStart, pointWidth, shadow, softThreshold, stacking,\n         *            threshold, zoneAxis, zones, dataSorting\n         * @product   highcharts\n         * @requires  modules/sankey\n         * @apioption series.sankey\n         */\n        /**\n         * A collection of options for the individual nodes. The nodes in a sankey\n         * diagram are auto-generated instances of `Highcharts.Point`, but options can\n         * be applied here and linked by the `id`.\n         *\n         * @sample highcharts/css/sankey/\n         *         Sankey diagram with node options\n         *\n         * @declare   Highcharts.SeriesSankeyNodesOptionsObject\n         * @type      {Array<*>}\n         * @product   highcharts\n         * @apioption series.sankey.nodes\n         */\n        /**\n         * The id of the auto-generated node, refering to the `from` or `to` setting of\n         * the link.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.id\n         */\n        /**\n         * The color of the auto generated node.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.color\n         */\n        /**\n         * The color index of the auto generated node, especially for use in styled\n         * mode.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.colorIndex\n         */\n        /**\n         * An optional column index of where to place the node. The default behaviour is\n         * to place it next to the preceding node. Note that this option name is\n         * counter intuitive in inverted charts, like for example an organization chart\n         * rendered top down. In this case the \"columns\" are horizontal.\n         *\n         * @sample highcharts/plotoptions/sankey-node-column/\n         *         Specified node column\n         *\n         * @type      {number}\n         * @since     6.0.5\n         * @product   highcharts\n         * @apioption series.sankey.nodes.column\n         */\n        /**\n         * Individual data label for each node. The options are the same as\n         * the ones for [series.sankey.dataLabels](#series.sankey.dataLabels).\n         *\n         * @extends   plotOptions.sankey.dataLabels\n         * @apioption series.sankey.nodes.dataLabels\n         */\n        /**\n         * An optional level index of where to place the node. The default behaviour is\n         * to place it next to the preceding node. Alias of `nodes.column`, but in\n         * inverted sankeys and org charts, the levels are laid out as rows.\n         *\n         * @type      {number}\n         * @since     7.1.0\n         * @product   highcharts\n         * @apioption series.sankey.nodes.level\n         */\n        /**\n         * The name to display for the node in data labels and tooltips. Use this when\n         * the name is different from the `id`. Where the id must be unique for each\n         * node, this is not necessary for the name.\n         *\n         * @sample highcharts/css/sankey/\n         *         Sankey diagram with node options\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.nodes.name\n         */\n        /**\n         * This option is deprecated, use\n         * [offsetHorizontal](#series.sankey.nodes.offsetHorizontal) and\n         * [offsetVertical](#series.sankey.nodes.offsetVertical) instead.\n         *\n         * In a horizontal layout, the vertical offset of a node in terms of weight.\n         * Positive values shift the node downwards, negative shift it upwards. In a\n         * vertical layout, like organization chart, the offset is horizontal.\n         *\n         * If a percantage string is given, the node is offset by the percentage of the\n         * node size plus `nodePadding`.\n         *\n         * @deprecated\n         * @type      {number|string}\n         * @default   0\n         * @since     6.0.5\n         * @product   highcharts\n         * @apioption series.sankey.nodes.offset\n         */\n        /**\n         * The horizontal offset of a node. Positive values shift the node right,\n         * negative shift it left.\n         *\n         * If a percantage string is given, the node is offset by the percentage of the\n         * node size.\n         *\n         * @sample highcharts/plotoptions/sankey-node-column/\n         *         Specified node offset\n         *\n         * @type      {number|string}\n         * @since 9.3.0\n         * @product   highcharts\n         * @apioption series.sankey.nodes.offsetHorizontal\n         */\n        /**\n         * The vertical offset of a node. Positive values shift the node down,\n         * negative shift it up.\n         *\n         * If a percantage string is given, the node is offset by the percentage of the\n         * node size.\n         *\n         * @sample highcharts/plotoptions/sankey-node-column/\n         *         Specified node offset\n         *\n         * @type      {number|string}\n         * @since 9.3.0\n         * @product   highcharts\n         * @apioption series.sankey.nodes.offsetVertical\n         */\n        /**\n         * An array of data points for the series. For the `sankey` series type,\n         * points can be given in the following way:\n         *\n         * An array of objects with named values. The following snippet shows only a\n         * few settings, see the complete options set below. If the total number of data\n         * points exceeds the series' [turboThreshold](#series.area.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         from: 'Category1',\n         *         to: 'Category2',\n         *         weight: 2\n         *     }, {\n         *         from: 'Category1',\n         *         to: 'Category3',\n         *         weight: 5\n         *     }]\n         *  ```\n         *\n         *  When you provide the data as tuples, the keys option has to be set as well.\n         *\n         *  ```js\n         *     keys: ['from', 'to', 'weight'],\n         *     data: [\n         *         ['Category1', 'Category2', 2],\n         *         ['Category1', 'Category3', 5]\n         *     ]\n         *  ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.SeriesSankeyPointOptionsObject\n         * @type      {Array<*>|Array<Array<(string|number)>>}\n         * @extends   series.line.data\n         * @excluding dragDrop, drilldown, marker, x, y\n         * @product   highcharts\n         * @apioption series.sankey.data\n         */\n        /**\n         * The color for the individual _link_. By default, the link color is the same\n         * as the node it extends from. The `series.fillOpacity` option also applies to\n         * the points, so when setting a specific link color, consider setting the\n         * `fillOpacity` to 1.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts\n         * @apioption series.sankey.data.color\n         */\n        /**\n         * @type      {Highcharts.SeriesSankeyDataLabelsOptionsObject|Array<Highcharts.SeriesSankeyDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.sankey.data.dataLabels\n         */\n        /**\n         * The node that the link runs from.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.data.from\n         */\n        /**\n         * The node that the link runs to.\n         *\n         * @type      {string}\n         * @product   highcharts\n         * @apioption series.sankey.data.to\n         */\n        /**\n         * Whether the link goes out of the system.\n         *\n         * @sample highcharts/plotoptions/sankey-outgoing\n         *         Sankey chart with outgoing links\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.sankey.data.outgoing\n         */\n        /**\n         * The weight of the link.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.sankey.data.weight\n         */\n        ''; // adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SankeySeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeyColumnComposition.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defined = U.defined, pushUnique = U.pushUnique, relativeLength = U.relativeLength;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var SankeyColumnComposition;\n        (function (SankeyColumnComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * SankeyColumn Composition\n             * @private\n             * @function Highcharts.SankeyColumn#compose\n             *\n             * @param {Array<SankeyPoint>} points\n             * The array of nodes\n             * @param {SankeySeries} series\n             * Series connected to column\n             * @return {ArrayComposition} SankeyColumnArray\n             */\n            function compose(points, series) {\n                var sankeyColumnArray = points;\n                sankeyColumnArray.sankeyColumn =\n                    new SankeyColumnAdditions(sankeyColumnArray, series);\n                return sankeyColumnArray;\n            }\n            SankeyColumnComposition.compose = compose;\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            var SankeyColumnAdditions = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructor\n                 *\n                 * */\n                function SankeyColumnAdditions(points, series) {\n                    this.points = points;\n                    this.series = series;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Calculate translation factor used in column and nodes distribution\n                 * @private\n                 * @function Highcharts.SankeyColumn#getTranslationFactor\n                 *\n                 * @param {SankeySeries} series\n                 * The Series\n                 * @return {number} TranslationFactor\n                 * Translation Factor\n                 */\n                SankeyColumnAdditions.prototype.getTranslationFactor = function (series) {\n                    var column = this.points, nodes = column.slice(), chart = series.chart, minLinkWidth = series.options.minLinkWidth || 0;\n                    var skipPoint, factor = 0, i, remainingHeight = ((chart.plotSizeY || 0) -\n                        (series.options.borderWidth || 0) -\n                        (column.length - 1) * series.nodePadding);\n                    // Because the minLinkWidth option doesn't obey the direct\n                    // translation, we need to run translation iteratively, check\n                    // node heights, remove those nodes affected by minLinkWidth,\n                    // check again, etc.\n                    while (column.length) {\n                        factor = remainingHeight / column.sankeyColumn.sum();\n                        skipPoint = false;\n                        i = column.length;\n                        while (i--) {\n                            if (column[i].getSum() * factor < minLinkWidth) {\n                                column.splice(i, 1);\n                                remainingHeight =\n                                    Math.max(0, remainingHeight - minLinkWidth);\n                                skipPoint = true;\n                            }\n                        }\n                        if (!skipPoint) {\n                            break;\n                        }\n                    }\n                    // Re-insert original nodes\n                    column.length = 0;\n                    for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n                        var node = nodes_1[_i];\n                        column.push(node);\n                    }\n                    return factor;\n                };\n                /**\n                 * Get the top position of the column in pixels\n                 * @private\n                 * @function Highcharts.SankeyColumn#top\n                 *\n                 * @param {number} factor\n                 * The Translation Factor\n                 * @return {number} top\n                 * The top position of the column\n                 */\n                SankeyColumnAdditions.prototype.top = function (factor) {\n                    var series = this.series, nodePadding = series.nodePadding, height = this.points.reduce(function (height, node) {\n                        if (height > 0) {\n                            height += nodePadding;\n                        }\n                        var nodeHeight = Math.max(node.getSum() * factor, series.options.minLinkWidth || 0);\n                        height += nodeHeight;\n                        return height;\n                    }, 0);\n                    // Node alignment option handling #19096\n                    return {\n                        top: 0,\n                        center: 0.5,\n                        bottom: 1\n                    }[series.options.nodeAlignment || 'center'] * ((series.chart.plotSizeY || 0) - height);\n                };\n                /**\n                 * Get the left position of the column in pixels\n                 * @private\n                 * @function Highcharts.SankeyColumn#top\n                 *\n                 * @param {number} factor\n                 * The Translation Factor\n                 * @return {number} left\n                 * The left position of the column\n                 */\n                SankeyColumnAdditions.prototype.left = function (factor) {\n                    var series = this.series, chart = series.chart, equalNodes = series.options.equalNodes, maxNodesLength = (chart.inverted ? chart.plotHeight : chart.plotWidth), nodePadding = series.nodePadding, width = this.points.reduce(function (width, node) {\n                        if (width > 0) {\n                            width += nodePadding;\n                        }\n                        var nodeWidth = equalNodes ?\n                            maxNodesLength / node.series.nodes.length -\n                                nodePadding :\n                            Math.max(node.getSum() * factor, series.options.minLinkWidth || 0);\n                        width += nodeWidth;\n                        return width;\n                    }, 0);\n                    return ((chart.plotSizeX || 0) - Math.round(width)) / 2;\n                };\n                /**\n                 * Calculate sum of all nodes inside specific column\n                 * @private\n                 * @function Highcharts.SankeyColumn#sum\n                 *\n                 * @param {ArrayComposition} this\n                 * Sankey Column Array\n                 *\n                 * @return {number} sum\n                 * Sum of all nodes inside column\n                 */\n                SankeyColumnAdditions.prototype.sum = function () {\n                    return this.points.reduce(function (sum, node) { return (sum + node.getSum()); }, 0);\n                };\n                /**\n                 * Get the offset in pixels of a node inside the column\n                 * @private\n                 * @function Highcharts.SankeyColumn#offset\n                 *\n                 * @param {SankeyPoint} node\n                 * Sankey node\n                 * @param {number} factor\n                 * Translation Factor\n                 * @return {number} offset\n                 * Offset of a node inside column\n                 */\n                SankeyColumnAdditions.prototype.offset = function (node, factor) {\n                    var column = this.points, series = this.series, nodePadding = series.nodePadding;\n                    var offset = 0, totalNodeOffset;\n                    if (series.is('organization') && node.hangsFrom) {\n                        return {\n                            absoluteTop: node.hangsFrom.nodeY\n                        };\n                    }\n                    for (var i = 0; i < column.length; i++) {\n                        var sum = column[i].getSum();\n                        var height = Math.max(sum * factor, series.options.minLinkWidth || 0);\n                        var directionOffset = node.options[series.chart.inverted ?\n                            'offsetHorizontal' :\n                            'offsetVertical'], optionOffset = node.options.offset || 0;\n                        if (sum) {\n                            totalNodeOffset = height + nodePadding;\n                        }\n                        else {\n                            // If node sum equals 0 nodePadding is missed #12453\n                            totalNodeOffset = 0;\n                        }\n                        if (column[i] === node) {\n                            return {\n                                relativeTop: offset + (defined(directionOffset) ?\n                                    // directionOffset is a percent\n                                    // of the node height\n                                    relativeLength(directionOffset, height) :\n                                    relativeLength(optionOffset, totalNodeOffset))\n                            };\n                        }\n                        offset += totalNodeOffset;\n                    }\n                };\n                return SankeyColumnAdditions;\n            }());\n            SankeyColumnComposition.SankeyColumnAdditions = SankeyColumnAdditions;\n        })(SankeyColumnComposition || (SankeyColumnComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SankeyColumnComposition;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2021 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            var index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            var getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            var variateColor = function (color) {\n                var colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            var result = {}, defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce(function (obj, item) {\n                        var level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            var before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            var childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach(function (child, i) {\n                var newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            var value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            var rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var TreeUtilities = {\n            getColor: getColor,\n            getLevelOptions: getLevelOptions,\n            setTreeValues: setTreeValues,\n            updateRootId: updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Series/Sankey/SankeySeries.js', [_modules['Core/Globals.js'], _modules['Series/NodesComposition.js'], _modules['Series/Sankey/SankeyPoint.js'], _modules['Series/Sankey/SankeySeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Sankey/SankeyColumnComposition.js'], _modules['Core/Color/Color.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (H, NodesComposition, SankeyPoint, SankeySeriesDefaults, SeriesRegistry, SankeyColumnComposition, Color, TU, U) {\n        /* *\n         *\n         *  Sankey diagram module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, LineSeries = _a.line;\n        var color = Color.parse;\n        var getLevelOptions = TU.getLevelOptions;\n        var clamp = U.clamp, extend = U.extend, isObject = U.isObject, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength, stableSort = U.stableSort;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.sankey\n         *\n         * @augments Highcharts.Series\n         */\n        var SankeySeries = /** @class */ (function (_super) {\n            __extends(SankeySeries, _super);\n            function SankeySeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.colDistance = void 0;\n                _this.data = void 0;\n                _this.group = void 0;\n                _this.nodeLookup = void 0;\n                _this.nodePadding = void 0;\n                _this.nodes = void 0;\n                _this.nodeWidth = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.translationFactor = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            SankeySeries.getDLOptions = function (params) {\n                var optionsPoint = (isObject(params.optionsPoint) ?\n                    params.optionsPoint.dataLabels :\n                    {}), optionsLevel = (isObject(params.level) ?\n                    params.level.dataLabels :\n                    {}), options = merge({\n                    style: {}\n                }, optionsLevel, optionsPoint);\n                return options;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create node columns by analyzing the nodes and the relations between\n             * incoming and outgoing links.\n             * @private\n             */\n            SankeySeries.prototype.createNodeColumns = function () {\n                var columns = [];\n                for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                    var node = _a[_i];\n                    node.setNodeColumn();\n                    if (!columns[node.column]) {\n                        columns[node.column] =\n                            SankeyColumnComposition.compose([], this);\n                    }\n                    columns[node.column].push(node);\n                }\n                // Fill in empty columns (#8865)\n                for (var i = 0; i < columns.length; i++) {\n                    if (typeof columns[i] === 'undefined') {\n                        columns[i] =\n                            SankeyColumnComposition.compose([], this);\n                    }\n                }\n                return columns;\n            };\n            /**\n             * Order the nodes, starting with the root node(s). (#9818)\n             * @private\n             */\n            SankeySeries.prototype.order = function (node, level) {\n                var series = this;\n                // Prevents circular recursion:\n                if (typeof node.level === 'undefined') {\n                    node.level = level;\n                    for (var _i = 0, _a = node.linksFrom; _i < _a.length; _i++) {\n                        var link = _a[_i];\n                        if (link.toNode) {\n                            series.order(link.toNode, level + 1);\n                        }\n                    }\n                }\n            };\n            /**\n             * Extend generatePoints by adding the nodes, which are Point objects\n             * but pushed to the this.nodes array.\n             * @private\n             */\n            SankeySeries.prototype.generatePoints = function () {\n                NodesComposition.generatePoints.apply(this, arguments);\n                if (this.orderNodes) {\n                    for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {\n                        var node = _a[_i];\n                        // Identify the root node(s)\n                        if (node.linksTo.length === 0) {\n                            // Start by the root node(s) and recursively set the level\n                            // on all following nodes.\n                            this.order(node, 0);\n                        }\n                    }\n                    stableSort(this.nodes, function (a, b) { return (a.level - b.level); });\n                }\n            };\n            /**\n             * Overridable function to get node padding, overridden in dependency\n             * wheel series type.\n             * @private\n             */\n            SankeySeries.prototype.getNodePadding = function () {\n                var nodePadding = this.options.nodePadding || 0;\n                // If the number of columns is so great that they will overflow with\n                // the given nodePadding, we sacrifice the padding in order to\n                // render all nodes within the plot area (#11917).\n                if (this.nodeColumns) {\n                    var maxLength = this.nodeColumns.reduce(function (acc, col) { return Math.max(acc, col.length); }, 0);\n                    if (maxLength * nodePadding > this.chart.plotSizeY) {\n                        nodePadding = this.chart.plotSizeY / maxLength;\n                    }\n                }\n                return nodePadding;\n            };\n            /**\n             * Define hasData function for non-cartesian series.\n             * @private\n             * @return {boolean}\n             *         Returns true if the series has points at all.\n             */\n            SankeySeries.prototype.hasData = function () {\n                return !!this.processedXData.length; // != 0\n            };\n            /**\n             * Return the presentational attributes.\n             * @private\n             */\n            SankeySeries.prototype.pointAttribs = function (point, state) {\n                if (!point) {\n                    return {};\n                }\n                var series = this, level = point.isNode ? point.level : point.fromNode.level, levelOptions = series.mapOptionsToLevel[level || 0] || {}, options = point.options, stateOptions = (levelOptions.states && levelOptions.states[state || '']) || {}, values = [\n                    'colorByPoint',\n                    'borderColor',\n                    'borderWidth',\n                    'linkOpacity',\n                    'opacity'\n                ].reduce(function (obj, key) {\n                    obj[key] = pick(stateOptions[key], options[key], levelOptions[key], series.options[key]);\n                    return obj;\n                }, {}), color = pick(stateOptions.color, options.color, values.colorByPoint ? point.color : levelOptions.color);\n                // Node attributes\n                if (point.isNode) {\n                    return {\n                        fill: color,\n                        stroke: values.borderColor,\n                        'stroke-width': values.borderWidth,\n                        opacity: values.opacity\n                    };\n                }\n                // Link attributes\n                return {\n                    fill: Color.parse(color).setOpacity(values.linkOpacity).get()\n                };\n            };\n            SankeySeries.prototype.drawTracker = function () {\n                ColumnSeries.prototype.drawTracker.call(this, this.points);\n                ColumnSeries.prototype.drawTracker.call(this, this.nodes);\n            };\n            SankeySeries.prototype.drawPoints = function () {\n                ColumnSeries.prototype.drawPoints.call(this, this.points);\n                ColumnSeries.prototype.drawPoints.call(this, this.nodes);\n            };\n            SankeySeries.prototype.drawDataLabels = function () {\n                ColumnSeries.prototype.drawDataLabels.call(this, this.points);\n                ColumnSeries.prototype.drawDataLabels.call(this, this.nodes);\n            };\n            /**\n             * Run pre-translation by generating the nodeColumns.\n             * @private\n             */\n            SankeySeries.prototype.translate = function () {\n                if (!this.processedXData) {\n                    this.processData();\n                }\n                this.generatePoints();\n                this.nodeColumns = this.createNodeColumns();\n                this.nodeWidth = relativeLength(this.options.nodeWidth, this.chart.plotSizeX);\n                var series = this, chart = this.chart, options = this.options, nodeWidth = this.nodeWidth, nodeColumns = this.nodeColumns;\n                this.nodePadding = this.getNodePadding();\n                // Find out how much space is needed. Base it on the translation\n                // factor of the most spaceous column.\n                this.translationFactor = nodeColumns.reduce(function (translationFactor, column) { return Math.min(translationFactor, column.sankeyColumn.getTranslationFactor(series)); }, Infinity);\n                this.colDistance =\n                    (chart.plotSizeX - nodeWidth -\n                        options.borderWidth) / Math.max(1, nodeColumns.length - 1);\n                // Calculate level options used in sankey and organization\n                series.mapOptionsToLevel = getLevelOptions({\n                    // NOTE: if support for allowTraversingTree is added, then from\n                    // should be the level of the root node.\n                    from: 1,\n                    levels: options.levels,\n                    to: nodeColumns.length - 1,\n                    defaults: {\n                        borderColor: options.borderColor,\n                        borderRadius: options.borderRadius,\n                        borderWidth: options.borderWidth,\n                        color: series.color,\n                        colorByPoint: options.colorByPoint,\n                        // NOTE: if support for allowTraversingTree is added, then\n                        // levelIsConstant should be optional.\n                        levelIsConstant: true,\n                        linkColor: options.linkColor,\n                        linkLineWidth: options.linkLineWidth,\n                        linkOpacity: options.linkOpacity,\n                        states: options.states\n                    }\n                });\n                // First translate all nodes so we can use them when drawing links\n                for (var _i = 0, nodeColumns_1 = nodeColumns; _i < nodeColumns_1.length; _i++) {\n                    var column = nodeColumns_1[_i];\n                    for (var _a = 0, column_1 = column; _a < column_1.length; _a++) {\n                        var node = column_1[_a];\n                        series.translateNode(node, column);\n                    }\n                }\n                // Then translate links\n                for (var _b = 0, _c = this.nodes; _b < _c.length; _b++) {\n                    var node = _c[_b];\n                    // Translate the links from this node\n                    for (var _d = 0, _e = node.linksFrom; _d < _e.length; _d++) {\n                        var linkPoint = _e[_d];\n                        // If weight is 0 - don't render the link path #12453,\n                        // render null points (for organization chart)\n                        if ((linkPoint.weight || linkPoint.isNull) && linkPoint.to) {\n                            series.translateLink(linkPoint);\n                            linkPoint.allowShadow = false;\n                        }\n                    }\n                }\n            };\n            /**\n             * Run translation operations for one link.\n             * @private\n             */\n            SankeySeries.prototype.translateLink = function (point) {\n                var getY = function (node, fromOrTo) {\n                    var linkTop = (node.offset(point, fromOrTo) *\n                        translationFactor);\n                    var y = Math.min(node.nodeY + linkTop, \n                    // Prevent links from spilling below the node (#12014)\n                    node.nodeY + (node.shapeArgs && node.shapeArgs.height || 0) - linkHeight);\n                    return y;\n                };\n                var fromNode = point.fromNode, toNode = point.toNode, chart = this.chart, inverted = chart.inverted, translationFactor = this.translationFactor, options = this.options, linkColorMode = pick(point.linkColorMode, options.linkColorMode), curvy = ((chart.inverted ? -this.colDistance : this.colDistance) *\n                    options.curveFactor), nodeLeft = fromNode.nodeX, right = toNode.nodeX, outgoing = point.outgoing;\n                var linkHeight = Math.max(point.weight * translationFactor, this.options.minLinkWidth), fromY = getY(fromNode, 'linksFrom'), toY = getY(toNode, 'linksTo'), nodeW = this.nodeWidth, straight = right > nodeLeft + nodeW;\n                if (chart.inverted) {\n                    fromY = chart.plotSizeY - fromY;\n                    toY = (chart.plotSizeY || 0) - toY;\n                    nodeW = -nodeW;\n                    linkHeight = -linkHeight;\n                    straight = nodeLeft > right;\n                }\n                point.shapeType = 'path';\n                point.linkBase = [\n                    fromY,\n                    fromY + linkHeight,\n                    toY,\n                    toY + linkHeight\n                ];\n                // Links going from left to right\n                if (straight && typeof toY === 'number') {\n                    point.shapeArgs = {\n                        d: [\n                            ['M', nodeLeft + nodeW, fromY],\n                            [\n                                'C',\n                                nodeLeft + nodeW + curvy,\n                                fromY,\n                                right - curvy,\n                                toY,\n                                right,\n                                toY\n                            ],\n                            ['L', right + (outgoing ? nodeW : 0), toY + linkHeight / 2],\n                            ['L', right, toY + linkHeight],\n                            [\n                                'C',\n                                right - curvy,\n                                toY + linkHeight,\n                                nodeLeft + nodeW + curvy,\n                                fromY + linkHeight,\n                                nodeLeft + nodeW, fromY + linkHeight\n                            ],\n                            ['Z']\n                        ]\n                    };\n                    // Experimental: Circular links pointing backwards. In\n                    // v6.1.0 this breaks the rendering completely, so even\n                    // this experimental rendering is an improvement. #8218.\n                    // @todo\n                    // - Make room for the link in the layout\n                    // - Automatically determine if the link should go up or\n                    //   down.\n                }\n                else if (typeof toY === 'number') {\n                    var bend = 20, vDist = chart.plotHeight - fromY - linkHeight, x1 = right - bend - linkHeight, x2 = right - bend, x3 = right, x4 = nodeLeft + nodeW, x5 = x4 + bend, x6 = x5 + linkHeight, fy1 = fromY, fy2 = fromY + linkHeight, fy3 = fy2 + bend, y4 = fy3 + vDist, y5 = y4 + bend, y6 = y5 + linkHeight, ty1 = toY, ty2 = ty1 + linkHeight, ty3 = ty2 + bend, cfy1 = fy2 - linkHeight * 0.7, cy2 = y5 + linkHeight * 0.7, cty1 = ty2 - linkHeight * 0.7, cx1 = x3 - linkHeight * 0.7, cx2 = x4 + linkHeight * 0.7;\n                    point.shapeArgs = {\n                        d: [\n                            ['M', x4, fy1],\n                            ['C', cx2, fy1, x6, cfy1, x6, fy3],\n                            ['L', x6, y4],\n                            ['C', x6, cy2, cx2, y6, x4, y6],\n                            ['L', x3, y6],\n                            ['C', cx1, y6, x1, cy2, x1, y4],\n                            ['L', x1, ty3],\n                            ['C', x1, cty1, cx1, ty1, x3, ty1],\n                            ['L', x3, ty2],\n                            ['C', x2, ty2, x2, ty2, x2, ty3],\n                            ['L', x2, y4],\n                            ['C', x2, y5, x2, y5, x3, y5],\n                            ['L', x4, y5],\n                            ['C', x5, y5, x5, y5, x5, y4],\n                            ['L', x5, fy3],\n                            ['C', x5, fy2, x5, fy2, x4, fy2],\n                            ['Z']\n                        ]\n                    };\n                }\n                // Place data labels in the middle\n                point.dlBox = {\n                    x: nodeLeft + (right - nodeLeft + nodeW) / 2,\n                    y: fromY + (toY - fromY) / 2,\n                    height: linkHeight,\n                    width: 0\n                };\n                // And set the tooltip anchor in the middle\n                point.tooltipPos = chart.inverted ? [\n                    chart.plotSizeY - point.dlBox.y - linkHeight / 2,\n                    chart.plotSizeX - point.dlBox.x\n                ] : [\n                    point.dlBox.x,\n                    point.dlBox.y + linkHeight / 2\n                ];\n                // Pass test in drawPoints. plotX/Y needs to be defined for dataLabels.\n                // #15863\n                point.y = point.plotY = 1;\n                point.x = point.plotX = 1;\n                if (!point.options.color) {\n                    if (linkColorMode === 'from') {\n                        point.color = fromNode.color;\n                    }\n                    else if (linkColorMode === 'to') {\n                        point.color = toNode.color;\n                    }\n                    else if (linkColorMode === 'gradient') {\n                        var fromColor = color(fromNode.color).get(), toColor = color(toNode.color).get();\n                        point.color = {\n                            linearGradient: {\n                                x1: 1,\n                                x2: 0,\n                                y1: 0,\n                                y2: 0\n                            },\n                            stops: [\n                                [0, inverted ? fromColor : toColor],\n                                [1, inverted ? toColor : fromColor]\n                            ]\n                        };\n                    }\n                }\n            };\n            /**\n             * Run translation operations for one node.\n             * @private\n             */\n            SankeySeries.prototype.translateNode = function (node, column) {\n                var translationFactor = this.translationFactor, chart = this.chart, options = this.options, borderRadius = options.borderRadius, _a = options.borderWidth, borderWidth = _a === void 0 ? 0 : _a, sum = node.getSum(), nodeHeight = Math.max(Math.round(sum * translationFactor), this.options.minLinkWidth), nodeWidth = Math.round(this.nodeWidth), crisp = Math.round(borderWidth) % 2 / 2, nodeOffset = column.sankeyColumn.offset(node, translationFactor), fromNodeTop = Math.floor(pick(nodeOffset.absoluteTop, (column.sankeyColumn.top(translationFactor) +\n                    nodeOffset.relativeTop))) + crisp, left = Math.floor(this.colDistance * node.column +\n                    borderWidth / 2) + relativeLength(node.options[chart.inverted ?\n                    'offsetVertical' :\n                    'offsetHorizontal'] || 0, nodeWidth) +\n                    crisp, nodeLeft = chart.inverted ?\n                    chart.plotSizeX - left :\n                    left;\n                node.sum = sum;\n                // If node sum is 0, don't render the rect #12453\n                if (sum) {\n                    // Draw the node\n                    node.shapeType = 'roundedRect';\n                    node.nodeX = nodeLeft;\n                    node.nodeY = fromNodeTop;\n                    var x = nodeLeft, y = fromNodeTop, width = node.options.width || options.width || nodeWidth, height = node.options.height || options.height || nodeHeight;\n                    // Border radius should not greater than half the height of the node\n                    // #18956\n                    var r = clamp(relativeLength((typeof borderRadius === 'object' ?\n                        borderRadius.radius :\n                        borderRadius || 0), width), 0, nodeHeight / 2);\n                    if (chart.inverted) {\n                        x = nodeLeft - nodeWidth;\n                        y = chart.plotSizeY - fromNodeTop - nodeHeight;\n                        width = node.options.height || options.height || nodeWidth;\n                        height = node.options.width || options.width || nodeHeight;\n                    }\n                    // Calculate data label options for the point\n                    node.dlOptions = SankeySeries.getDLOptions({\n                        level: this.mapOptionsToLevel[node.level],\n                        optionsPoint: node.options\n                    });\n                    // Pass test in drawPoints\n                    node.plotX = 1;\n                    node.plotY = 1;\n                    // Set the anchor position for tooltips\n                    node.tooltipPos = chart.inverted ? [\n                        chart.plotSizeY - y - height / 2,\n                        chart.plotSizeX - x - width / 2\n                    ] : [\n                        x + width / 2,\n                        y + height / 2\n                    ];\n                    node.shapeArgs = {\n                        x: x,\n                        y: y,\n                        width: width,\n                        height: height,\n                        r: r,\n                        display: node.hasShape() ? '' : 'none'\n                    };\n                }\n                else {\n                    node.dlOptions = {\n                        enabled: false\n                    };\n                }\n            };\n            SankeySeries.defaultOptions = merge(ColumnSeries.defaultOptions, SankeySeriesDefaults);\n            return SankeySeries;\n        }(ColumnSeries));\n        NodesComposition.compose(SankeyPoint, SankeySeries);\n        extend(SankeySeries.prototype, {\n            animate: LineSeries.prototype.animate,\n            // Create a single node that holds information on incoming and outgoing\n            // links.\n            createNode: NodesComposition.createNode,\n            forceDL: true,\n            invertible: true,\n            isCartesian: false,\n            orderNodes: true,\n            noSharedTooltip: true,\n            pointArrayMap: ['from', 'to', 'weight'],\n            pointClass: SankeyPoint,\n            searchPoint: H.noop\n        });\n        SeriesRegistry.registerSeriesType('sankey', SankeySeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A node in a sankey diagram.\n         *\n         * @interface Highcharts.SankeyNodeObject\n         * @extends Highcharts.Point\n         * @product highcharts\n         */ /**\n        * The color of the auto generated node.\n        *\n        * @name Highcharts.SankeyNodeObject#color\n        * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n        */ /**\n        * The color index of the auto generated node, especially for use in styled\n        * mode.\n        *\n        * @name Highcharts.SankeyNodeObject#colorIndex\n        * @type {number}\n        */ /**\n        * An optional column index of where to place the node. The default behaviour is\n        * to place it next to the preceding node.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *      Specified node column\n        *\n        * @name Highcharts.SankeyNodeObject#column\n        * @type {number}\n        * @since 6.0.5\n        */ /**\n        * The id of the auto-generated node, refering to the `from` or `to` setting of\n        * the link.\n        *\n        * @name Highcharts.SankeyNodeObject#id\n        * @type {string}\n        */ /**\n        * The name to display for the node in data labels and tooltips. Use this when\n        * the name is different from the `id`. Where the id must be unique for each\n        * node, this is not necessary for the name.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/sankey/|Highcharts-Demo:}\n        *         Sankey diagram with node options\n        *\n        * @name Highcharts.SankeyNodeObject#name\n        * @type {string}\n        * @product highcharts\n        */ /**\n        * This option is deprecated, use\n        * {@link Highcharts.SankeyNodeObject#offsetHorizontal} and\n        * {@link Highcharts.SankeyNodeObject#offsetVertical} instead.\n        *\n        * The vertical offset of a node in terms of weight. Positive values shift the\n        * node downwards, negative shift it upwards.\n        *\n        * If a percantage string is given, the node is offset by the percentage of the\n        * node size plus `nodePadding`.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *         Specified node offset\n        *\n        * @deprecated\n        * @name Highcharts.SankeyNodeObject#offset\n        * @type {number|string}\n        * @default 0\n        * @since 6.0.5\n        */ /**\n        * The horizontal offset of a node. Positive values shift the node right,\n        * negative shift it left.\n        *\n        * If a percantage string is given, the node is offset by the percentage of the\n        * node size.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *         Specified node offset\n        *\n        * @name Highcharts.SankeyNodeObject#offsetHorizontal\n        * @type {number|string}\n        * @since 9.3.0\n        */ /**\n        * The vertical offset of a node. Positive values shift the node down,\n        * negative shift it up.\n        *\n        * If a percantage string is given, the node is offset by the percentage of the\n        * node size.\n        *\n        * @see {@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        *         Specified node offset\n        *\n        * @name Highcharts.SankeyNodeObject#offsetVertical\n        * @type {number|string}\n        * @since 9.3.0\n        */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesSankeyDataLabelsFormatterContextObject|Highcharts.PointLabelObject} this\n         *        Data label context to format\n         *\n         * @return {string|undefined}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the node formatter function.\n         *\n         * @interface Highcharts.SeriesSankeyDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         */ /**\n        * The node object. The node name, if defined, is available through\n        * `this.point.name`.\n        * @name Highcharts.SeriesSankeyDataLabelsFormatterContextObject#point\n        * @type {Highcharts.SankeyNodeObject}\n        */\n        ''; // detach doclets above\n\n        return SankeySeries;\n    });\n    _registerModule(_modules, 'masters/modules/sankey.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","NodesComposition","_a","series","seriesProto","prototype","pointProto","pointClass","defined","extend","find","merge","pick","composedMembers","destroy","data","concat","points","nodes","arguments","setData","forEach","node","length","setNodeState","state","others","isNode","linksTo","linksFrom","fromNode","toNode","linkOrNode","setState","graphic","updateNode","options","redraw","animation","runEvent","_this","dataLength","linkConfig","index","update","call","nodeIndex","reduce","prevIndex","n","id","nodeConfig","push","chart","compose","PointClass","SeriesClass","pushUnique","pointProto_1","seriesProto_1","createNode","findById","newNode_1","init","className","y","getSum","sumTo","sumFrom","link","weight","Math","max","offset","point","coll","i","hasShape","outgoing","formatPrefix","name","mass","marker","radius","generatePoints","nodeLookup","colorCounter","level","from","styledMode","colorIndex","color","to","Point","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","TypeError","String","__","constructor","create","ColumnSeries","seriesTypes","column","_super","SankeyPoint","linkBase","linkColorMode","nodeX","nodeY","applyOptions","x","getClassName","getFromNode","fromColumn","setNodeColumn","isValid","borderWidth","colorByPoint","curveFactor","dataLabels","enabled","backgroundColor","crop","nodeFormat","nodeFormatter","format","formatter","inside","inactiveOtherPoints","linkOpacity","opacity","minLinkWidth","nodeAlignment","nodeWidth","nodePadding","showInLegend","states","hover","inactive","duration","tooltip","followPointer","headerFormat","pointFormat","SankeyColumnComposition","SankeyColumnAdditions","relativeLength","sankeyColumnArray","sankeyColumn","getTranslationFactor","skipPoint","slice","factor","remainingHeight","plotSizeY","sum","splice","_i","nodes_1","top","height","center","bottom","left","equalNodes","maxNodesLength","inverted","plotHeight","plotWidth","width","plotSizeX","round","totalNodeOffset","is","hangsFrom","absoluteTop","directionOffset","optionOffset","relativeTop","Color","isArray","isNumber","isObject","getColor","colorVariation","colorIndexByPoint","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","chartOptionsChart","colorCount","key","parse","brighten","get","getLevelOptions","params","defaults","converted","levels","result","item","levelIsConstant","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","children","childrenTotal","levelDynamic","visible","child","newOptions","val","value","isLeaf","updateRootId","rootId","rootNode","userOptions","H","SankeySeriesDefaults","TU","LineSeries","line","clamp","stableSort","SankeySeries","colDistance","group","translationFactor","getDLOptions","style","createNodeColumns","columns","order","orderNodes","a","getNodePadding","nodeColumns","maxLength","acc","col","hasData","processedXData","pointAttribs","levelOptions","stateOptions","values","fill","stroke","borderColor","setOpacity","drawTracker","drawPoints","drawDataLabels","translate","processData","min","Infinity","borderRadius","linkColor","linkLineWidth","nodeColumns_1","column_1","translateNode","_b","_c","_d","_e","linkPoint","isNull","translateLink","allowShadow","getY","fromOrTo","linkTop","shapeArgs","linkHeight","curvy","nodeLeft","right","fromY","toY","nodeW","straight","shapeType","vDist","x1","x2","x4","x5","x6","fy1","fy2","fy3","y4","y5","y6","ty1","ty2","ty3","cfy1","cy2","cty1","cx1","x3","cx2","dlBox","tooltipPos","plotY","plotX","fromColor","toColor","linearGradient","y1","y2","stops","nodeHeight","crisp","nodeOffset","fromNodeTop","floor","r","dlOptions","display","defaultOptions","animate","forceDL","invertible","isCartesian","noSharedTooltip","pointArrayMap","searchPoint","noop","registerSeriesType"],"mappings":"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"}