{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n * Treegraph chart series type\n *\n *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/treegraph', ['highcharts', 'highcharts/modules/treemap'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/PathUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var getLinkPath = {\n            'default': getDefaultPath,\n            straight: getStraightPath,\n            curved: getCurvedPath\n        };\n        function getDefaultPath(pathParams) {\n            var x1 = pathParams.x1, y1 = pathParams.y1, x2 = pathParams.x2, y2 = pathParams.y2, _a = pathParams.width, width = _a === void 0 ? 0 : _a, _b = pathParams.inverted, inverted = _b === void 0 ? false : _b, radius = pathParams.radius, parentVisible = pathParams.parentVisible;\n            var path = [\n                ['M', x1, y1],\n                ['L', x1, y1],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2],\n                ['C', x1, y1, x1, y2, x1, y2],\n                ['L', x1, y2]\n            ];\n            return parentVisible ?\n                applyRadius([\n                    ['M', x1, y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y1],\n                    ['L', x1 + width * (inverted ? -0.5 : 0.5), y2],\n                    ['L', x2, y2]\n                ], radius) :\n                path;\n        }\n        function getStraightPath(pathParams) {\n            var x1 = pathParams.x1, y1 = pathParams.y1, x2 = pathParams.x2, y2 = pathParams.y2, _a = pathParams.width, width = _a === void 0 ? 0 : _a, _b = pathParams.inverted, inverted = _b === void 0 ? false : _b, parentVisible = pathParams.parentVisible;\n            return parentVisible ? [\n                ['M', x1, y1],\n                ['L', x1 + width * (inverted ? -1 : 1), y2],\n                ['L', x2, y2]\n            ] : [\n                ['M', x1, y1],\n                ['L', x1, y2],\n                ['L', x1, y2]\n            ];\n        }\n        function getCurvedPath(pathParams) {\n            var x1 = pathParams.x1, y1 = pathParams.y1, x2 = pathParams.x2, y2 = pathParams.y2, _a = pathParams.offset, offset = _a === void 0 ? 0 : _a, _b = pathParams.width, width = _b === void 0 ? 0 : _b, _c = pathParams.inverted, inverted = _c === void 0 ? false : _c, parentVisible = pathParams.parentVisible;\n            return parentVisible ?\n                [\n                    ['M', x1, y1],\n                    [\n                        'C',\n                        x1 + offset,\n                        y1,\n                        x1 - offset + width * (inverted ? -1 : 1),\n                        y2,\n                        x1 + width * (inverted ? -1 : 1),\n                        y2\n                    ],\n                    ['L', x2, y2]\n                ] :\n                [\n                    ['M', x1, y1],\n                    ['C', x1, y1, x1, y2, x1, y2],\n                    ['L', x2, y2]\n                ];\n        }\n        /**\n         * General function to apply corner radius to a path\n         * @private\n         */\n        function applyRadius(path, r) {\n            var d = [];\n            for (var i = 0; i < path.length; i++) {\n                var x = path[i][1];\n                var y = path[i][2];\n                if (typeof x === 'number' && typeof y === 'number') {\n                    // moveTo\n                    if (i === 0) {\n                        d.push(['M', x, y]);\n                    }\n                    else if (i === path.length - 1) {\n                        d.push(['L', x, y]);\n                        // curveTo\n                    }\n                    else if (r) {\n                        var prevSeg = path[i - 1];\n                        var nextSeg = path[i + 1];\n                        if (prevSeg && nextSeg) {\n                            var x1 = prevSeg[1], y1 = prevSeg[2], x2 = nextSeg[1], y2 = nextSeg[2];\n                            // Only apply to breaks\n                            if (typeof x1 === 'number' &&\n                                typeof x2 === 'number' &&\n                                typeof y1 === 'number' &&\n                                typeof y2 === 'number' &&\n                                x1 !== x2 &&\n                                y1 !== y2) {\n                                var directionX = x1 < x2 ? 1 : -1, directionY = y1 < y2 ? 1 : -1;\n                                d.push([\n                                    'L',\n                                    x - directionX * Math.min(Math.abs(x - x1), r),\n                                    y - directionY * Math.min(Math.abs(y - y1), r)\n                                ], [\n                                    'C',\n                                    x,\n                                    y,\n                                    x,\n                                    y,\n                                    x + directionX * Math.min(Math.abs(x - x2), r),\n                                    y + directionY * Math.min(Math.abs(y - y2), r)\n                                ]);\n                            }\n                        }\n                        // lineTo\n                    }\n                    else {\n                        d.push(['L', x, y]);\n                    }\n                }\n            }\n            return d;\n        }\n        var PathUtilities = {\n            applyRadius: applyRadius,\n            getLinkPath: getLinkPath\n        };\n\n        return PathUtilities;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphNode.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var TreemapNode = SeriesRegistry.seriesTypes.treemap.prototype.NodeClass;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreegraphNode = /** @class */ (function (_super) {\n            __extends(TreegraphNode, _super);\n            function TreegraphNode() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.mod = 0;\n                _this.shift = 0;\n                _this.change = 0;\n                _this.children = [];\n                _this.preX = 0;\n                _this.hidden = false;\n                _this.wasVisited = false;\n                _this.collapsed = false;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Get the next left node which is either first child or thread.\n             *\n             * @return {TreegraphNode|undefined}\n             *         Next left node child or thread.\n             */\n            TreegraphNode.prototype.nextLeft = function () {\n                return this.getLeftMostChild() || this.thread;\n            };\n            /**\n             * Get the next right node which is either last child or thread.\n             *\n             * @return {TreegraphNode|undefined}\n             *         Next right node child or thread.\n             */\n            TreegraphNode.prototype.nextRight = function () {\n                return this.getRightMostChild() || this.thread;\n            };\n            /**\n             * Return the left one of the greatest uncommon ancestors of a\n             * leftInternal node and it's right neighbor.\n             *\n             * @param {TreegraphNode} leftIntNode\n             * @param {TreegraphNode} defaultAncestor\n             * @return {TreegraphNode}\n             *         Left one of the greatest uncommon ancestors of a leftInternal\n             *         node and it's right neighbor.\n             *\n             */\n            TreegraphNode.prototype.getAncestor = function (leftIntNode, defaultAncestor) {\n                var leftAnc = leftIntNode.ancestor;\n                if (leftAnc.children[0] === this.children[0]) {\n                    return leftIntNode.ancestor;\n                }\n                return defaultAncestor;\n            };\n            /**\n             * Get node's first sibling, which is not hidden.\n             *\n             * @return {TreegraphNode|undefined}\n             *         First sibling of the node which is not hidden or undefined, if it\n             *         does not exists.\n             */\n            TreegraphNode.prototype.getLeftMostSibling = function () {\n                var parent = this.getParent();\n                if (parent) {\n                    for (var _i = 0, _a = parent.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        if (child && child.point.visible) {\n                            return child;\n                        }\n                    }\n                }\n            };\n            /**\n             * Check if the node is a leaf (if it has any children).\n             *\n             * @return {boolean}\n             *         If the node has no visible children return true.\n             */\n            TreegraphNode.prototype.hasChildren = function () {\n                var children = this.children;\n                for (var i = 0; i < children.length; i++) {\n                    if (children[i].point.visible) {\n                        return true;\n                    }\n                }\n                return false;\n            };\n            /**\n             * Get node's left sibling (if it exists).\n             *\n             * @return {TreegraphNode|undefined}\n             *         Left sibling of the node\n             */\n            TreegraphNode.prototype.getLeftSibling = function () {\n                var parent = this.getParent();\n                if (parent) {\n                    var children = parent.children;\n                    for (var i = this.relativeXPosition - 1; i >= 0; i--) {\n                        if (children[i] && children[i].point.visible) {\n                            return children[i];\n                        }\n                    }\n                }\n            };\n            /**\n             * Get the node's first child (if it exists).\n             *\n             * @return {TreegraphNode|undefined}\n             *         Node's first child which isn't hidden.\n             */\n            TreegraphNode.prototype.getLeftMostChild = function () {\n                var children = this.children;\n                for (var i = 0; i < children.length; i++) {\n                    if (children[i].point.visible) {\n                        return children[i];\n                    }\n                }\n            };\n            /**\n             * Get the node's last child (if it exists).\n             *\n             * @return {TreegraphNode|undefined}\n             *         Node's last child which isn't hidden.\n             */\n            TreegraphNode.prototype.getRightMostChild = function () {\n                var children = this.children;\n                for (var i = children.length - 1; i >= 0; i--) {\n                    if (children[i].point.visible) {\n                        return children[i];\n                    }\n                }\n            };\n            /**\n             * Get the parent of current node or return undefined for root of the\n             * tree.\n             *\n             * @return {TreegraphNode|undefined}\n             *         Node's parent or undefined for root.\n             */\n            TreegraphNode.prototype.getParent = function () {\n                return this.parentNode;\n            };\n            /**\n             * Get node's first child which is not hidden.\n             *\n             * @return {TreegraphNode|undefined}\n             *         First child.\n             */\n            TreegraphNode.prototype.getFirstChild = function () {\n                var children = this.children;\n                for (var i = 0; i < children.length; i++) {\n                    if (children[i].point.visible) {\n                        return children[i];\n                    }\n                }\n            };\n            return TreegraphNode;\n        }(TreemapNode));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreegraphNode;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphPoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var TreemapPoint = SeriesRegistry.seriesTypes.treemap.prototype.pointClass;\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreegraphPoint = /** @class */ (function (_super) {\n            __extends(TreegraphPoint, _super);\n            function TreegraphPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.options = void 0;\n                _this.isLink = false;\n                _this.series = void 0;\n                _this.node = void 0;\n                _this.setState = Point.prototype.setState;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreegraphPoint.prototype.draw = function () {\n                _super.prototype.draw.apply(this, arguments);\n                // run animation of hiding/showing of the point.\n                var graphic = this.graphic;\n                if (graphic) {\n                    graphic.animate({\n                        visibility: this.visible ? 'inherit' : 'hidden'\n                    });\n                }\n                this.renderCollapseButton();\n            };\n            TreegraphPoint.prototype.renderCollapseButton = function () {\n                var point = this, series = point.series, parentGroup = point.graphic && point.graphic.parentGroup, levelOptions = series.mapOptionsToLevel[point.node.level || 0] || {}, btnOptions = merge(series.options.collapseButton, levelOptions.collapseButton, point.options.collapseButton), width = btnOptions.width, height = btnOptions.height, shape = btnOptions.shape, style = btnOptions.style, padding = 2, chart = this.series.chart, calculatedOpacity = (point.visible &&\n                    (point.collapsed ||\n                        !btnOptions.onlyOnHover ||\n                        point.state === 'hover')) ? 1 : 0;\n                if (!point.shapeArgs) {\n                    return;\n                }\n                this.collapseButtonOptions = btnOptions;\n                if (!point.collapseButton) {\n                    if (!point.node.children.length || !btnOptions.enabled) {\n                        return;\n                    }\n                    var _a = this.getCollapseBtnPosition(btnOptions), x = _a.x, y = _a.y, fill = (btnOptions.fillColor ||\n                        point.color ||\n                        \"#cccccc\" /* Palette.neutralColor20 */);\n                    point.collapseButton = chart.renderer\n                        .label(point.collapsed ? '+' : '-', x, y, shape)\n                        .attr({\n                        height: height - 2 * padding,\n                        width: width - 2 * padding,\n                        padding: padding,\n                        fill: fill,\n                        rotation: chart.inverted ? 90 : 0,\n                        rotationOriginX: width / 2,\n                        rotationOriginY: height / 2,\n                        stroke: btnOptions.lineColor || \"#ffffff\" /* Palette.backgroundColor */,\n                        'stroke-width': btnOptions.lineWidth,\n                        'text-align': 'center',\n                        align: 'center',\n                        zIndex: 1,\n                        opacity: calculatedOpacity,\n                        visibility: point.visible ? 'inherit' : 'hidden'\n                    })\n                        .addClass('highcharts-tracker')\n                        .addClass('highcharts-collapse-button')\n                        .removeClass('highcharts-no-tooltip')\n                        .css(merge({\n                        color: typeof fill === 'string' ?\n                            chart.renderer.getContrast(fill) :\n                            \"#333333\" /* Palette.neutralColor80 */\n                    }, style))\n                        .add(parentGroup);\n                    point.collapseButton.element.point = point;\n                }\n                else {\n                    if (!point.node.children.length || !btnOptions.enabled) {\n                        point.collapseButton.destroy();\n                        delete point.collapseButton;\n                    }\n                    else {\n                        var _b = this.getCollapseBtnPosition(btnOptions), x = _b.x, y = _b.y;\n                        point.collapseButton\n                            .attr({\n                            text: point.collapsed ? '+' : '-',\n                            rotation: chart.inverted ? 90 : 0,\n                            rotationOriginX: width / 2,\n                            rotationOriginY: height / 2,\n                            visibility: point.visible ? 'inherit' : 'hidden'\n                        })\n                            .animate({\n                            x: x,\n                            y: y,\n                            opacity: calculatedOpacity\n                        });\n                    }\n                }\n            };\n            TreegraphPoint.prototype.toggleCollapse = function (state) {\n                this.collapsed = pick(state, !this.collapsed);\n                fireEvent(this.series, 'toggleCollapse');\n                this.series.redraw();\n            };\n            TreegraphPoint.prototype.destroy = function () {\n                if (this.collapseButton) {\n                    this.collapseButton.destroy();\n                    delete this.collapseButton;\n                    this.collapseButton = void 0;\n                }\n                if (this.linkToParent) {\n                    this.linkToParent.destroy();\n                    delete this.linkToParent;\n                }\n                _super.prototype.destroy.apply(this, arguments);\n            };\n            TreegraphPoint.prototype.getCollapseBtnPosition = function (btnOptions) {\n                var point = this, chart = point.series.chart, inverted = chart.inverted, btnWidth = btnOptions.width, btnHeight = btnOptions.height, _a = point.shapeArgs || {}, _b = _a.x, x = _b === void 0 ? 0 : _b, _c = _a.y, y = _c === void 0 ? 0 : _c, _d = _a.width, width = _d === void 0 ? 0 : _d, _e = _a.height, height = _e === void 0 ? 0 : _e;\n                return {\n                    x: x +\n                        btnOptions.x +\n                        (inverted ? -btnHeight * 0.3 : width + btnWidth * -0.3),\n                    y: y + height / 2 - btnHeight / 2 + btnOptions.y\n                };\n            };\n            return TreegraphPoint;\n        }(TreemapPoint));\n        addEvent(TreegraphPoint, 'mouseOut', function () {\n            var btn = this.collapseButton, btnOptions = this.collapseButtonOptions;\n            if (btn && btnOptions && btnOptions.onlyOnHover && !this.collapsed) {\n                btn.animate({ opacity: 0 });\n            }\n        });\n        addEvent(TreegraphPoint, 'mouseOver', function () {\n            if (this.collapseButton && this.visible) {\n                this.collapseButton.animate({ opacity: 1 }, this.series.options.states &&\n                    this.series.options.states.hover &&\n                    this.series.options.states.hover.animation);\n            }\n        });\n        // Handle showing and hiding of the points\n        addEvent(TreegraphPoint, 'click', function () {\n            this.toggleCollapse();\n        });\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n\n        return TreegraphPoint;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphLink.js', [_modules['Core/Series/Point.js'], _modules['Core/Utilities.js'], _modules['Core/Series/SeriesRegistry.js']], function (Point, U, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var pick = U.pick, extend = U.extend;\n        var ColumnPoint = SeriesRegistry.seriesTypes.column.prototype.pointClass;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var LinkPoint = /** @class */ (function (_super) {\n            __extends(LinkPoint, _super);\n            function LinkPoint() {\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                *\n                *  Class properties\n                *\n                * */\n                _this.isLink = true;\n                _this.node = {};\n                _this.formatPrefix = 'link';\n                _this.dataLabelOnNull = true;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinkPoint.prototype.init = function (series, options, x, point) {\n                var link = _super.prototype.init.apply(this, arguments);\n                this.formatPrefix = 'link';\n                this.dataLabelOnNull = true;\n                if (point) {\n                    link.fromNode = point.node.parentNode.point;\n                    link.visible = point.visible;\n                    link.toNode = point;\n                    this.id = link.toNode.id + '-' + link.fromNode.id;\n                }\n                return link;\n            };\n            LinkPoint.prototype.update = function (options, redraw, animation, runEvent) {\n                var oldOptions = {\n                    id: this.id,\n                    formatPrefix: this.formatPrefix\n                };\n                Point.prototype.update.call(this, options, this.isLink ? false : redraw, // Hold the redraw for nodes\n                animation, runEvent);\n                this.visible = this.toNode.visible;\n                extend(this, oldOptions);\n                if (pick(redraw, true)) {\n                    this.series.chart.redraw(animation);\n                }\n            };\n            return LinkPoint;\n        }(ColumnPoint));\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n\n        return LinkPoint;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphLayout.js', [_modules['Series/Treegraph/TreegraphNode.js']], function (TreegraphNode) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreegraphLayout = /** @class */ (function () {\n            function TreegraphLayout() {\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create dummy node, which allows to manually set the level of the node.\n             *\n             * @param {TreegraphNode} parent\n             *        Parent node, to which the dummyNode should be connected.\n             * @param {TreegraphNode} child\n             *        Child node, which should be connected to dummyNode.\n             * @param {number} gapSize\n             *        Remainig gap size.\n             * @param {number} index\n             *        The index of the link.\n             *\n             * @return {TreegraphNode}\n             *         DummyNode as a parent of nodes, which column changes.\n             */\n            TreegraphLayout.createDummyNode = function (parent, child, gapSize, index) {\n                // Initialise dummy node.\n                var dummyNode = new TreegraphNode();\n                dummyNode.id = parent.id + '-' + gapSize;\n                dummyNode.ancestor = parent;\n                // Add connection from new node to the previous points.\n                // First connection to itself.\n                dummyNode.children.push(child);\n                dummyNode.parent = parent.id;\n                dummyNode.parentNode = parent;\n                dummyNode.point = child.point;\n                dummyNode.level = child.level - gapSize;\n                dummyNode.relativeXPosition = child.relativeXPosition;\n                dummyNode.visible = child.visible;\n                // Then connection from parent to dummyNode.\n                parent.children[child.relativeXPosition] = dummyNode;\n                child.oldParentNode = parent;\n                child.relativeXPosition = 0;\n                // Then connection from child to dummyNode.\n                child.parentNode = dummyNode;\n                child.parent = dummyNode.id;\n                return dummyNode;\n            };\n            /**\n             * Walker algorithm of positioning the nodes in the treegraph improved by\n             * Buchheim to run in the linear time. Basic algorithm consists of post\n             * order traversal, which starts from going bottom up (first walk), and then\n             * pre order traversal top to bottom (second walk) where adding all of the\n             * modifiers is performed.\n             * link to the paper: http://dirk.jivas.de/papers/buchheim02improving.pdf\n             *\n             * @param {TreegraphSeries} series the Treegraph series\n             */\n            TreegraphLayout.prototype.calculatePositions = function (series) {\n                var treeLayout = this;\n                var nodes = series.nodeList;\n                this.resetValues(nodes);\n                var root = series.tree;\n                if (root) {\n                    treeLayout.calculateRelativeX(root, 0);\n                    treeLayout.beforeLayout(nodes);\n                    treeLayout.firstWalk(root);\n                    treeLayout.secondWalk(root, -root.preX);\n                    treeLayout.afterLayout(nodes);\n                }\n            };\n            /**\n             * Create dummyNodes as parents for nodes, which column is changed.\n             *\n             * @param {Array<TreegraphNode>} nodes\n             *        All of the nodes.\n             */\n            TreegraphLayout.prototype.beforeLayout = function (nodes) {\n                for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n                    var node = nodes_1[_i];\n                    var index = 0;\n                    for (var _a = 0, _b = node.children; _a < _b.length; _a++) {\n                        var child = _b[_a];\n                        // Support for children placed in distant columns.\n                        if (child && child.level - node.level > 1) {\n                            // For further columns treat the nodes as a\n                            // single parent-child pairs till the column is achieved.\n                            var gapSize = child.level - node.level - 1;\n                            // parent -> dummyNode -> child\n                            while (gapSize > 0) {\n                                child = TreegraphLayout.createDummyNode(node, child, gapSize, index);\n                                gapSize--;\n                            }\n                        }\n                        ++index;\n                    }\n                }\n            };\n            /**\n             * Reset the caluclated values from the previous run.\n             * @param {TreegraphNode[]} nodes all of the nodes.\n             */\n            TreegraphLayout.prototype.resetValues = function (nodes) {\n                for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n                    var node = nodes_2[_i];\n                    node.mod = 0;\n                    node.ancestor = node;\n                    node.shift = 0;\n                    node.thread = void 0;\n                    node.change = 0;\n                    node.preX = 0;\n                }\n            };\n            /**\n             * Assigns the value to each node, which indicates, what is his sibling\n             * number.\n             *\n             * @param {TreegraphNode} node\n             *        Root node\n             * @param {number} index\n             *        Index to which the nodes position should be set\n             */\n            TreegraphLayout.prototype.calculateRelativeX = function (node, index) {\n                var treeLayout = this, children = node.children;\n                for (var i = 0, iEnd = children.length; i < iEnd; ++i) {\n                    treeLayout.calculateRelativeX(children[i], i);\n                }\n                node.relativeXPosition = index;\n            };\n            /**\n             * Recursive post order traversal of the tree, where the initial position\n             * of the nodes is calculated.\n             *\n             * @param {TreegraphNode} node\n             *        The node for which the position should be calculated.\n             */\n            TreegraphLayout.prototype.firstWalk = function (node) {\n                var treeLayout = this, \n                // Arbitrary value used to position nodes in respect to each other.\n                siblingDistance = 1;\n                var leftSibling;\n                // If the node is a leaf, set it's position based on the left siblings.\n                if (!node.hasChildren()) {\n                    leftSibling = node.getLeftSibling();\n                    if (leftSibling) {\n                        node.preX = leftSibling.preX + siblingDistance;\n                        node.mod = node.preX;\n                    }\n                    else {\n                        node.preX = 0;\n                    }\n                }\n                else {\n                    // If the node has children, perform the recursive first walk for\n                    // its children, and then calculate its shift in the apportion\n                    // function (most crucial part part of the algorythm).\n                    var defaultAncestor = node.getLeftMostChild();\n                    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        treeLayout.firstWalk(child);\n                        defaultAncestor = treeLayout.apportion(child, defaultAncestor);\n                    }\n                    treeLayout.executeShifts(node);\n                    var leftChild = node.getLeftMostChild(), rightChild = node.getRightMostChild(), \n                    // Set the position of the parent as a middle point of its\n                    // children and move it by the value of the leftSibling (if it\n                    // exists).\n                    midPoint = (leftChild.preX + rightChild.preX) / 2;\n                    leftSibling = node.getLeftSibling();\n                    if (leftSibling) {\n                        node.preX = leftSibling.preX + siblingDistance;\n                        node.mod = node.preX - midPoint;\n                    }\n                    else {\n                        node.preX = midPoint;\n                    }\n                }\n            };\n            /**\n             * Pre order traversal of the tree, which sets the final xPosition of the\n             * node as its preX value and sum of all if it's parents' modifiers.\n             *\n             * @param {TreegraphNode} node\n             *        The node, for which the final position should be calculated.\n             * @param {number} modSum\n             *        The sum of modifiers of all of the parents.\n             */\n            TreegraphLayout.prototype.secondWalk = function (node, modSum) {\n                var treeLayout = this;\n                // When the chart is not inverted we want the tree to be positioned from\n                // left to right with root node close to the chart border, this is why\n                // x and y positions are switched.\n                node.yPosition = node.preX + modSum;\n                node.xPosition = node.level;\n                for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    treeLayout.secondWalk(child, modSum + node.mod);\n                }\n            };\n            /**\n             *  Shift all children of the current node from right to left.\n             *\n             * @param {TreegraphNode} node\n             *        The parent node.\n             */\n            TreegraphLayout.prototype.executeShifts = function (node) {\n                var shift = 0, change = 0;\n                for (var i = node.children.length - 1; i >= 0; i--) {\n                    var childNode = node.children[i];\n                    childNode.preX += shift;\n                    childNode.mod += shift;\n                    change += childNode.change;\n                    shift += childNode.shift + change;\n                }\n            };\n            /**\n             * The core of the algorithm. The new subtree is combined with the previous\n             * subtrees. Threads are used to traverse the inside and outside contours of\n             * the left and right subtree up to the highest common level. The vertecies\n             * are left(right)Int(Out)node where Int means internal and Out means\n             * outernal. For summing up the modifiers along the contour we use the\n             * `left(right)Int(Out)mod` variable. Whenever two nodes of the inside\n             * contours are in conflict we comute the left one of the greatest uncommon\n             * ancestors using the getAncestor function and we call the moveSubtree\n             * method to shift the subtree and prepare the shifts of smaller subrtees.\n             * Finally we add a new thread (if necessary) and we adjust ancestor of\n             * right outernal node or defaultAncestor.\n             *\n             * @param {TreegraphNode} node\n             * @param {TreegraphNode} defaultAncestor\n             *        The default ancestor of the passed node.\n             */\n            TreegraphLayout.prototype.apportion = function (node, defaultAncestor) {\n                var treeLayout = this, leftSibling = node.getLeftSibling();\n                if (leftSibling) {\n                    var rightIntNode = node, rightOutNode = node, leftIntNode = leftSibling, leftOutNode = rightIntNode.getLeftMostSibling(), rightIntMod = rightIntNode.mod, rightOutMod = rightOutNode.mod, leftIntMod = leftIntNode.mod, leftOutMod = leftOutNode.mod;\n                    while (leftIntNode &&\n                        leftIntNode.nextRight() &&\n                        rightIntNode &&\n                        rightIntNode.nextLeft()) {\n                        leftIntNode = leftIntNode.nextRight();\n                        leftOutNode = leftOutNode.nextLeft();\n                        rightIntNode = rightIntNode.nextLeft();\n                        rightOutNode = rightOutNode.nextRight();\n                        rightOutNode.ancestor = node;\n                        var siblingDistance = 1, shift = leftIntNode.preX +\n                            leftIntMod -\n                            (rightIntNode.preX + rightIntMod) +\n                            siblingDistance;\n                        if (shift > 0) {\n                            treeLayout.moveSubtree(node.getAncestor(leftIntNode, defaultAncestor), node, shift);\n                            rightIntMod += shift;\n                            rightOutMod += shift;\n                        }\n                        leftIntMod += leftIntNode.mod;\n                        rightIntMod += rightIntNode.mod;\n                        leftOutMod += leftOutNode.mod;\n                        rightOutMod += rightOutNode.mod;\n                    }\n                    if (leftIntNode &&\n                        leftIntNode.nextRight() &&\n                        !rightOutNode.nextRight()) {\n                        rightOutNode.thread = leftIntNode.nextRight();\n                        rightOutNode.mod += leftIntMod - rightOutMod;\n                    }\n                    if (rightIntNode &&\n                        rightIntNode.nextLeft() &&\n                        !leftOutNode.nextLeft()) {\n                        leftOutNode.thread = rightIntNode.nextLeft();\n                        leftOutNode.mod += rightIntMod - leftOutMod;\n                    }\n                    defaultAncestor = node;\n                }\n                return defaultAncestor;\n            };\n            /**\n             * Shifts the subtree from leftNode to rightNode.\n             *\n             * @param {TreegraphNode} leftNode\n             * @param {TreegraphNode} rightNode\n             * @param {number} shift\n             *        The value, by which the subtree should be moved.\n             */\n            TreegraphLayout.prototype.moveSubtree = function (leftNode, rightNode, shift) {\n                var subtrees = rightNode.relativeXPosition - leftNode.relativeXPosition;\n                rightNode.change -= shift / subtrees;\n                rightNode.shift += shift;\n                rightNode.preX += shift;\n                rightNode.mod += shift;\n                leftNode.change += shift / subtrees;\n            };\n            /**\n             * Clear values created in a beforeLayout.\n             *\n             * @param {TreegraphNode[]} nodes\n             *        All of the nodes of the Treegraph Series.\n             */\n            TreegraphLayout.prototype.afterLayout = function (nodes) {\n                for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n                    var node = nodes_3[_i];\n                    if (node.oldParentNode) {\n                        // Restore default connections\n                        node.relativeXPosition = node.parentNode.relativeXPosition;\n                        node.parent = node.oldParentNode.parent;\n                        node.parentNode = node.oldParentNode;\n                        // Delete dummyNode\n                        delete node.oldParentNode.children[node.relativeXPosition];\n                        node.oldParentNode.children[node.relativeXPosition] = node;\n                        node.oldParentNode = void 0;\n                    }\n                }\n            };\n            return TreegraphLayout;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreegraphLayout;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A treegraph series is a diagram, which shows a relation between ancestors\n         * and descendants with a clear parent - child relation.\n         * The best examples of the dataStructures, which best reflect this chart\n         * are e.g. genealogy tree or directory structure.\n         *\n         * TODO change back the demo path\n         * @sample highcharts/demo/treegraph-chart\n         *         Treegraph Chart\n         *\n         * @extends      plotOptions.treemap\n         * @excluding    layoutAlgorithm, dashStyle, linecap, lineWidth,\n         *               negativeColor, threshold, zones, zoneAxis, colorAxis,\n         *               colorKey, compare, dataGrouping, endAgle, gapSize, gapUnit,\n         *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n         *               minSize, navigatorOptions, pointRange, allowTraversingTree,\n         *               alternateStartingDirection, borderRadius, breadcrumbs,\n         *               interactByLeaf, layoutStartingDirection, levelIsConstant,\n         *               lineWidth, negativeColor, nodes, sortIndex, zoneAxis,\n         *               zones\n         *\n         * @product      highcharts\n         * @since 10.3.0\n         * @requires     modules/treemap.js\n         * @requires     modules/treegraph.js\n         * @optionparent plotOptions.treegraph\n         */\n        var TreegraphSeriesDefaults = {\n            /**\n             * Flips the positions of the nodes of a treegraph along the\n             * horizontal axis (vertical if chart is inverted).\n             *\n             * @sample highcharts/series-treegraph/reversed-nodes\n             *         Treegraph series with reversed nodes.\n             *\n             * @type    {boolean}\n             * @default false\n             * @product highcharts\n             * @since 10.3.0\n             */\n            reversed: false,\n            /**\n             * @extends   plotOptions.series.marker\n             * @excluding enabled, enabledThreshold\n             */\n            marker: {\n                radius: 10,\n                lineWidth: 0,\n                symbol: 'circle',\n                fillOpacity: 1,\n                states: {}\n            },\n            link: {\n                /**\n                 * Modifier of the shape of the curved link. Works best for\n                 * values between 0 and 1, where 0 is a straight line, and 1 is\n                 * a shape close to the default one.\n                 *\n                 * @type      {number}\n                 * @default   0.5\n                 * @product   highcharts\n                 * @since 10.3.0\n                 * @apioption series.treegraph.link.curveFactor\n                 */\n                /**\n                 * The color of the links between nodes.\n                 *\n                 * @type {Highcharts.ColorString}\n                 * @private\n                 */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The line width of the links connecting nodes, in pixels.\n                 * @type {number}\n                 *\n                 * @private\n                 */\n                lineWidth: 1,\n                /**\n                 * Radius for the rounded corners of the links between nodes.\n                 * Works for `default` link type.\n                 *\n                 * @private\n                 */\n                radius: 10,\n                cursor: 'default',\n                /**\n                 * Type of the link shape.\n                 *\n                 * @sample   highcharts/series-treegraph/link-types\n                 *           Different link types\n                 *\n                 * @type {'default' | 'curved' | 'straight'}\n                 * @product highcharts\n                 *\n                 */\n                type: 'curved'\n            },\n            /**\n             * Options applied to collapse Button. The collape button is the\n             * small button which indicates, that the node is collapsable.\n             */\n            collapseButton: {\n                /**\n                 * Whether the button should be visible only when the node is\n                 * hovered. When set to true, the button is hidden for nodes,\n                 * which are not collapsed, and shown for the collapsed ones.\n                 */\n                onlyOnHover: true,\n                /**\n                 * Whether the button should be visible.\n                 */\n                enabled: true,\n                /**\n                 * The line width of the button in pixels\n                 */\n                lineWidth: 1,\n                /**\n                 * Offset of the button in the x direction.\n                 */\n                x: 0,\n                /**\n                 * Offset of the button in the y direction.\n                 */\n                y: 0,\n                /**\n                 * Height of the button.\n                 */\n                height: 18,\n                /**\n                 * Width of the button.\n                 */\n                width: 18,\n                /**\n                 * The symbol of the collapse button.\n                 */\n                shape: 'circle',\n                /**\n                 * CSS styles for the collapse button.\n                 *\n                 * In styled mode, the collapse button style is given in the\n                 * `.highcharts-collapse-button` class.\n                 */\n                style: {\n                    cursor: 'pointer',\n                    fontWeight: 'bold',\n                    fontSize: '1em'\n                }\n            },\n            /**\n             * Whether the treegraph series should fill the entire plot area in the X\n             * axis direction, even when there are collapsed points.\n             *\n             * @sample  highcharts/series-treegraph/fillspace\n             *          Fill space demonstrated\n             *\n             * @product highcharts\n             */\n            fillSpace: false,\n            /**\n             * @extends plotOptions.series.tooltip\n             */\n            tooltip: {\n                /**\n                 * The HTML of the point's line in the tooltip. Variables are\n                 * enclosed by curly brackets. Available variables are\n                 * `point.id`,  `point.fromNode.id`, `point.toNode.id`,\n                 * `series.name`, `series.color` and other properties on the\n                 * same form. Furthermore, This can also be overridden for each\n                 * series, which makes it a good hook for displaying units. In\n                 * styled mode, the dot is colored by a class name rather than\n                 * the point color.\n                 *\n                 * @type {string}\n                 * @since 10.3.0\n                 * @product highcharts\n                 */\n                linkFormat: '{point.fromNode.id} \\u2192 {point.toNode.id}',\n                pointFormat: '{point.id}'\n                /**\n                 * A callback function for formatting the HTML output for a\n                 * single link in the tooltip. Like the `linkFormat` string,\n                 * but with more flexibility.\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction.<Highcharts.Point>}\n                 * @apioption series.treegraph.tooltip.linkFormatter\n                 *\n                 */\n            },\n            /**\n             * Options for the data labels appearing on top of the nodes and\n             * links. For treegraph charts, data labels are visible for the\n             * nodes by default, but hidden for links. This is controlled by\n             * modifying the `nodeFormat`, and the `format` that applies to\n             * links and is an empty string by default.\n             *\n             * @declare Highcharts.SeriesTreegraphDataLabelsOptionsObject\n             */\n            dataLabels: {\n                defer: true,\n                /**\n                 * Options for a _link_ label text which should follow link\n                 * connection. Border and background are disabled for a label\n                 * that follows a path.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option.\n                 * Setting `useHTML` to true will disable this option.\n                 *\n                 * @sample highcharts/series-treegraph/link-text-path\n                 *         Treegraph series with link text path dataLabels.\n                 *\n                 * @extends plotOptions.treegraph.dataLabels.textPath\n                 * @since 10.3.0\n                 */\n                linkTextPath: {\n                    attributes: {\n                        startOffset: '50%'\n                    }\n                },\n                enabled: true,\n                linkFormatter: function () { return ''; },\n                style: {\n                    textOverflow: 'none'\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreegraphSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Treegraph/TreegraphSeries.js', [_modules['Series/PathUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Series/Treegraph/TreegraphNode.js'], _modules['Series/Treegraph/TreegraphPoint.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js'], _modules['Series/Treegraph/TreegraphLink.js'], _modules['Series/Treegraph/TreegraphLayout.js'], _modules['Series/Treegraph/TreegraphSeriesDefaults.js']], function (PU, SeriesRegistry, SVGRenderer, TreegraphNode, TreegraphPoint, TU, U, TreegraphLink, TreegraphLayout, TreegraphSeriesDefaults) {\n        /* *\n         *\n         *  (c) 2010-2022 Pawel Lysy Grzegorz Blachlinski\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var getLinkPath = PU.getLinkPath;\n        var seriesProto = SeriesRegistry.series.prototype, _a = SeriesRegistry.seriesTypes, TreemapSeries = _a.treemap, ColumnSeries = _a.column;\n        var symbols = SVGRenderer.prototype.symbols;\n        var getLevelOptions = TU.getLevelOptions;\n        var extend = U.extend, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength, splat = U.splat;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Treegraph series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treegraph\n         *\n         * @augments Highcharts.Series\n         */\n        var TreegraphSeries = /** @class */ (function (_super) {\n            __extends(TreegraphSeries, _super);\n            function TreegraphSeries() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                _this.layoutModifier = void 0;\n                _this.nodeMap = void 0;\n                _this.tree = void 0;\n                _this.nodeList = [];\n                _this.layoutAlgorythm = void 0;\n                _this.links = [];\n                _this.mapOptionsToLevel = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreegraphSeries.prototype.init = function () {\n                _super.prototype.init.apply(this, arguments);\n                this.layoutAlgorythm = new TreegraphLayout();\n            };\n            /**\n             * Calculate `a` and `b` parameters of linear transformation, where\n             * `finalPosition = a * calculatedPosition + b`.\n             *\n             * @return {LayoutModifiers} `a` and `b` parameter for x and y direction.\n             */\n            TreegraphSeries.prototype.getLayoutModifiers = function () {\n                var _this = this;\n                var chart = this.chart, series = this, plotSizeX = chart.plotSizeX, plotSizeY = chart.plotSizeY;\n                var minX = Infinity, maxX = -Infinity, minY = Infinity, maxY = -Infinity, maxXSize = 0, minXSize = 0, maxYSize = 0, minYSize = 0;\n                this.points.forEach(function (point) {\n                    // When fillSpace is on, stop the layout calculation when the hidden\n                    // points are reached. (#19038)\n                    if (_this.options.fillSpace && !point.visible) {\n                        return;\n                    }\n                    var node = point.node, level = series.mapOptionsToLevel[point.node.level] || {}, markerOptions = merge(_this.options.marker, level.marker, point.options.marker), radius = relativeLength(markerOptions.radius || 0, Math.min(plotSizeX, plotSizeY)), symbol = markerOptions.symbol, nodeSizeY = (symbol === 'circle' || !markerOptions.height) ?\n                        radius * 2 :\n                        relativeLength(markerOptions.height, plotSizeY), nodeSizeX = symbol === 'circle' || !markerOptions.width ?\n                        radius * 2 :\n                        relativeLength(markerOptions.width, plotSizeX);\n                    node.nodeSizeX = nodeSizeX;\n                    node.nodeSizeY = nodeSizeY;\n                    var lineWidth;\n                    if (node.xPosition <= minX) {\n                        minX = node.xPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        minXSize = Math.max(nodeSizeX + lineWidth, minXSize);\n                    }\n                    if (node.xPosition >= maxX) {\n                        maxX = node.xPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        maxXSize = Math.max(nodeSizeX + lineWidth, maxXSize);\n                    }\n                    if (node.yPosition <= minY) {\n                        minY = node.yPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        minYSize = Math.max(nodeSizeY + lineWidth, minYSize);\n                    }\n                    if (node.yPosition >= maxY) {\n                        maxY = node.yPosition;\n                        lineWidth = markerOptions.lineWidth || 0;\n                        maxYSize = Math.max(nodeSizeY + lineWidth, maxYSize);\n                    }\n                });\n                // Calculate the values of linear transformation, which will later be\n                // applied as `nodePosition = a * x + b` for each direction.\n                var ay = maxY === minY ?\n                    1 :\n                    (plotSizeY - (minYSize + maxYSize) / 2) / (maxY - minY), by = maxY === minY ? plotSizeY / 2 : -ay * minY + minYSize / 2, ax = maxX === minX ?\n                    1 :\n                    (plotSizeX - (maxXSize + maxXSize) / 2) / (maxX - minX), bx = maxX === minX ? plotSizeX / 2 : -ax * minX + minXSize / 2;\n                return { ax: ax, bx: bx, ay: ay, by: by };\n            };\n            TreegraphSeries.prototype.getLinks = function () {\n                var _this = this;\n                var series = this;\n                var links = [];\n                this.data.forEach(function (point, index) {\n                    var levelOptions = series.mapOptionsToLevel[point.node.level || 0] || {};\n                    if (point.node.parent) {\n                        var pointOptions = merge(levelOptions, point.options);\n                        if (!point.linkToParent || point.linkToParent.destroyed) {\n                            var link = new series.LinkClass().init(series, pointOptions, void 0, point);\n                            point.linkToParent = link;\n                        }\n                        else {\n                            // #19552\n                            point.collapsed = pick(point.collapsed, (_this.mapOptionsToLevel[point.node.level] || {}).collapsed);\n                            point.linkToParent.visible =\n                                point.linkToParent.toNode.visible;\n                        }\n                        point.linkToParent.index = links.push(point.linkToParent) - 1;\n                    }\n                    else {\n                        if (point.linkToParent) {\n                            series.links.splice(point.linkToParent.index);\n                            point.linkToParent.destroy();\n                            delete point.linkToParent;\n                        }\n                    }\n                });\n                return links;\n            };\n            TreegraphSeries.prototype.buildTree = function (id, index, level, list, parent) {\n                var point = this.points[index];\n                level = (point && point.level) || level;\n                return _super.prototype.buildTree.call(this, id, index, level, list, parent);\n            };\n            TreegraphSeries.prototype.markerAttribs = function () {\n                // The super Series.markerAttribs returns { width: NaN, height: NaN },\n                // so just disable this for now.\n                return {};\n            };\n            TreegraphSeries.prototype.setCollapsedStatus = function (node, visibility) {\n                var _this = this;\n                var point = node.point;\n                if (point) {\n                    // Take the level options into account.\n                    point.collapsed = pick(point.collapsed, (this.mapOptionsToLevel[node.level] || {}).collapsed);\n                    point.visible = visibility;\n                    visibility = visibility === false ? false : !point.collapsed;\n                }\n                node.children.forEach(function (childNode) {\n                    _this.setCollapsedStatus(childNode, visibility);\n                });\n            };\n            TreegraphSeries.prototype.drawTracker = function () {\n                ColumnSeries.prototype.drawTracker.apply(this, arguments);\n                ColumnSeries.prototype.drawTracker.call(this, this.links);\n            };\n            /**\n             * Run pre-translation by generating the nodeColumns.\n             * @private\n             */\n            TreegraphSeries.prototype.translate = function () {\n                var _this = this;\n                var series = this, options = series.options;\n                // NOTE: updateRootId modifies series.\n                var rootId = TU.updateRootId(series), rootNode;\n                // Call prototype function\n                seriesProto.translate.call(series);\n                var tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' && (!rootNode || !rootNode.children.length)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                this.setCollapsedStatus(tree, true);\n                series.links = series.getLinks();\n                series.setTreeValues(tree);\n                this.layoutAlgorythm.calculatePositions(series);\n                series.layoutModifier = this.getLayoutModifiers();\n                this.points.forEach(function (point) {\n                    _this.translateNode(point);\n                });\n                this.points.forEach(function (point) {\n                    if (point.linkToParent) {\n                        _this.translateLink(point.linkToParent);\n                    }\n                });\n                if (!options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n            };\n            TreegraphSeries.prototype.translateLink = function (link) {\n                var fromNode = link.fromNode, toNode = link.toNode, linkWidth = this.options.link.lineWidth, crisp = (Math.round(linkWidth) % 2) / 2, factor = pick(this.options.link.curveFactor, 0.5), type = pick(link.options.link && link.options.link.type, this.options.link.type);\n                if (fromNode.shapeArgs && toNode.shapeArgs) {\n                    var fromNodeWidth = (fromNode.shapeArgs.width || 0), inverted = this.chart.inverted, y1 = Math.floor((fromNode.shapeArgs.y || 0) +\n                        (fromNode.shapeArgs.height || 0) / 2) + crisp, y2 = Math.floor((toNode.shapeArgs.y || 0) +\n                        (toNode.shapeArgs.height || 0) / 2) + crisp;\n                    var x1 = Math.floor((fromNode.shapeArgs.x || 0) + fromNodeWidth) +\n                        crisp, x2 = Math.floor(toNode.shapeArgs.x || 0) + crisp;\n                    if (inverted) {\n                        x1 -= fromNodeWidth;\n                        x2 += (toNode.shapeArgs.width || 0);\n                    }\n                    var diff = toNode.node.xPosition - fromNode.node.xPosition;\n                    link.shapeType = 'path';\n                    var fullWidth = Math.abs(x2 - x1) + fromNodeWidth, width = (fullWidth / diff) - fromNodeWidth, offset = width * factor * (inverted ? -1 : 1);\n                    var xMiddle = Math.floor((x2 + x1) / 2) + crisp;\n                    link.plotX = xMiddle;\n                    link.plotY = y2;\n                    link.shapeArgs = {\n                        d: getLinkPath[type]({\n                            x1: x1,\n                            y1: y1,\n                            x2: x2,\n                            y2: y2,\n                            width: width,\n                            offset: offset,\n                            inverted: inverted,\n                            parentVisible: toNode.visible,\n                            radius: this.options.link.radius\n                        })\n                    };\n                    link.dlBox = {\n                        x: (x1 + x2) / 2,\n                        y: (y1 + y2) / 2,\n                        height: linkWidth,\n                        width: 0\n                    };\n                    link.tooltipPos = inverted ? [\n                        (this.chart.plotSizeY || 0) - link.dlBox.y,\n                        (this.chart.plotSizeX || 0) - link.dlBox.x\n                    ] : [\n                        link.dlBox.x,\n                        link.dlBox.y\n                    ];\n                }\n            };\n            /**\n             * Private method responsible for adjusting the dataLabel options for each\n             * node-point individually.\n             */\n            TreegraphSeries.prototype.drawNodeLabels = function (points) {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel;\n                var options, level;\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series.hasDataLabels = function () { return true; };\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs &&\n                        !splat(series.options.dataLabels)[0].style.width) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                }\n                seriesProto.drawDataLabels.call(this, points);\n            };\n            /**\n             * Override alignDataLabel so that position is always calculated and the\n             * label is faded in and out instead of hidden/shown when collapsing and\n             * expanding nodes.\n             */\n            TreegraphSeries.prototype.alignDataLabel = function (point, dataLabel) {\n                var visible = point.visible;\n                // Force position calculation and visibility\n                point.visible = true;\n                _super.prototype.alignDataLabel.apply(this, arguments);\n                // Fade in or out\n                dataLabel.animate({\n                    opacity: visible === false ? 0 : 1\n                }, void 0, function () {\n                    // Hide data labels that belong to hidden points (#18891)\n                    visible || dataLabel.hide();\n                });\n                // Reset\n                point.visible = visible;\n            };\n            /**\n             * Treegraph has two separate collecions of nodes and lines,\n             * render dataLabels for both sets.\n             */\n            TreegraphSeries.prototype.drawDataLabels = function () {\n                if (this.options.dataLabels) {\n                    this.options.dataLabels = splat(this.options.dataLabels);\n                    // Render node labels.\n                    this.drawNodeLabels(this.points);\n                    // Render link labels.\n                    seriesProto.drawDataLabels.call(this, this.links);\n                }\n            };\n            TreegraphSeries.prototype.destroy = function () {\n                // Links must also be destroyed.\n                if (this.links) {\n                    for (var _i = 0, _a = this.links; _i < _a.length; _i++) {\n                        var link = _a[_i];\n                        link.destroy();\n                    }\n                    this.links.length = 0;\n                }\n                return seriesProto.destroy.apply(this, arguments);\n            };\n            /**\n             * Return the presentational attributes.\n             * @private\n             */\n            TreegraphSeries.prototype.pointAttribs = function (point, state) {\n                var series = this, levelOptions = point &&\n                    series.mapOptionsToLevel[point.node.level || 0] || {}, options = point && point.options, stateOptions = (levelOptions.states &&\n                    levelOptions.states[state]) ||\n                    {};\n                if (point) {\n                    point.options.marker = merge(series.options.marker, levelOptions.marker, point.options.marker);\n                }\n                var linkColor = pick(stateOptions && stateOptions.link && stateOptions.link.color, options && options.link && options.link.color, levelOptions && levelOptions.link && levelOptions.link.color, series.options.link && series.options.link.color), linkLineWidth = pick(stateOptions && stateOptions.link &&\n                    stateOptions.link.lineWidth, options && options.link && options.link.lineWidth, levelOptions && levelOptions.link &&\n                    levelOptions.link.lineWidth, series.options.link && series.options.link.lineWidth), attribs = seriesProto.pointAttribs.call(series, point, state);\n                if (point) {\n                    if (point.isLink) {\n                        attribs.stroke = linkColor;\n                        attribs['stroke-width'] = linkLineWidth;\n                        delete attribs.fill;\n                    }\n                    if (!point.visible) {\n                        attribs.opacity = 0;\n                    }\n                }\n                return attribs;\n            };\n            TreegraphSeries.prototype.drawPoints = function () {\n                TreemapSeries.prototype.drawPoints.apply(this, arguments);\n                ColumnSeries.prototype.drawPoints.call(this, this.links);\n            };\n            /**\n             * Run translation operations for one node.\n             * @private\n             */\n            TreegraphSeries.prototype.translateNode = function (point) {\n                var chart = this.chart, node = point.node, plotSizeY = chart.plotSizeY, plotSizeX = chart.plotSizeX, \n                // Get the layout modifiers which are common for all nodes.\n                _a = this.layoutModifier, ax = _a.ax, bx = _a.bx, ay = _a.ay, by = _a.by, x = ax * node.xPosition + bx, y = ay * node.yPosition + by, level = this.mapOptionsToLevel[node.level] || {}, markerOptions = merge(this.options.marker, level.marker, point.options.marker), symbol = markerOptions.symbol, height = node.nodeSizeY, width = node.nodeSizeX, reversed = this.options.reversed, nodeX = node.x = (chart.inverted ?\n                    plotSizeX - width / 2 - x :\n                    x - width / 2), nodeY = node.y = (!reversed ?\n                    plotSizeY - y - height / 2 :\n                    y - height / 2), borderRadius = pick(point.options.borderRadius, level.borderRadius, this.options.borderRadius), symbolFn = symbols[symbol || 'circle'];\n                if (symbolFn === void 0) {\n                    point.hasImage = true;\n                    point.shapeType = 'image';\n                    point.imageUrl = symbol.match(/^url\\((.*?)\\)$/)[1];\n                }\n                else {\n                    point.shapeType = 'path';\n                }\n                if (!point.visible && point.linkToParent) {\n                    var parentNode = point.linkToParent.fromNode;\n                    if (parentNode) {\n                        var parentShapeArgs = parentNode.shapeArgs || {}, _b = parentShapeArgs.x, x_1 = _b === void 0 ? 0 : _b, _c = parentShapeArgs.y, y_1 = _c === void 0 ? 0 : _c, _d = parentShapeArgs.width, width_1 = _d === void 0 ? 0 : _d, _e = parentShapeArgs.height, height_1 = _e === void 0 ? 0 : _e;\n                        if (!point.shapeArgs) {\n                            point.shapeArgs = {};\n                        }\n                        if (!point.hasImage) {\n                            extend(point.shapeArgs, {\n                                d: symbolFn(x_1, y_1, width_1, height_1, borderRadius ? { r: borderRadius } : void 0)\n                            });\n                        }\n                        extend(point.shapeArgs, { x: x_1, y: y_1 });\n                        point.plotX = parentNode.plotX;\n                        point.plotY = parentNode.plotY;\n                    }\n                }\n                else {\n                    point.plotX = nodeX;\n                    point.plotY = nodeY;\n                    point.shapeArgs = {\n                        x: nodeX,\n                        y: nodeY,\n                        width: width,\n                        height: height,\n                        cursor: !point.node.isLeaf ? 'pointer' : 'default'\n                    };\n                    if (!point.hasImage) {\n                        point.shapeArgs.d = symbolFn(nodeX, nodeY, width, height, borderRadius ? { r: borderRadius } : void 0);\n                    }\n                }\n                // Set the anchor position for tooltip.\n                point.tooltipPos = chart.inverted ?\n                    [plotSizeY - nodeY - height / 2, plotSizeX - nodeX - width / 2] :\n                    [nodeX + width / 2, nodeY];\n            };\n            TreegraphSeries.defaultOptions = merge(TreemapSeries.defaultOptions, TreegraphSeriesDefaults);\n            return TreegraphSeries;\n        }(TreemapSeries));\n        extend(TreegraphSeries.prototype, {\n            pointClass: TreegraphPoint,\n            NodeClass: TreegraphNode,\n            LinkClass: TreegraphLink\n        });\n        SeriesRegistry.registerSeriesType('treegraph', TreegraphSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `treegraph` series. If the [type](#series.treegraph.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treegraph\n         * @exclude   allowDrillToNode, boostBlending, boostThreshold, curveFactor,\n         * centerInCategory, connectEnds, connectNulls, colorAxis, colorKey,\n         * dataSorting, dragDrop, findNearestPointBy, getExtremesFromAll, layout,\n         * nodePadding,  pointInterval, pointIntervalUnit, pointPlacement, pointStart,\n         * relativeXValue, softThreshold, stack, stacking, step,\n         * traverseUpButton, xAxis, yAxis, zoneAxis, zones\n         * @product   highcharts\n         * @requires  modules/treemap.js\n         * @requires  modules/treegraph.js\n         * @apioption series.treegraph\n         */\n        /**\n         * @extends   plotOptions.series.marker\n         * @excluding enabled, enabledThreshold\n         * @apioption series.treegraph.marker\n         */\n        /**\n         * @type      {Highcharts.SeriesTreegraphDataLabelsOptionsObject|Array<Highcharts.SeriesTreegraphDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.treegraph.data.dataLabels\n         */\n        /**\n         * @sample highcharts/series-treegraph/level-options\n         *          Treegraph chart with level options applied\n         *\n         * @type      {Array<*>}\n         * @excluding layoutStartingDirection, layoutAlgorithm\n         * @apioption series.treegraph.levels\n         */\n        /**\n         * Set collapsed status for nodes level-wise.\n         * @type {boolean}\n         * @apioption series.treegraph.levels.collapsed\n         */\n        /**\n         * Set marker options for nodes at the level.\n         * @extends   series.treegraph.marker\n         * @apioption series.treegraph.levels.marker\n         */\n        /**\n         * An array of data points for the series. For the `treegraph` series type,\n         * points can be given in the following ways:\n         *\n         * 1. The array of arrays, with `keys` property, which defines how the fields in\n         *     array should be interpretated\n         *    ```js\n         *       keys: ['id', 'parent'],\n         *       data: [\n         *           ['Category1'],\n         *           ['Category1', 'Category2']\n         *       ]\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the\n         *    series' [turboThreshold](#series.area.turboThreshold),\n         *    this option is not available.\n         *    The data of the treegraph series needs to be formatted in such a way, that\n         *    there are no circular dependencies on the nodes\n         *\n         *  ```js\n         *     data: [{\n         *         id: 'Category1'\n         *     }, {\n         *         id: 'Category1',\n         *         parent: 'Category2',\n         *     }]\n         *  ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.treemap.data\n         * @product   highcharts\n         * @excluding outgoing, weight, value\n         * @apioption series.treegraph.data\n         */\n        /**\n         * Options used for button, which toggles the collapse status of the node.\n         *\n         *\n         * @apioption series.treegraph.data.collapseButton\n         */\n        /**\n         * If point's children should be initially hidden\n         *\n         * @sample highcharts/series-treegraph/level-options\n         *          Treegraph chart with initially hidden children\n         *\n         * @type {boolean}\n         * @apioption series.treegraph.data.collapsed\n         */\n        ''; // gets doclets above into transpiled version\n\n        return TreegraphSeries;\n    });\n    _registerModule(_modules, 'masters/modules/treegraph.src.js', [], function () {\n\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","applyRadius","r","d","i","length","x","y","push","prevSeg","nextSeg","x1","y1","x2","y2","directionX","directionY","Math","min","abs","getLinkPath","pathParams","_a","width","_b","inverted","radius","parentVisible","straight","curved","offset","_c","SeriesRegistry","extendStatics","__extends","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","_super","TreegraphNode","_this","arguments","mod","shift","change","children","preX","hidden","wasVisited","collapsed","nextLeft","getLeftMostChild","thread","nextRight","getRightMostChild","getAncestor","leftIntNode","defaultAncestor","leftAnc","ancestor","getLeftMostSibling","parent","getParent","_i","child","point","visible","hasChildren","getLeftSibling","relativeXPosition","parentNode","getFirstChild","seriesTypes","treemap","NodeClass","Point","U","TreemapPoint","pointClass","addEvent","fireEvent","merge","pick","TreegraphPoint","options","isLink","series","node","setState","draw","graphic","animate","visibility","renderCollapseButton","parentGroup","levelOptions","mapOptionsToLevel","level","btnOptions","collapseButton","height","shape","style","chart","calculatedOpacity","onlyOnHover","state","shapeArgs","collapseButtonOptions","enabled","getCollapseBtnPosition","attr","text","rotation","rotationOriginX","rotationOriginY","opacity","destroy","fill","fillColor","color","renderer","label","padding","stroke","lineColor","lineWidth","align","zIndex","addClass","removeClass","css","getContrast","add","element","toggleCollapse","redraw","linkToParent","btnWidth","btnHeight","_d","_e","btn","states","hover","animation","extend","LinkPoint","formatPrefix","dataLabelOnNull","init","link","fromNode","toNode","id","update","runEvent","oldOptions","column","TreegraphLayout","createDummyNode","gapSize","index","dummyNode","oldParentNode","calculatePositions","nodes","nodeList","resetValues","root","tree","treeLayout","calculateRelativeX","beforeLayout","firstWalk","secondWalk","afterLayout","nodes_1","nodes_2","iEnd","leftSibling","apportion","executeShifts","leftChild","rightChild","midPoint","modSum","yPosition","xPosition","childNode","rightIntNode","rightOutNode","leftOutNode","rightIntMod","rightOutMod","leftIntMod","leftOutMod","moveSubtree","leftNode","rightNode","subtrees","nodes_3","reversed","marker","symbol","fillOpacity","cursor","type","fontWeight","fontSize","fillSpace","tooltip","linkFormat","pointFormat","dataLabels","defer","linkTextPath","attributes","startOffset","linkFormatter","textOverflow","PU","SVGRenderer","TU","TreegraphLink","TreegraphSeriesDefaults","seriesProto","TreemapSeries","ColumnSeries","symbols","getLevelOptions","relativeLength","splat","TreegraphSeries","data","points","layoutModifier","nodeMap","layoutAlgorythm","links","getLayoutModifiers","plotSizeX","plotSizeY","minX","Infinity","maxX","minY","maxY","maxXSize","minXSize","maxYSize","minYSize","forEach","markerOptions","nodeSizeY","nodeSizeX","max","ay","by","ax","bx","getLinks","pointOptions","destroyed","LinkClass","splice","buildTree","list","markerAttribs","setCollapsedStatus","drawTracker","translate","rootNode","rootId","updateRootId","getTree","setRootNode","from","levels","to","defaults","levelIsConstant","colorByPoint","setTreeValues","translateNode","translateLink","setColorRecursive","linkWidth","crisp","round","factor","curveFactor","fromNodeWidth","floor","diff","shapeType","xMiddle","plotX","plotY","dlBox","tooltipPos","drawNodeLabels","points_1","hasDataLabels","dataLabel","dlOptions","drawDataLabels","alignDataLabel","hide","pointAttribs","stateOptions","linkColor","linkLineWidth","attribs","drawPoints","nodeX","nodeY","borderRadius","symbolFn","hasImage","imageUrl","match","parentShapeArgs","x_1","y_1","isLeaf","defaultOptions","registerSeriesType"],"mappings":"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"}