{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.2.0 (2023-10-30)\n *\n * (c) 2009-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/series-label', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/SeriesLabel/SeriesLabelDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Series labels are placed as close to the series as possible in a\n         * natural way, seeking to avoid other series. The goal of this\n         * feature is to make the chart more easily readable, like if a\n         * human designer placed the labels in the optimal position.\n         *\n         * The series labels currently work with series types having a\n         * `graph` or an `area`.\n         *\n         * @sample highcharts/series-label/line-chart\n         *         Line chart\n         * @sample highcharts/demo/streamgraph\n         *         Stream graph\n         * @sample highcharts/series-label/stock-chart\n         *         Stock chart\n         *\n         * @declare  Highcharts.SeriesLabelOptionsObject\n         * @since    6.0.0\n         * @product  highcharts highstock gantt\n         * @requires modules/series-label\n         * @optionparent plotOptions.series.label\n         */\n        var SeriesLabelDefaults = {\n            /**\n             * Enable the series label per series.\n             */\n            enabled: true,\n            /**\n             * Allow labels to be placed distant to the graph if necessary,\n             * and draw a connector line to the graph. Setting this option\n             * to true may decrease the performance significantly, since the\n             * algorithm with systematically search for open spaces in the\n             * whole plot area. Visually, it may also result in a more\n             * cluttered chart, though more of the series will be labeled.\n             */\n            connectorAllowed: false,\n            /**\n             * If the label is closer than this to a neighbour graph, draw a\n             * connector.\n             */\n            connectorNeighbourDistance: 24,\n            /**\n             * A format string for the label, with support for a subset of\n             * HTML. Variables are enclosed by curly brackets. Available\n             * variables are `name`, `options.xxx`, `color` and other\n             * members from the `series` object. Use this option also to set\n             * a static text for the label.\n             *\n             * @type string\n             * @since 8.1.0\n             */\n            format: void 0,\n            /**\n             * Callback function to format each of the series' labels. The\n             * `this` keyword refers to the series object. By default the\n             * `formatter` is undefined and the `series.name` is rendered.\n             *\n             * @type {Highcharts.FormatterCallbackFunction<Series>}\n             * @since 8.1.0\n             */\n            formatter: void 0,\n            /**\n             * For area-like series, allow the font size to vary so that\n             * small areas get a smaller font size. The default applies this\n             * effect to area-like series but not line-like series.\n             *\n             * @type {number|null}\n             */\n            minFontSize: null,\n            /**\n             * For area-like series, allow the font size to vary so that\n             * small areas get a smaller font size. The default applies this\n             * effect to area-like series but not line-like series.\n             *\n             * @type {number|null}\n             */\n            maxFontSize: null,\n            /**\n             * Draw the label on the area of an area series. By default it\n             * is drawn on the area. Set it to `false` to draw it next to\n             * the graph instead.\n             *\n             * @type {boolean|null}\n             */\n            onArea: null,\n            /**\n             * Styles for the series label. The color defaults to the series\n             * color, or a contrast color if `onArea`.\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            style: {\n                /** @internal */\n                fontSize: '0.8em',\n                /** @internal */\n                fontWeight: 'bold'\n            },\n            /**\n             * Whether to use HTML to render the series label.\n             */\n            useHTML: false,\n            /**\n             * An array of boxes to avoid when laying out the labels. Each\n             * item has a `left`, `right`, `top` and `bottom` property.\n             *\n             * @type {Array<Highcharts.LabelIntersectBoxObject>}\n             */\n            boxesToAvoid: []\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SeriesLabelDefaults;\n    });\n    _registerModule(_modules, 'Extensions/SeriesLabel/SeriesLabelUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Counter-clockwise, part of the fast line intersection logic.\n         *\n         * @private\n         * @function ccw\n         */\n        function ccw(x1, y1, x2, y2, x3, y3) {\n            var cw = ((y3 - y1) * (x2 - x1)) - ((y2 - y1) * (x3 - x1));\n            return cw > 0 ? true : !(cw < 0);\n        }\n        /**\n         * Detect if two lines intersect.\n         *\n         * @private\n         * @function intersectLine\n         */\n        function intersectLine(x1, y1, x2, y2, x3, y3, x4, y4) {\n            return ccw(x1, y1, x3, y3, x4, y4) !== ccw(x2, y2, x3, y3, x4, y4) &&\n                ccw(x1, y1, x2, y2, x3, y3) !== ccw(x1, y1, x2, y2, x4, y4);\n        }\n        /**\n         * Detect if a box intersects with a line.\n         *\n         * @private\n         * @function boxIntersectLine\n         */\n        function boxIntersectLine(x, y, w, h, x1, y1, x2, y2) {\n            return (intersectLine(x, y, x + w, y, x1, y1, x2, y2) || // top of label\n                intersectLine(x + w, y, x + w, y + h, x1, y1, x2, y2) || // right\n                intersectLine(x, y + h, x + w, y + h, x1, y1, x2, y2) || // bottom\n                intersectLine(x, y, x, y + h, x1, y1, x2, y2) // left of label\n            );\n        }\n        /**\n         * @private\n         */\n        function intersectRect(r1, r2) {\n            return !(r2.left > r1.right ||\n                r2.right < r1.left ||\n                r2.top > r1.bottom ||\n                r2.bottom < r1.top);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SeriesLabelUtilities = {\n            boxIntersectLine: boxIntersectLine,\n            intersectRect: intersectRect\n        };\n\n        return SeriesLabelUtilities;\n    });\n    _registerModule(_modules, 'Extensions/SeriesLabel/SeriesLabel.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Templating.js'], _modules['Core/Defaults.js'], _modules['Extensions/SeriesLabel/SeriesLabelDefaults.js'], _modules['Extensions/SeriesLabel/SeriesLabelUtilities.js'], _modules['Core/Utilities.js']], function (A, Chart, T, D, SeriesLabelDefaults, SLU, U) {\n        /* *\n         *\n         *  (c) 2009-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /*\n         * Highcharts module to place labels next to a series in a natural position.\n         *\n         * TODO:\n         * - add column support (box collision detection, boxesToAvoid logic)\n         * - add more options (connector, format, formatter)\n         *\n         * https://jsfiddle.net/highcharts/L2u9rpwr/\n         * https://jsfiddle.net/highcharts/y5A37/\n         * https://jsfiddle.net/highcharts/264Nm/\n         * https://jsfiddle.net/highcharts/y5A37/\n         */\n        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n                if (ar || !(i in from)) {\n                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n                    ar[i] = from[i];\n                }\n            }\n            return to.concat(ar || Array.prototype.slice.call(from));\n        };\n        var animObject = A.animObject;\n        var format = T.format;\n        var setOptions = D.setOptions;\n        var boxIntersectLine = SLU.boxIntersectLine, intersectRect = SLU.intersectRect;\n        var addEvent = U.addEvent, extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, pick = U.pick, syncTimeout = U.syncTimeout;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var composedMembers = [];\n        var labelDistance = 3;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check whether a proposed label position is clear of other elements.\n         * @private\n         */\n        function checkClearPoint(series, x, y, bBox, checkDistance) {\n            var chart = series.chart, seriesLabelOptions = series.options.label || {}, onArea = pick(seriesLabelOptions.onArea, !!series.area), findDistanceToOthers = (onArea || seriesLabelOptions.connectorAllowed), leastDistance = 16, boxesToAvoid = chart.boxesToAvoid;\n            var distToOthersSquared = Number.MAX_VALUE, // distance to other graphs\n            distToPointSquared = Number.MAX_VALUE, dist, connectorPoint, withinRange, xDist, yDist, i, j;\n            /**\n             * Get the weight in order to determine the ideal position. Larger distance\n             * to other series gives more weight. Smaller distance to the actual point\n             * (connector points only) gives more weight.\n             * @private\n             */\n            function getWeight(distToOthersSquared, distToPointSquared) {\n                return distToOthersSquared - distToPointSquared;\n            }\n            // First check for collision with existing labels\n            for (i = 0; boxesToAvoid && i < boxesToAvoid.length; i += 1) {\n                if (intersectRect(boxesToAvoid[i], {\n                    left: x,\n                    right: x + bBox.width,\n                    top: y,\n                    bottom: y + bBox.height\n                })) {\n                    return false;\n                }\n            }\n            // For each position, check if the lines around the label intersect with any\n            // of the graphs.\n            for (i = 0; i < chart.series.length; i += 1) {\n                var serie = chart.series[i], points = serie.interpolatedPoints && __spreadArray([], serie.interpolatedPoints, true);\n                if (serie.visible && points) {\n                    // Avoid the sides of the plot area\n                    var stepY = chart.plotHeight / 10;\n                    for (var chartY = chart.plotTop; chartY <= chart.plotTop + chart.plotHeight; chartY += stepY) {\n                        points.unshift({\n                            chartX: chart.plotLeft,\n                            chartY: chartY\n                        });\n                        points.push({\n                            chartX: chart.plotLeft + chart.plotWidth,\n                            chartY: chartY\n                        });\n                    }\n                    for (j = 1; j < points.length; j += 1) {\n                        if (\n                        // To avoid processing, only check intersection if the X\n                        // values are close to the box.\n                        points[j].chartX >= x - leastDistance &&\n                            points[j - 1].chartX <= x + bBox.width +\n                                leastDistance\n                        /* @todo condition above is not the same as below\n                        (\n                            points[j].chartX >=\n                            (x - leastDistance)\n                        ) && (\n                            points[j - 1].chartX <=\n                            (x + bBox.width + leastDistance)\n                        ) */\n                        ) {\n                            // If any of the box sides intersect with the line, return.\n                            if (boxIntersectLine(x, y, bBox.width, bBox.height, points[j - 1].chartX, points[j - 1].chartY, points[j].chartX, points[j].chartY)) {\n                                return false;\n                            }\n                            // But if it is too far away (a padded box doesn't\n                            // intersect), also return.\n                            if (series === serie && !withinRange && checkDistance) {\n                                withinRange = boxIntersectLine(x - leastDistance, y - leastDistance, bBox.width + 2 * leastDistance, bBox.height + 2 * leastDistance, points[j - 1].chartX, points[j - 1].chartY, points[j].chartX, points[j].chartY);\n                            }\n                        }\n                        // Find the squared distance from the center of the label. On\n                        // area series, avoid its own graph.\n                        if ((findDistanceToOthers || withinRange) &&\n                            (series !== serie || onArea)) {\n                            xDist = x + bBox.width / 2 - points[j].chartX;\n                            yDist = y + bBox.height / 2 - points[j].chartY;\n                            distToOthersSquared = Math.min(distToOthersSquared, xDist * xDist + yDist * yDist);\n                        }\n                    }\n                    // Do we need a connector?\n                    if (!onArea &&\n                        findDistanceToOthers &&\n                        series === serie &&\n                        ((checkDistance && !withinRange) ||\n                            distToOthersSquared < Math.pow(seriesLabelOptions.connectorNeighbourDistance || 1, 2))) {\n                        for (j = 1; j < points.length; j += 1) {\n                            dist = Math.min((Math.pow(x + bBox.width / 2 - points[j].chartX, 2) +\n                                Math.pow(y + bBox.height / 2 - points[j].chartY, 2)), (Math.pow(x - points[j].chartX, 2) +\n                                Math.pow(y - points[j].chartY, 2)), (Math.pow(x + bBox.width - points[j].chartX, 2) +\n                                Math.pow(y - points[j].chartY, 2)), (Math.pow(x + bBox.width - points[j].chartX, 2) +\n                                Math.pow(y + bBox.height - points[j].chartY, 2)), (Math.pow(x - points[j].chartX, 2) +\n                                Math.pow(y + bBox.height - points[j].chartY, 2)));\n                            if (dist < distToPointSquared) {\n                                distToPointSquared = dist;\n                                connectorPoint = points[j];\n                            }\n                        }\n                        withinRange = true;\n                    }\n                }\n            }\n            return !checkDistance || withinRange ? {\n                x: x,\n                y: y,\n                weight: getWeight(distToOthersSquared, connectorPoint ? distToPointSquared : 0),\n                connectorPoint: connectorPoint\n            } : false;\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass, SVGRendererClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                // Leave both events, we handle animation differently (#9815)\n                addEvent(Chart, 'load', onChartRedraw);\n                addEvent(Chart, 'redraw', onChartRedraw);\n            }\n            if (U.pushUnique(composedMembers, SVGRendererClass)) {\n                SVGRendererClass.prototype.symbols.connector = symbolConnector;\n            }\n            if (U.pushUnique(composedMembers, setOptions)) {\n                setOptions({ plotOptions: { series: { label: SeriesLabelDefaults } } });\n            }\n        }\n        /**\n         * The main initialize method that runs on chart level after initialization and\n         * redraw. It runs in  a timeout to prevent locking, and loops over all series,\n         * taking all series and labels into account when placing the labels.\n         *\n         * @private\n         * @function Highcharts.Chart#drawSeriesLabels\n         */\n        function drawSeriesLabels(chart) {\n            // console.time('drawSeriesLabels');\n            chart.boxesToAvoid = [];\n            var labelSeries = chart.labelSeries || [], boxesToAvoid = chart.boxesToAvoid;\n            // Avoid data labels\n            chart.series.forEach(function (s) {\n                return (s.points || []).forEach(function (p) {\n                    return (p.dataLabels || []).forEach(function (label) {\n                        var _a = label.getBBox(), width = _a.width, height = _a.height, left = (label.translateX || 0) + (s.xAxis ? s.xAxis.pos : s.chart.plotLeft), top = (label.translateY || 0) + (s.yAxis ? s.yAxis.pos : s.chart.plotTop);\n                        boxesToAvoid.push({\n                            left: left,\n                            top: top,\n                            right: left + width,\n                            bottom: top + height\n                        });\n                    });\n                });\n            });\n            // Build the interpolated points\n            labelSeries.forEach(function (series) {\n                var seriesLabelOptions = series.options.label || {};\n                series.interpolatedPoints = getPointsOnGraph(series);\n                boxesToAvoid.push.apply(boxesToAvoid, (seriesLabelOptions.boxesToAvoid || []));\n            });\n            chart.series.forEach(function (series) {\n                var labelOptions = series.options.label;\n                if (!labelOptions || (!series.xAxis && !series.yAxis)) {\n                    return;\n                }\n                var colorClass = ('highcharts-color-' + pick(series.colorIndex, 'none')), isNew = !series.labelBySeries, minFontSize = labelOptions.minFontSize, maxFontSize = labelOptions.maxFontSize, inverted = chart.inverted, paneLeft = (inverted ? series.yAxis.pos : series.xAxis.pos), paneTop = (inverted ? series.xAxis.pos : series.yAxis.pos), paneWidth = chart.inverted ? series.yAxis.len : series.xAxis.len, paneHeight = chart.inverted ? series.xAxis.len : series.yAxis.len, points = series.interpolatedPoints, onArea = pick(labelOptions.onArea, !!series.area), results = [], xData = series.xData || [];\n                var bBox, x, y, clearPoint, i, best, label = series.labelBySeries, dataExtremes, areaMin, areaMax;\n                // Stay within the area data bounds (#10038)\n                if (onArea && !inverted) {\n                    dataExtremes = [\n                        series.xAxis.toPixels(xData[0]),\n                        series.xAxis.toPixels(xData[xData.length - 1])\n                    ];\n                    areaMin = Math.min.apply(Math, dataExtremes);\n                    areaMax = Math.max.apply(Math, dataExtremes);\n                }\n                /**\n                 * @private\n                 */\n                function insidePane(x, y, bBox) {\n                    var leftBound = Math.max(paneLeft, pick(areaMin, -Infinity)), rightBound = Math.min(paneLeft + paneWidth, pick(areaMax, Infinity));\n                    return (x > leftBound &&\n                        x <= rightBound - bBox.width &&\n                        y >= paneTop &&\n                        y <= paneTop + paneHeight - bBox.height);\n                }\n                /**\n                 * @private\n                 */\n                function destroyLabel() {\n                    if (label) {\n                        series.labelBySeries = label.destroy();\n                    }\n                }\n                if (series.visible && !series.boosted && points) {\n                    if (!label) {\n                        var labelText = series.name;\n                        if (typeof labelOptions.format === 'string') {\n                            labelText = format(labelOptions.format, series, chart);\n                        }\n                        else if (labelOptions.formatter) {\n                            labelText = labelOptions.formatter.call(series);\n                        }\n                        series.labelBySeries = label = chart.renderer\n                            .label(labelText, 0, 0, 'connector', 0, 0, labelOptions.useHTML)\n                            .addClass('highcharts-series-label ' +\n                            'highcharts-series-label-' + series.index + ' ' +\n                            (series.options.className || '') + ' ' +\n                            colorClass);\n                        if (!chart.renderer.styledMode) {\n                            var color = typeof series.color === 'string' ?\n                                series.color : \"#666666\" /* Palette.neutralColor60 */;\n                            label.css(extend({\n                                color: onArea ?\n                                    chart.renderer.getContrast(color) :\n                                    color\n                            }, labelOptions.style || {}));\n                            label.attr({\n                                opacity: chart.renderer.forExport ? 1 : 0,\n                                stroke: series.color,\n                                'stroke-width': 1\n                            });\n                        }\n                        // Adapt label sizes to the sum of the data\n                        if (minFontSize && maxFontSize) {\n                            label.css({\n                                fontSize: labelFontSize(series, minFontSize, maxFontSize)\n                            });\n                        }\n                        label\n                            .attr({\n                            padding: 0,\n                            zIndex: 3\n                        })\n                            .add();\n                    }\n                    bBox = label.getBBox();\n                    bBox.width = Math.round(bBox.width);\n                    // Ideal positions are centered above or below a point on right side\n                    // of chart\n                    for (i = points.length - 1; i > 0; i -= 1) {\n                        if (onArea) {\n                            // Centered\n                            x = points[i].chartX - bBox.width / 2;\n                            y = (points[i].chartCenterY || 0) - bBox.height / 2;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                        }\n                        else {\n                            // Right - up\n                            x = points[i].chartX + labelDistance;\n                            y = points[i].chartY - bBox.height - labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                            // Right - down\n                            x = points[i].chartX + labelDistance;\n                            y = points[i].chartY + labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                            // Left - down\n                            x = points[i].chartX - bBox.width - labelDistance;\n                            y = points[i].chartY + labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                            // Left - up\n                            x = points[i].chartX - bBox.width - labelDistance;\n                            y = points[i].chartY - bBox.height - labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                        }\n                    }\n                    // Brute force, try all positions on the chart in a 16x16 grid\n                    if (labelOptions.connectorAllowed && !results.length && !onArea) {\n                        for (x = paneLeft + paneWidth - bBox.width; x >= paneLeft; x -= 16) {\n                            for (y = paneTop; y < paneTop + paneHeight - bBox.height; y += 16) {\n                                clearPoint = checkClearPoint(series, x, y, bBox, true);\n                                if (clearPoint) {\n                                    results.push(clearPoint);\n                                }\n                            }\n                        }\n                    }\n                    if (results.length) {\n                        results.sort(function (a, b) { return b.weight - a.weight; });\n                        best = results[0];\n                        (chart.boxesToAvoid || []).push({\n                            left: best.x,\n                            right: best.x + bBox.width,\n                            top: best.y,\n                            bottom: best.y + bBox.height\n                        });\n                        // Move it if needed\n                        var dist = Math.sqrt(Math.pow(Math.abs(best.x - (label.x || 0)), 2) +\n                            Math.pow(Math.abs(best.y - (label.y || 0)), 2));\n                        if (dist && series.labelBySeries) {\n                            // Move fast and fade in - pure animation movement is\n                            // distractive...\n                            var attr = {\n                                opacity: chart.renderer.forExport ? 1 : 0,\n                                x: best.x,\n                                y: best.y\n                            }, anim = {\n                                opacity: 1\n                            };\n                            // ... unless we're just moving a short distance\n                            if (dist <= 10) {\n                                anim = {\n                                    x: attr.x,\n                                    y: attr.y\n                                };\n                                attr = {};\n                            }\n                            // Default initial animation to a fraction of the series\n                            // animation (#9396)\n                            var animationOptions = void 0;\n                            if (isNew) {\n                                animationOptions = animObject(series.options.animation);\n                                animationOptions.duration *= 0.2;\n                            }\n                            series.labelBySeries\n                                .attr(extend(attr, {\n                                anchorX: best.connectorPoint &&\n                                    (best.connectorPoint.plotX || 0) + paneLeft,\n                                anchorY: best.connectorPoint &&\n                                    (best.connectorPoint.plotY || 0) + paneTop\n                            }))\n                                .animate(anim, animationOptions);\n                            // Record closest point to stick to for sync redraw\n                            series.options.kdNow = true;\n                            series.buildKDTree();\n                            var closest = series.searchPoint({\n                                chartX: best.x,\n                                chartY: best.y\n                            }, true);\n                            if (closest) {\n                                label.closest = [\n                                    closest,\n                                    best.x - (closest.plotX || 0),\n                                    best.y - (closest.plotY || 0)\n                                ];\n                            }\n                        }\n                    }\n                    else {\n                        destroyLabel();\n                    }\n                }\n                else {\n                    destroyLabel();\n                }\n            });\n            fireEvent(chart, 'afterDrawSeriesLabels');\n            // console.timeEnd('drawSeriesLabels');\n        }\n        /**\n         * Points to avoid. In addition to actual data points, the label should avoid\n         * interpolated positions.\n         *\n         * @private\n         * @function Highcharts.Series#getPointsOnGraph\n         */\n        function getPointsOnGraph(series) {\n            if (!series.xAxis && !series.yAxis) {\n                return;\n            }\n            var distance = 16, points = series.points, interpolated = [], graph = series.graph || series.area, node = graph && graph.element, inverted = series.chart.inverted, xAxis = series.xAxis, yAxis = series.yAxis, paneLeft = inverted ? yAxis.pos : xAxis.pos, paneTop = inverted ? xAxis.pos : yAxis.pos, seriesLabelOptions = series.options.label || {}, onArea = pick(seriesLabelOptions.onArea, !!series.area), translatedThreshold = yAxis.getThreshold(series.options.threshold), grid = {};\n            var i, deltaX, deltaY, delta, len, n, j;\n            /**\n             * Push the point to the interpolated points, but only if that position in\n             * the grid has not been occupied. As a performance optimization, we divide\n             * the plot area into a grid and only add one point per series (#9815).\n             * @private\n             */\n            function pushDiscrete(point) {\n                var cellSize = 8, key = Math.round((point.plotX || 0) / cellSize) + ',' +\n                    Math.round((point.plotY || 0) / cellSize);\n                if (!grid[key]) {\n                    grid[key] = 1;\n                    interpolated.push(point);\n                }\n            }\n            // For splines, get the point at length (possible caveat: peaks are not\n            // correctly detected)\n            if (series.getPointSpline &&\n                node &&\n                node.getPointAtLength &&\n                !onArea &&\n                // Not performing well on complex series, node.getPointAtLength is too\n                // heavy (#9815)\n                points.length < (series.chart.plotSizeX || 0) / distance) {\n                // If it is animating towards a path definition, use that briefly, and\n                // reset\n                var d = graph.toD && graph.attr('d');\n                if (graph.toD) {\n                    graph.attr({ d: graph.toD });\n                }\n                len = node.getTotalLength();\n                for (i = 0; i < len; i += distance) {\n                    var domPoint = node.getPointAtLength(i);\n                    pushDiscrete({\n                        chartX: paneLeft + domPoint.x,\n                        chartY: paneTop + domPoint.y,\n                        plotX: domPoint.x,\n                        plotY: domPoint.y\n                    });\n                }\n                if (d) {\n                    graph.attr({ d: d });\n                }\n                // Last point\n                var point = points[points.length - 1];\n                pushDiscrete({\n                    chartX: paneLeft + (point.plotX || 0),\n                    chartY: paneTop + (point.plotY || 0)\n                });\n                // Interpolate\n            }\n            else {\n                len = points.length;\n                var last = void 0;\n                for (i = 0; i < len; i += 1) {\n                    var point = points[i], plotX = point.plotX, plotY = point.plotY, plotHigh = point.plotHigh;\n                    if (isNumber(plotX) && isNumber(plotY)) {\n                        var ctlPoint = {\n                            plotX: plotX,\n                            plotY: plotY,\n                            // Absolute coordinates so we can compare different panes\n                            chartX: paneLeft + plotX,\n                            chartY: paneTop + plotY\n                        };\n                        if (onArea) {\n                            // Vertically centered inside area\n                            if (plotHigh) {\n                                ctlPoint.plotY = plotHigh;\n                                ctlPoint.chartY = paneTop + plotHigh;\n                            }\n                            ctlPoint.chartCenterY = paneTop + ((plotHigh ? plotHigh : plotY) +\n                                pick(point.yBottom, translatedThreshold)) / 2;\n                        }\n                        // Add interpolated points\n                        if (last) {\n                            deltaX = Math.abs(ctlPoint.chartX - last.chartX);\n                            deltaY = Math.abs(ctlPoint.chartY - last.chartY);\n                            delta = Math.max(deltaX, deltaY);\n                            if (delta > distance) {\n                                n = Math.ceil(delta / distance);\n                                for (j = 1; j < n; j += 1) {\n                                    pushDiscrete({\n                                        chartX: last.chartX +\n                                            (ctlPoint.chartX - last.chartX) * (j / n),\n                                        chartY: last.chartY +\n                                            (ctlPoint.chartY - last.chartY) * (j / n),\n                                        chartCenterY: (last.chartCenterY || 0) +\n                                            ((ctlPoint.chartCenterY || 0) -\n                                                (last.chartCenterY || 0)) * (j / n),\n                                        plotX: (last.plotX || 0) +\n                                            (plotX - (last.plotX || 0)) * (j / n),\n                                        plotY: (last.plotY || 0) +\n                                            (plotY - (last.plotY || 0)) * (j / n)\n                                    });\n                                }\n                            }\n                        }\n                        // Add the real point in order to find positive and negative\n                        // peaks\n                        pushDiscrete(ctlPoint);\n                        last = ctlPoint;\n                    }\n                }\n            }\n            // Get the bounding box so we can do a quick check first if the bounding\n            // boxes overlap.\n            /*\n            interpolated.bBox = node.getBBox();\n            interpolated.bBox.x += paneLeft;\n            interpolated.bBox.y += paneTop;\n            */\n            return interpolated;\n        }\n        /**\n         * Overridable function to return series-specific font sizes for the labels. By\n         * default it returns bigger font sizes for series with the greater sum of y\n         * values.\n         * @private\n         */\n        function labelFontSize(series, minFontSize, maxFontSize) {\n            return minFontSize + (((series.sum || 0) / (series.chart.labelSeriesMaxSum || 0)) *\n                (maxFontSize - minFontSize)) + 'px';\n        }\n        /**\n         * Prepare drawing series labels.\n         * @private\n         */\n        function onChartRedraw(e) {\n            if (this.renderer) {\n                var chart_1 = this;\n                var delay_1 = animObject(chart_1.renderer.globalAnimation).duration;\n                chart_1.labelSeries = [];\n                chart_1.labelSeriesMaxSum = 0;\n                if (chart_1.seriesLabelTimer) {\n                    U.clearTimeout(chart_1.seriesLabelTimer);\n                }\n                // Which series should have labels\n                chart_1.series.forEach(function (series) {\n                    var seriesLabelOptions = series.options.label || {}, label = series.labelBySeries, closest = label && label.closest;\n                    if (seriesLabelOptions.enabled &&\n                        series.visible &&\n                        (series.graph || series.area) &&\n                        !series.boosted &&\n                        chart_1.labelSeries) {\n                        chart_1.labelSeries.push(series);\n                        if (seriesLabelOptions.minFontSize &&\n                            seriesLabelOptions.maxFontSize &&\n                            series.yData) {\n                            series.sum = series.yData.reduce(function (pv, cv) { return (pv || 0) + (cv || 0); }, 0);\n                            chart_1.labelSeriesMaxSum = Math.max(chart_1.labelSeriesMaxSum || 0, series.sum || 0);\n                        }\n                        // The labels are processing heavy, wait until the animation is\n                        // done\n                        if (e.type === 'load') {\n                            delay_1 = Math.max(delay_1, animObject(series.options.animation).duration);\n                        }\n                        // Keep the position updated to the axis while redrawing\n                        if (closest) {\n                            if (typeof closest[0].plotX !== 'undefined') {\n                                label.animate({\n                                    x: closest[0].plotX + closest[1],\n                                    y: closest[0].plotY + closest[2]\n                                });\n                            }\n                            else {\n                                label.attr({ opacity: 0 });\n                            }\n                        }\n                    }\n                });\n                chart_1.seriesLabelTimer = syncTimeout(function () {\n                    if (chart_1.series && chart_1.labelSeries) { // #7931, chart destroyed\n                        drawSeriesLabels(chart_1);\n                    }\n                }, chart_1.renderer.forExport || !delay_1 ? 0 : delay_1);\n            }\n        }\n        /**\n         * General symbol definition for labels with connector.\n         * @private\n         */\n        function symbolConnector(x, y, w, h, options) {\n            var anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n            var path, yOffset, lateral = w / 2;\n            if (isNumber(anchorX) && isNumber(anchorY)) {\n                path = [['M', anchorX, anchorY]];\n                // Prefer 45 deg connectors\n                yOffset = y - anchorY;\n                if (yOffset < 0) {\n                    yOffset = -h - yOffset;\n                }\n                if (yOffset < w) {\n                    lateral = anchorX < x + (w / 2) ? yOffset : w - yOffset;\n                }\n                // Anchor below label\n                if (anchorY > y + h) {\n                    path.push(['L', x + lateral, y + h]);\n                    // Anchor above label\n                }\n                else if (anchorY < y) {\n                    path.push(['L', x + lateral, y]);\n                    // Anchor left of label\n                }\n                else if (anchorX < x) {\n                    path.push(['L', x, y + h / 2]);\n                    // Anchor right of label\n                }\n                else if (anchorX > x + w) {\n                    path.push(['L', x + w, y + h / 2]);\n                }\n            }\n            return path || [];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SeriesLabel = {\n            compose: compose\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Containing the position of a box that should be avoided by labels.\n         *\n         * @interface Highcharts.LabelIntersectBoxObject\n         */ /**\n        * @name Highcharts.LabelIntersectBoxObject#bottom\n        * @type {number}\n        */ /**\n        * @name Highcharts.LabelIntersectBoxObject#left\n        * @type {number}\n        */ /**\n        * @name Highcharts.LabelIntersectBoxObject#right\n        * @type {number}\n        */ /**\n        * @name Highcharts.LabelIntersectBoxObject#top\n        * @type {number}\n        */\n        (''); // keeps doclets above in JS file\n\n        return SeriesLabel;\n    });\n    _registerModule(_modules, 'masters/modules/series-label.src.js', [_modules['Core/Globals.js'], _modules['Extensions/SeriesLabel/SeriesLabel.js']], function (Highcharts, SeriesLabel) {\n\n        var G = Highcharts;\n        SeriesLabel.compose(G.Chart, G.SVGRenderer);\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","enabled","connectorAllowed","connectorNeighbourDistance","format","formatter","minFontSize","maxFontSize","onArea","style","fontSize","fontWeight","useHTML","boxesToAvoid","ccw","x1","y1","x2","y2","x3","y3","cw","intersectLine","x4","y4","boxIntersectLine","x","y","w","h","intersectRect","r1","r2","left","right","top","bottom","A","Chart","T","D","SeriesLabelDefaults","SLU","U","__spreadArray","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","animObject","setOptions","addEvent","extend","fireEvent","isNumber","pick","syncTimeout","composedMembers","checkClearPoint","series","bBox","checkDistance","dist","connectorPoint","withinRange","xDist","yDist","j","chart","seriesLabelOptions","options","label","area","findDistanceToOthers","distToOthersSquared","Number","MAX_VALUE","distToPointSquared","width","height","serie","points","interpolatedPoints","visible","stepY","plotHeight","chartY","plotTop","unshift","chartX","plotLeft","push","plotWidth","Math","min","pow","weight","onChartRedraw","e","renderer","chart_1","delay_1","globalAnimation","duration","labelSeries","labelSeriesMaxSum","seriesLabelTimer","clearTimeout","forEach","labelBySeries","closest","graph","boosted","yData","sum","reduce","pv","cv","max","type","animation","plotX","animate","plotY","attr","opacity","s","p","dataLabels","_a","getBBox","translateX","xAxis","pos","translateY","yAxis","getPointsOnGraph","delta","len","n","interpolated","node","element","inverted","paneLeft","paneTop","translatedThreshold","getThreshold","threshold","grid","getPointSpline","getPointAtLength","plotSizeX","d","toD","getTotalLength","domPoint","pushDiscrete","point","last","plotHigh","ctlPoint","chartCenterY","yBottom","abs","ceil","key","round","labelOptions","clearPoint","best","dataExtremes","areaMin","areaMax","colorClass","colorIndex","isNew","paneWidth","paneHeight","results","xData","toPixels","labelText","name","addClass","index","className","styledMode","color","css","getContrast","forExport","stroke","padding","zIndex","add","insidePane","sort","a","b","sqrt","anim","animationOptions","anchorX","anchorY","kdNow","buildKDTree","searchPoint","destroyLabel","leftBound","Infinity","rightBound","destroy","symbolConnector","yOffset","lateral","compose","ChartClass","SVGRendererClass","pushUnique","symbols","connector","plotOptions","SeriesLabel","G","SVGRenderer"],"mappings":"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"}