{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.2.0 (2023-10-30)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2021 Kamil Kulig\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/regressions', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/LinearRegression/LinearRegressionIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var isArray = U.isArray, extend = U.extend, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Linear regression series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearregression\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionIndicator = /** @class */ (function (_super) {\n            __extends(LinearRegressionIndicator, _super);\n            function LinearRegressionIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Return the slope and intercept of a straight line function.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period.\n             *\n             * @param {Array<number>} yData\n             * List of all y coordinates in a period.\n             *\n             * @return {Highcharts.RegressionLineParametersObject}\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             */\n            LinearRegressionIndicator.prototype.getRegressionLineParameters = function (xData, yData) {\n                // least squares method\n                var yIndex = this.options.params.index, getSingleYValue = function (yValue, yIndex) {\n                    return isArray(yValue) ? yValue[yIndex] : yValue;\n                }, xSum = xData.reduce(function (accX, val) {\n                    return val + accX;\n                }, 0), ySum = yData.reduce(function (accY, val) {\n                    return getSingleYValue(val, yIndex) + accY;\n                }, 0), xMean = xSum / xData.length, yMean = ySum / yData.length;\n                var xError, yError, i, formulaNumerator = 0, formulaDenominator = 0;\n                for (i = 0; i < xData.length; i++) {\n                    xError = xData[i] - xMean;\n                    yError = getSingleYValue(yData[i], yIndex) - yMean;\n                    formulaNumerator += xError * yError;\n                    formulaDenominator += Math.pow(xError, 2);\n                }\n                var slope = formulaDenominator ?\n                    formulaNumerator / formulaDenominator : 0; // don't divide by 0\n                return {\n                    slope: slope,\n                    intercept: yMean - slope * xMean\n                };\n            };\n            /**\n             * Return the y value on a straight line.\n             *\n             * @private\n             *\n             * @param {Highcharts.RegressionLineParametersObject} lineParameters\n             * Object that contains the slope and the intercept of a straight line\n             * function.\n             *\n             * @param {number} endPointX\n             * X coordinate of the point.\n             *\n             * @return {number}\n             * Y value of the point that lies on the line.\n             */\n            LinearRegressionIndicator.prototype.getEndPointY = function (lineParameters, endPointX) {\n                return lineParameters.slope * endPointX + lineParameters.intercept;\n            };\n            /**\n             * Transform the coordinate system so that x values start at 0 and\n             * apply xAxisUnit.\n             *\n             * @private\n             *\n             * @param {Array<number>} xData\n             * List of all x coordinates in a period\n             *\n             * @param {number} xAxisUnit\n             * Option (see the API)\n             *\n             * @return {Array<number>}\n             * Array of transformed x data\n             */\n            LinearRegressionIndicator.prototype.transformXData = function (xData, xAxisUnit) {\n                var xOffset = xData[0];\n                return xData.map(function (xValue) {\n                    return (xValue - xOffset) / xAxisUnit;\n                });\n            };\n            /**\n             * Find the closest distance between points in the base series.\n             * @private\n             * @param {Array<number>} xData list of all x coordinates in the base series\n             * @return {number} - closest distance between points in the base series\n             */\n            LinearRegressionIndicator.prototype.findClosestDistance = function (xData) {\n                var distance, closestDistance, i;\n                for (i = 1; i < xData.length - 1; i++) {\n                    distance = xData[i] - xData[i - 1];\n                    if (distance > 0 &&\n                        (typeof closestDistance === 'undefined' ||\n                            distance < closestDistance)) {\n                        closestDistance = distance;\n                    }\n                }\n                return closestDistance;\n            };\n            // Required to be implemented - starting point for indicator's logic\n            LinearRegressionIndicator.prototype.getValues = function (baseSeries, regressionSeriesParams) {\n                var xData = baseSeries.xData, yData = baseSeries.yData, period = regressionSeriesParams.period, \n                // format required to be returned\n                indicatorData = {\n                    xData: [],\n                    yData: [],\n                    values: []\n                }, xAxisUnit = this.options.params.xAxisUnit ||\n                    this.findClosestDistance(xData);\n                var lineParameters, i, periodStart, periodEnd, endPointX, endPointY, periodXData, periodYData, periodTransformedXData;\n                // Iteration logic: x value of the last point within the period\n                // (end point) is used to represent the y value (regression)\n                // of the entire period.\n                for (i = period - 1; i <= xData.length - 1; i++) {\n                    periodStart = i - period + 1; // adjusted for slice() function\n                    periodEnd = i + 1; // (as above)\n                    endPointX = xData[i];\n                    periodXData = xData.slice(periodStart, periodEnd);\n                    periodYData = yData.slice(periodStart, periodEnd);\n                    periodTransformedXData = this.transformXData(periodXData, xAxisUnit);\n                    lineParameters = this.getRegressionLineParameters(periodTransformedXData, periodYData);\n                    endPointY = this.getEndPointY(lineParameters, periodTransformedXData[periodTransformedXData.length - 1]);\n                    // @todo this is probably not used anywhere\n                    indicatorData.values.push({\n                        regressionLineParameters: lineParameters,\n                        x: endPointX,\n                        y: endPointY\n                    });\n                    indicatorData.xData.push(endPointX);\n                    indicatorData.yData.push(endPointY);\n                }\n                return indicatorData;\n            };\n            /**\n             * Linear regression indicator. This series requires `linkedTo` option to be\n             * set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression\n             *         Linear regression indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/regressions\n             * @optionparent plotOptions.linearregression\n             */\n            LinearRegressionIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                params: {\n                    /**\n                     * Unit (in milliseconds) for the x axis distances used to\n                     * compute the regression line paramters (slope & intercept) for\n                     * every range. In Highcharts Stock the x axis values are always\n                     * represented in milliseconds which may cause that distances\n                     * between points are \"big\" integer numbers.\n                     *\n                     * Highcharts Stock's linear regression algorithm (least squares\n                     * method) will utilize these \"big\" integers for finding the\n                     * slope and the intercept of the regression line for each\n                     * period. In consequence, this value may be a very \"small\"\n                     * decimal number that's hard to interpret by a human.\n                     *\n                     * For instance: `xAxisUnit` equealed to `86400000` ms (1 day)\n                     * forces the algorithm to treat `86400000` as `1` while\n                     * computing the slope and the intercept. This may enchance the\n                     * legiblitity of the indicator's values.\n                     *\n                     * Default value is the closest distance between two data\n                     * points.\n                     *\n                     * In `v9.0.2`, the default value has been changed\n                     * from `undefined` to `null`.\n                     *\n                     * @sample {highstock} stock/plotoptions/linear-regression-xaxisunit\n                     *         xAxisUnit set to 1 minute\n                     *\n                     * @example\n                     * // In Liniear Regression Slope Indicator series `xAxisUnit`is\n                     * // `86400000` (1 day) and period is `3`. There're 3 points in\n                     * // the base series:\n                     *\n                     * data: [\n                     *   [Date.UTC(2020, 0, 1), 1],\n                     *   [Date.UTC(2020, 0, 2), 3],\n                     *   [Date.UTC(2020, 0, 3), 5]\n                     * ]\n                     *\n                     * // This will produce one point in the indicator series that\n                     * // has a `y` value of `2` (slope of the regression line). If\n                     * // we change the `xAxisUnit` to `1` (ms) the value of the\n                     * // indicator's point will be `2.3148148148148148e-8` which is\n                     * // harder to interpert for a human.\n                     *\n                     * @type    {null|number}\n                     * @product highstock\n                     */\n                    xAxisUnit: null\n                },\n                tooltip: {\n                    valueDecimals: 4\n                }\n            });\n            return LinearRegressionIndicator;\n        }(SMAIndicator));\n        extend(LinearRegressionIndicator.prototype, {\n            nameBase: 'Linear Regression Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegression', LinearRegressionIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression series. If the\n         * [type](#series.linearregression.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregression\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregression\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionSlopes/LinearRegressionSlopesIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Slope series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionSlope\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionSlopesIndicator = /** @class */ (function (_super) {\n            __extends(LinearRegressionSlopesIndicator, _super);\n            function LinearRegressionSlopesIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinearRegressionSlopesIndicator.prototype.getEndPointY = function (lineParameters) {\n                return lineParameters.slope;\n            };\n            /**\n             * Linear regression slope indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-slope\n             *         Linear regression slope indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionslope\n             */\n            LinearRegressionSlopesIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n            return LinearRegressionSlopesIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionSlopesIndicator.prototype, {\n            nameBase: 'Linear Regression Slope Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionSlope', LinearRegressionSlopesIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionslope.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionslope\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionslope\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionSlopesIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionIntercept/LinearRegressionInterceptIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Intercept series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionIntercept\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionInterceptIndicator = /** @class */ (function (_super) {\n            __extends(LinearRegressionInterceptIndicator, _super);\n            function LinearRegressionInterceptIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            LinearRegressionInterceptIndicator.prototype.getEndPointY = function (lineParameters) {\n                return lineParameters.intercept;\n            };\n            /**\n             * Linear regression intercept indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-intercept\n             *         Linear intercept slope indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionintercept\n             */\n            LinearRegressionInterceptIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions);\n            return LinearRegressionInterceptIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionInterceptIndicator.prototype, {\n            nameBase: 'Linear Regression Intercept Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionIntercept', LinearRegressionInterceptIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionintercept.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionintercept\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionintercept\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionInterceptIndicator;\n    });\n    _registerModule(_modules, 'Stock/Indicators/LinearRegressionAngle/LinearRegressionAngleIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2021 Kamil Kulig\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var LinearRegressionIndicator = SeriesRegistry.seriesTypes.linearRegression;\n        var extend = U.extend, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Linear Regression Angle series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.linearRegressionAngle\n         *\n         * @augments Highcharts.Series\n         */\n        var LinearRegressionAngleIndicator = /** @class */ (function (_super) {\n            __extends(LinearRegressionAngleIndicator, _super);\n            function LinearRegressionAngleIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.data = void 0;\n                _this.options = void 0;\n                _this.points = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Convert a slope of a line to angle (in degrees) between\n             * the line and x axis\n             * @private\n             * @param {number} slope of the straight line function\n             * @return {number} angle in degrees\n             */\n            LinearRegressionAngleIndicator.prototype.slopeToAngle = function (slope) {\n                return Math.atan(slope) * (180 / Math.PI); // rad to deg\n            };\n            LinearRegressionAngleIndicator.prototype.getEndPointY = function (lineParameters) {\n                return this.slopeToAngle(lineParameters.slope);\n            };\n            /**\n             * Linear regression angle indicator. This series requires `linkedTo`\n             * option to be set.\n             *\n             * @sample {highstock} stock/indicators/linear-regression-angle\n             *         Linear intercept angle indicator\n             *\n             * @extends      plotOptions.linearregression\n             * @since        7.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires  stock/indicators/regressions\n             * @optionparent plotOptions.linearregressionangle\n             */\n            LinearRegressionAngleIndicator.defaultOptions = merge(LinearRegressionIndicator.defaultOptions, {\n                tooltip: {\n                    pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span>' +\n                        '{series.name}: <b>{point.y}°</b><br/>'\n                }\n            });\n            return LinearRegressionAngleIndicator;\n        }(LinearRegressionIndicator));\n        extend(LinearRegressionAngleIndicator.prototype, {\n            nameBase: 'Linear Regression Angle Indicator'\n        });\n        SeriesRegistry.registerSeriesType('linearRegressionAngle', LinearRegressionAngleIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * A linear regression intercept series. If the\n         * [type](#series.linearregressionangle.type) option is not specified, it is\n         * inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.linearregressionangle\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding dataParser,dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/regressions\n         * @apioption series.linearregressionangle\n         */\n        ''; // to include the above in the js output\n\n        return LinearRegressionAngleIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/regressions.src.js', [], function () {\n\n        // eslint-disable-next-line max-len\n        // eslint-disable-next-line max-len\n\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","SeriesRegistry","U","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","SMAIndicator","seriesTypes","sma","isArray","extend","merge","LinearRegressionIndicator","_super","_this","arguments","data","options","points","getRegressionLineParameters","xData","yData","xError","i","yIndex","params","index","getSingleYValue","yValue","xSum","reduce","accX","val","ySum","accY","xMean","length","yMean","formulaNumerator","formulaDenominator","Math","pow","slope","intercept","getEndPointY","lineParameters","endPointX","transformXData","xAxisUnit","xOffset","map","xValue","findClosestDistance","distance","closestDistance","getValues","baseSeries","regressionSeriesParams","periodStart","periodEnd","endPointY","periodXData","periodYData","periodTransformedXData","period","indicatorData","values","slice","push","regressionLineParameters","x","y","defaultOptions","tooltip","valueDecimals","nameBase","registerSeriesType","linearRegression","LinearRegressionSlopesIndicator","LinearRegressionInterceptIndicator","LinearRegressionAngleIndicator","slopeToAngle","atan","PI","pointFormat"],"mappings":"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"}